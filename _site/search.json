[
  
    {
      "title"    : "[Try Hello World] Level4 숫자의 표현",
      "category" : "Solve Algorithm!tryhelloworld",
      "tags"     : "Alogorithm, Level4",
      "url"      : "/solve%20algorithm!/tryhelloworld/2017/11/09/tryhelloworld-level4-number-expression.html",
      "date"     : "2017-11-09 00:00:00 +0900",
      "content"   : "<h2 id=\"숫자의-표현\">숫자의 표현</h2>\n<p>수학을 공부하던 민지는 재미있는 사실을 발견하였습니다. 그 사실은 바로 연속된 자연수의 합으로 어떤 숫자를 표현하는 방법이 여러 가지라는 것입니다. 예를 들어, 15를 표현하는 방법은 <br />\n(1+2+3+4+5) <br />\n(4+5+6) <br />\n(7+8) <br />\n(15) <br />\n로 총 4가지가 존재합니다. 숫자를 입력받아 연속된 수로 표현하는 방법을 반환하는 number_expression 함수를 만들어 민지를 도와주세요. 예를 들어 15가 입력된다면 4를 반환해 주면 됩니다.</p>\n\n<h3 id=\"내-풀이\">내 풀이</h3>\n\n<p>[파이썬]</p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">number_expression</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">):</span>\n    <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">num</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n        <span class=\"nb\">sum</span> <span class=\"o\">=</span> <span class=\"n\">i</span>\n        <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">num</span><span class=\"p\">):</span>\n            <span class=\"nb\">sum</span> <span class=\"o\">+=</span> <span class=\"n\">j</span>\n            <span class=\"k\">if</span> <span class=\"nb\">sum</span> <span class=\"o\">==</span> <span class=\"n\">num</span><span class=\"p\">:</span>\n                <span class=\"n\">count</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n                <span class=\"k\">break</span>\n            <span class=\"k\">elif</span> <span class=\"nb\">sum</span> <span class=\"o\">&gt;</span> <span class=\"n\">num</span><span class=\"p\">:</span>\n                <span class=\"k\">break</span>\n    <span class=\"k\">return</span> <span class=\"n\">count</span>\n\n<span class=\"c\"># 테스트를 위한 실행 코드</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">number_expression</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">));</span>\n</code></pre>\n</div>\n\n<p>[자바]</p>\n\n<div class=\"language-java highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Expressions</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">expressions</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">num</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"n\">num</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"o\">;</span>\n            <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span><span class=\"o\">=</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">&lt;</span><span class=\"n\">num</span><span class=\"o\">;</span> <span class=\"n\">j</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"n\">j</span><span class=\"o\">;</span>\n                <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">sum</span> <span class=\"o\">==</span> <span class=\"n\">num</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"n\">count</span><span class=\"o\">++;</span>\n                    <span class=\"k\">break</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">sum</span> <span class=\"o\">&gt;</span> <span class=\"n\">num</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"k\">break</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span>\t\n            <span class=\"o\">}</span>\t\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">count</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">args</span><span class=\"o\">[])</span> <span class=\"o\">{</span>\n        <span class=\"n\">Expressions</span> <span class=\"n\">expressions</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Expressions</span><span class=\"o\">();</span>\n        <span class=\"c1\">// 아래는 테스트로 출력해 보기 위한 코드입니다.</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"na\">expressions</span><span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">));</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre>\n</div>\n"
    } ,
  
    {
      "title"    : "[Try Hello World] Level4 최고의 집합",
      "category" : "Solve Algorithm!tryhelloworld",
      "tags"     : "Alogorithm, Level4",
      "url"      : "/solve%20algorithm!/tryhelloworld/2017/11/09/tryhelloworld-level4-bestset.html",
      "date"     : "2017-11-09 00:00:00 +0900",
      "content"   : "<h2 id=\"최고의-집합\">최고의 집합</h2>\n<p>자연수 N개로 이루어진 집합 중에, 각 원소의 합이 S가 되는 수의 집합은 여러 가지가 존재합니다. 최고의 집합은, 위의 조건을 만족하는 집합 중 각 원소의 곱이 최대가 되는 집합을 의미합니다.</p>\n\n<p>집합 원소의 개수 n과 원소들의 합 s가 주어지면, 최고의 집합을 찾아 원소를 오름차순으로 반환해주는 bestSet 함수를 만들어 보세요.</p>\n\n<p>만약 조건을 만족하는 집합이 없을 때는 배열 맨 앞에 –1을 담아 반환하면 됩니다. 예를 들어 n=3, s=13이면 [4,4,5]가 반환됩니다.\n(자바는 집합이 없는 경우 크기가 1인 배열에 -1을 담아 반환해주세요.)</p>\n\n<h3 id=\"내-풀이\">내 풀이</h3>\n\n<p>[파이썬]</p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code>\n<span class=\"k\">def</span> <span class=\"nf\">bestSet</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">s</span><span class=\"o\">//</span><span class=\"n\">n</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">-</span><span class=\"n\">s</span><span class=\"o\">%</span><span class=\"n\">n</span><span class=\"p\">)]</span> <span class=\"o\">+</span> <span class=\"p\">[[</span><span class=\"n\">s</span><span class=\"o\">//</span><span class=\"n\">n</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)][</span><span class=\"n\">rem</span><span class=\"p\">]</span><span class=\"o\">+</span><span class=\"mi\">1</span> <span class=\"k\">for</span> <span class=\"n\">rem</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"o\">%</span><span class=\"n\">n</span><span class=\"p\">)]</span>\n\n<span class=\"c\"># 테스트를 위한 실행 코드</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">bestSet</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">13</span><span class=\"p\">))</span>\n\n</code></pre>\n</div>\n"
    } ,
  
    {
      "title"    : "[Try Hello World] Level3 멀리 뛰기",
      "category" : "Solve Algorithm!tryhelloworld",
      "tags"     : "Alogorithm, Level3",
      "url"      : "/solve%20algorithm!/tryhelloworld/2017/11/09/tryhelloworld-level3-jumpcase.html",
      "date"     : "2017-11-09 00:00:00 +0900",
      "content"   : "<h2 id=\"멀리-뛰기\">멀리 뛰기</h2>\n<p>효진이는 멀리 뛰기를 연습하고 있습니다. 효진이는 한번에 1칸, 또는 2칸을 뛸 수 있습니다. 칸이 총 4개 있을 때, 효진이는 <br />\n(1칸, 1칸, 1칸, 1칸) <br />\n(1칸, 2칸, 1칸) <br />\n(1칸, 1칸, 2칸) <br />\n(2칸, 1칸, 1칸) <br />\n(2칸, 2칸) <br />\n의 5가지 방법으로 맨 끝 칸에 도달할 수 있습니다. 멀리뛰기에 사용될 칸의 수 n이 주어질 때, 효진이가 끝에 도달하는 방법이 몇 가지인지 출력하는 jumpCase 함수를 완성하세요. 예를 들어 4가 입력된다면, 5를 반환해 주면 됩니다.</p>\n\n<h3 id=\"내-풀이\">내 풀이</h3>\n\n<p>[파이썬]</p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">jumpCase</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">):</span>\n    <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\n    <span class=\"k\">while</span> <span class=\"n\">num</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n        <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"o\">+</span><span class=\"n\">b</span>\n        <span class=\"n\">num</span> <span class=\"o\">-=</span> <span class=\"mi\">1</span>\n    <span class=\"k\">return</span> <span class=\"n\">b</span>\n\n<span class=\"c\"># 테스트를 위한 실행 코드</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">jumpCase</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p>[자바]</p>\n\n<div class=\"language-java highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nc\">JumpCase</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">jumpCase</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">num</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">while</span><span class=\"o\">(</span><span class=\"n\">num</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"o\">;</span>\n            <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"o\">;</span>\n            <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">temp</span> <span class=\"o\">+</span> <span class=\"n\">a</span><span class=\"o\">;</span>\n            <span class=\"n\">num</span><span class=\"o\">--;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">b</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n      \n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">JumpCase</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">JumpCase</span><span class=\"o\">();</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">.</span><span class=\"na\">jumpCase</span><span class=\"o\">(</span><span class=\"mi\">4</span><span class=\"o\">));</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre>\n</div>\n"
    } ,
  
    {
      "title"    : "[Try Hello World] Level3 N개의 최소공배수",
      "category" : "Solve Algorithm!tryhelloworld",
      "tags"     : "Alogorithm, Level3",
      "url"      : "/solve%20algorithm!/tryhelloworld/2017/11/08/tryhelloworld-level3-nlcm.html",
      "date"     : "2017-11-08 00:00:00 +0900",
      "content"   : "<h2 id=\"n개의-최소공배수\">N개의 최소공배수</h2>\n<p>두 수의 최소공배수(Least Common Multiple)란 입력된 두 수의 배수 중 공통이 되는 가장 작은 숫자를 의미합니다. 예를 들어 2와 7의 최소공배수는 14가 됩니다. 정의를 확장해서, n개의 수의 최소공배수는 n 개의 수들의 배수 중 공통이 되는 가장 작은 숫자가 됩니다. nlcm 함수를 통해 n개의 숫자가 입력되었을 때, 최소공배수를 반환해 주세요. 예를들어 [2,6,8,14] 가 입력된다면 168을 반환해 주면 됩니다.</p>\n\n<h3 id=\"내-풀이\">내 풀이</h3>\n\n<p>[파이썬]</p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code>\n<span class=\"kn\">from</span> <span class=\"nn\">functools</span> <span class=\"kn\">import</span> <span class=\"nb\">reduce</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">my_nlcm</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"nb\">reduce</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">*</span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"o\">//</span><span class=\"n\">get_gcd</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">),</span> <span class=\"n\">num</span><span class=\"p\">)</span>\n\n<span class=\"c\"># 최대공약수 구하기: 유클리드 호제법 적용</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_gcd</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n    <span class=\"k\">while</span> <span class=\"n\">y</span><span class=\"p\">:</span>\n        <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"o\">%</span><span class=\"n\">y</span>\n    <span class=\"k\">return</span> <span class=\"n\">x</span>\n    \n<span class=\"c\"># 테스트를 위한 실행 코드</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">my_nlcm</span><span class=\"p\">([</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">]))</span>\n\n</code></pre>\n</div>\n\n<p>[자바 1] : 주어진 함수에 변형을 가하지 않기 위해 for문 사용</p>\n\n<div class=\"language-java highlighter-rouge\"><pre class=\"highlight\"><code>\n<span class=\"kn\">import</span> <span class=\"nn\">java.util.Arrays</span><span class=\"o\">;</span>\n\n<span class=\"kd\">class</span> <span class=\"nc\">NLCM</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">long</span> <span class=\"nf\">nlcm</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">num</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"c1\">// int[] -&gt; long[] 형변환 람다식</span>\n        <span class=\"kt\">long</span><span class=\"o\">[]</span> <span class=\"n\">longNum</span> <span class=\"o\">=</span> <span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">stream</span><span class=\"o\">(</span><span class=\"n\">num</span><span class=\"o\">).</span><span class=\"na\">mapToLong</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">-&gt;</span> <span class=\"n\">i</span><span class=\"o\">).</span><span class=\"na\">toArray</span><span class=\"o\">();</span>\n        <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"n\">longNum</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++){</span>\n            <span class=\"n\">longNum</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"kt\">long</span><span class=\"o\">)</span><span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">floor</span><span class=\"o\">((</span><span class=\"n\">longNum</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]*</span><span class=\"n\">longNum</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">]/</span><span class=\"n\">get_gcd</span><span class=\"o\">(</span><span class=\"n\">longNum</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">],</span> <span class=\"n\">longNum</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">])));</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">longNum</span><span class=\"o\">[</span><span class=\"n\">longNum</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">];</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">long</span> <span class=\"nf\">get_gcd</span><span class=\"o\">(</span><span class=\"kt\">long</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kt\">long</span> <span class=\"n\">y</span><span class=\"o\">){</span>\n        <span class=\"kt\">long</span> <span class=\"n\">temp</span><span class=\"o\">;</span>\n        <span class=\"k\">while</span><span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">){</span>\n            <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"o\">%</span><span class=\"n\">y</span><span class=\"o\">;</span>\n            <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">y</span><span class=\"o\">;</span>\n            <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">temp</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">x</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">NLCM</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">NLCM</span><span class=\"o\">();</span>\n        <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">ex</span> <span class=\"o\">=</span> <span class=\"o\">{</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">6</span><span class=\"o\">,</span><span class=\"mi\">8</span><span class=\"o\">,</span><span class=\"mi\">14</span><span class=\"o\">};</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"na\">nlcm</span><span class=\"o\">(</span><span class=\"n\">ex</span><span class=\"o\">));</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n</code></pre>\n</div>\n\n<p>[자바 2] : 자바 람다식 reduce() 활용</p>\n\n<div class=\"language-java highlighter-rouge\"><pre class=\"highlight\"><code>\n<span class=\"kn\">import</span> <span class=\"nn\">java.util.Arrays</span><span class=\"o\">;</span>\n\n<span class=\"kd\">class</span> <span class=\"nc\">NLCM</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">long</span> <span class=\"nf\">nlcm</span><span class=\"o\">(</span><span class=\"kt\">long</span><span class=\"o\">[]</span> <span class=\"n\">num</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">stream</span><span class=\"o\">(</span><span class=\"n\">num</span><span class=\"o\">).</span><span class=\"na\">reduce</span><span class=\"o\">((</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">-&gt;</span> <span class=\"o\">(</span><span class=\"kt\">long</span><span class=\"o\">)</span><span class=\"n\">Math</span><span class=\"o\">.</span><span class=\"na\">floor</span><span class=\"o\">((</span><span class=\"n\">x</span><span class=\"o\">*</span><span class=\"n\">y</span><span class=\"o\">)/</span><span class=\"n\">get_gcd</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">))).</span><span class=\"na\">getAsLong</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">long</span> <span class=\"nf\">get_gcd</span><span class=\"o\">(</span><span class=\"kt\">long</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kt\">long</span> <span class=\"n\">y</span><span class=\"o\">){</span>\n        <span class=\"kt\">long</span> <span class=\"n\">temp</span><span class=\"o\">;</span>\n        <span class=\"k\">do</span> <span class=\"o\">{</span>\n            <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"o\">%</span><span class=\"n\">y</span><span class=\"o\">;</span>\n            <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">y</span><span class=\"o\">;</span>\n            <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">temp</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span> <span class=\"k\">while</span><span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">x</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">NLCM</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">NLCM</span><span class=\"o\">();</span>\n        <span class=\"kt\">long</span><span class=\"o\">[]</span> <span class=\"n\">ex</span> <span class=\"o\">=</span> <span class=\"o\">{</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">6</span><span class=\"o\">,</span><span class=\"mi\">8</span><span class=\"o\">,</span><span class=\"mi\">14</span><span class=\"o\">};</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"na\">nlcm</span><span class=\"o\">(</span><span class=\"n\">ex</span><span class=\"o\">));</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n</code></pre>\n</div>\n\n<h3 id=\"소감\">소감</h3>\n<p>파이썬 사랑합니다. 파이썬은 10~20분 이내에 푸는데, 자바 생소해서 그런지 신경써야 할 것도 파이썬에 비해 너무 많아서 문제를 한 번 풀기가 너무 힘들다.</p>\n\n<p><strong>이슈 1)</strong> 이번에 자바 코드가 두 개인 것은 자바 람다식인 reduce()를 사용하면 정말 간단하게 풀리는 것을 확인할 수 있다. 하지만 문제에서 주어진 함수의 원형은 int[] 타입이다. 답은 맞지만 원형에 변형을 가해서 테스트에서 계속 오류가 발생, 그래서 int[] 인자를 우선 받은 뒤, long[] 타입으로 바꾸고 for문을 사용하여 답을 제출했다.</p>\n\n<p><strong>이슈 2)</strong> 자바는 파이썬과 다르게 여러 타입이 존재하고 반드시 그 타입을 선언해줘야 한다. 이 문제에서 긴 배열이 주어질 경우, 당연히 최소공배수의 값은 커질 수 밖에 없었다. 즉, int 로는 답을 표현하기에 한계가 있었던 것, 찾아본 결과 자바에서 int 타입의 저장 공간은 32bits, 값 범위가 -2147483648 ~ 2147483647 이다. 답을 도출하는 과정에서 그 최대값인 2147483647가 넘는 경우가 발생하면 음수로 표현되어 계속 이상한 값을 반환하였다. 그래서 전부 long 타입으로 변환했다.</p>\n\n<p>자바로 알고리즘을 풀면서 웹개발을 공부했을 때는 미처 몰랐던 부분이 굉장히 많았다. 굳이 안 해도 간단한 기능 구현에는 문제가 없었기 때문이었다. 요즘 진짜 많이 배운다. 컴파일러 언어를 배워야한다고 양태환 강사님이 누차 말씀하셨는데 맞는 말씀인 것 같다.</p>\n"
    } ,
  
    {
      "title"    : "[Try Hello World] Level3 시저 암호",
      "category" : "Solve Algorithm!tryhelloworld",
      "tags"     : "Alogorithm, Level3",
      "url"      : "/solve%20algorithm!/tryhelloworld/2017/11/03/tryhelloword-caesar.html",
      "date"     : "2017-11-03 00:00:00 +0900",
      "content"   : "<p>어떤 문장의 각 알파벳을 일정한 거리만큼 밀어서 다른 알파벳으로 바꾸는 암호화 방식을 시저 암호라고 합니다.</p>\n\n<p>A를 3만큼 밀면 D가 되고 z를 1만큼 밀면 a가 됩니다. 공백은 수정하지 않습니다.</p>\n\n<p>보낼 문자열 s와 얼마나 밀지 알려주는 n을 입력받아 암호문을 만드는 caesar 함수를 완성해 보세요.</p>\n\n<ul>\n  <li>“a B z”,4를 입력받았다면 “e F d”를 리턴합니다.</li>\n</ul>\n\n<h3 id=\"내-코드\">내 코드</h3>\n\n<p>[파이썬]</p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">string</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">caesar</span><span class=\"p\">(</span><span class=\"n\">st</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">st</span><span class=\"p\">)</span>\n    <span class=\"n\">upper</span> <span class=\"o\">=</span> <span class=\"n\">string</span><span class=\"o\">.</span><span class=\"n\">ascii_uppercase</span>\n    <span class=\"n\">lower</span> <span class=\"o\">=</span> <span class=\"n\">string</span><span class=\"o\">.</span><span class=\"n\">ascii_lowercase</span>\n    <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"o\">&gt;</span> <span class=\"mi\">25</span><span class=\"p\">:</span>\n        <span class=\"n\">n</span> <span class=\"o\">%=</span> <span class=\"mi\">26</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)):</span>\n        <span class=\"k\">if</span> <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"ow\">in</span> <span class=\"n\">upper</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">upper</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span><span class=\"o\">+</span><span class=\"n\">n</span> <span class=\"o\">&gt;</span> <span class=\"mi\">25</span><span class=\"p\">:</span>\n                <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">upper</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"o\">-</span><span class=\"p\">(</span><span class=\"mi\">26</span><span class=\"o\">-</span><span class=\"n\">upper</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]))]</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">upper</span><span class=\"p\">[</span><span class=\"n\">upper</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span><span class=\"o\">+</span><span class=\"n\">n</span><span class=\"p\">]</span>\n        <span class=\"k\">elif</span> <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"ow\">in</span> <span class=\"n\">lower</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">lower</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span><span class=\"o\">+</span><span class=\"n\">n</span> <span class=\"o\">&gt;</span> <span class=\"mi\">25</span><span class=\"p\">:</span>\n                <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">lower</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"o\">-</span><span class=\"p\">(</span><span class=\"mi\">26</span><span class=\"o\">-</span><span class=\"n\">lower</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]))]</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">lower</span><span class=\"p\">[</span><span class=\"n\">lower</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span><span class=\"o\">+</span><span class=\"n\">n</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"s\">\"\"</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\n\n<span class=\"c\"># 실행을 위한 테스트 코드입니다.</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">caesar</span><span class=\"p\">(</span><span class=\"s\">\"a B z\"</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p>[자바]</p>\n\n<div class=\"language-java highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">java.util.Arrays</span><span class=\"o\">;</span>\n\n<span class=\"kd\">class</span> <span class=\"nc\">Caesar</span> <span class=\"o\">{</span>\n    <span class=\"n\">String</span> <span class=\"nf\">caesar</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">str</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">split</span><span class=\"o\">(</span><span class=\"s\">\"\"</span><span class=\"o\">);</span>\n        <span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">upper</span> <span class=\"o\">=</span> <span class=\"s\">\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"</span><span class=\"o\">.</span><span class=\"na\">split</span><span class=\"o\">(</span><span class=\"s\">\"\"</span><span class=\"o\">);</span>\n        <span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">lower</span> <span class=\"o\">=</span> <span class=\"s\">\"abcdefghijklmnopqrstuvwxyz\"</span><span class=\"o\">.</span><span class=\"na\">split</span><span class=\"o\">(</span><span class=\"s\">\"\"</span><span class=\"o\">);</span>\n        <span class=\"n\">String</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"s\">\"\"</span><span class=\"o\">;</span>\n        <span class=\"n\">n</span> <span class=\"o\">%=</span> <span class=\"mi\">26</span><span class=\"o\">;</span>\n\n        <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"n\">str</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">asList</span><span class=\"o\">(</span><span class=\"n\">upper</span><span class=\"o\">).</span><span class=\"na\">contains</span><span class=\"o\">(</span><span class=\"n\">str</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]))</span> <span class=\"o\">{</span>\n                <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">asList</span><span class=\"o\">(</span><span class=\"n\">upper</span><span class=\"o\">).</span><span class=\"na\">indexOf</span><span class=\"o\">(</span><span class=\"n\">str</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">])+</span><span class=\"n\">n</span> <span class=\"o\">&gt;</span> <span class=\"mi\">25</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"n\">str</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">upper</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">-(</span><span class=\"mi\">26</span><span class=\"o\">-</span><span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">asList</span><span class=\"o\">(</span><span class=\"n\">upper</span><span class=\"o\">).</span><span class=\"na\">indexOf</span><span class=\"o\">(</span><span class=\"n\">str</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]))];</span>\n                <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                    <span class=\"n\">str</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">upper</span><span class=\"o\">[</span><span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">asList</span><span class=\"o\">(</span><span class=\"n\">upper</span><span class=\"o\">).</span><span class=\"na\">indexOf</span><span class=\"o\">(</span><span class=\"n\">str</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">])+</span><span class=\"n\">n</span><span class=\"o\">];</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">asList</span><span class=\"o\">(</span><span class=\"n\">lower</span><span class=\"o\">).</span><span class=\"na\">contains</span><span class=\"o\">(</span><span class=\"n\">str</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]))</span> <span class=\"o\">{</span>\n                <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">asList</span><span class=\"o\">(</span><span class=\"n\">lower</span><span class=\"o\">).</span><span class=\"na\">indexOf</span><span class=\"o\">(</span><span class=\"n\">str</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">])+</span><span class=\"n\">n</span> <span class=\"o\">&gt;</span> <span class=\"mi\">25</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"n\">str</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">lower</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">-(</span><span class=\"mi\">26</span><span class=\"o\">-</span><span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">asList</span><span class=\"o\">(</span><span class=\"n\">lower</span><span class=\"o\">).</span><span class=\"na\">indexOf</span><span class=\"o\">(</span><span class=\"n\">str</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]))];</span>\n                <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                    <span class=\"n\">str</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">lower</span><span class=\"o\">[</span><span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">asList</span><span class=\"o\">(</span><span class=\"n\">lower</span><span class=\"o\">).</span><span class=\"na\">indexOf</span><span class=\"o\">(</span><span class=\"n\">str</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">])+</span><span class=\"n\">n</span><span class=\"o\">];</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n            <span class=\"n\">result</span> <span class=\"o\">+=</span> <span class=\"n\">str</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">];</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">result</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">Caesar</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Caesar</span><span class=\"o\">();</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"na\">caesar</span><span class=\"o\">(</span><span class=\"s\">\"a B z\"</span><span class=\"o\">,</span> <span class=\"mi\">31</span><span class=\"o\">));</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre>\n</div>\n\n<h3 id=\"다른-사람-풀이\">다른 사람 풀이</h3>\n\n<p>[파이썬]</p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">caesar</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"s\">\"\"</span>\n    <span class=\"k\">for</span> <span class=\"n\">ch</span> <span class=\"ow\">in</span> <span class=\"n\">s</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">ch</span> <span class=\"o\">==</span> <span class=\"s\">' '</span><span class=\"p\">:</span>\n            <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">result</span> <span class=\"o\">+</span> <span class=\"n\">ch</span>\n            <span class=\"k\">continue</span>\n        <span class=\"n\">enc</span> <span class=\"o\">=</span> <span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"n\">ch</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">n</span>\n        <span class=\"k\">if</span> <span class=\"n\">ch</span><span class=\"o\">.</span><span class=\"n\">isupper</span><span class=\"p\">():</span>\n            <span class=\"n\">enc</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"n\">ch</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"s\">'A'</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"mi\">26</span> <span class=\"o\">+</span> <span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"s\">'A'</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"n\">ch</span><span class=\"o\">.</span><span class=\"n\">islower</span><span class=\"p\">():</span>\n            <span class=\"n\">enc</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"n\">ch</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"s\">'a'</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"mi\">26</span> <span class=\"o\">+</span> <span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"s\">'a'</span><span class=\"p\">)</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">result</span> <span class=\"o\">+</span> <span class=\"nb\">chr</span><span class=\"p\">(</span><span class=\"n\">enc</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">result</span>\n</code></pre>\n</div>\n\n<p>[자바]</p>\n\n<div class=\"language-java highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nc\">Caesar</span> <span class=\"o\">{</span>\n    <span class=\"n\">String</span> <span class=\"nf\">caesar</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">String</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"s\">\"\"</span><span class=\"o\">;</span>\n    <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">n</span> <span class=\"o\">%</span> <span class=\"mi\">26</span><span class=\"o\">;</span>\n    <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">();</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n      <span class=\"kt\">char</span> <span class=\"n\">ch</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">);</span>\n      <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">Character</span><span class=\"o\">.</span><span class=\"na\">isLowerCase</span><span class=\"o\">(</span><span class=\"n\">ch</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n        <span class=\"n\">ch</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"kt\">char</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">ch</span> <span class=\"o\">-</span> <span class=\"sc\">'a'</span> <span class=\"o\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">%</span> <span class=\"mi\">26</span> <span class=\"o\">+</span> <span class=\"sc\">'a'</span><span class=\"o\">);</span>\n      <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">Character</span><span class=\"o\">.</span><span class=\"na\">isUpperCase</span><span class=\"o\">(</span><span class=\"n\">ch</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n        <span class=\"n\">ch</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"kt\">char</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">ch</span> <span class=\"o\">-</span> <span class=\"sc\">'A'</span> <span class=\"o\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">%</span> <span class=\"mi\">26</span> <span class=\"o\">+</span> <span class=\"sc\">'A'</span><span class=\"o\">);</span>\n      <span class=\"o\">}</span>\n      <span class=\"n\">result</span> <span class=\"o\">+=</span> <span class=\"n\">ch</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">result</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">Caesar</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Caesar</span><span class=\"o\">();</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"s는 'a B z', n은 4인 경우: \"</span> <span class=\"o\">+</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"na\">caesar</span><span class=\"o\">(</span><span class=\"s\">\"a B z\"</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">));</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n</code></pre>\n</div>\n\n<blockquote>\n  <p><strong>파이썬 내장 함수</strong> <br /><br />\n<code class=\"highlighter-rouge\">ord()</code> <br />\n문자의 아스키 코드 값을 리턴</p>\n\n  <div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>&gt;&gt; ord('a)\n97\n&gt;&gt; ord('0')\n48\n</code></pre>\n  </div>\n\n  <p><code class=\"highlighter-rouge\">chr()</code> <br />\n아스키 코드 값을 입력받아 그 코드에 해당하는 문자를 출력</p>\n\n  <div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>&gt;&gt; chr(97)\na\n&gt;&gt; chr(48)\n0\n</code></pre>\n  </div>\n</blockquote>\n\n<blockquote>\n  <p><strong>자바 내장 함수</strong> <br /><br />\n<code class=\"highlighter-rouge\">Character.isLowerCase(char ch), Character.isUpperCase(char ch)</code> <br />\n인자 값이 알파벳 소문자 혹은 대문자 여부에 따라서 true/false를 반환</p>\n</blockquote>\n\n<h3 id=\"소감\">소감</h3>\n<p>새로운 문법과 유용한 쓰임새에 대해서 알 수 있었다. 앞으로 문제를 풀 때 많이 참고해야지.</p>\n\n"
    } ,
  
    {
      "title"    : "[Try Hello World] Level3 야근 지수",
      "category" : "Solve Algorithm!tryhelloworld",
      "tags"     : "Alogorithm, Level3",
      "url"      : "/solve%20algorithm!/tryhelloworld/2017/11/02/tryhelloword-noovertime.html",
      "date"     : "2017-11-02 00:00:00 +0900",
      "content"   : "<p>회사원인 수민이는 많은 일이 쌓여 있습니다. 수민이는 야근을 최소화하기 위해 남은 일의 작업량을 숫자로 메기고, 일에 대한 야근 지수를 줄이기로 결정했습니다.</p>\n\n<p>야근 지수는 남은 일의 작업량을 제곱하여 더한 값을 의미합니다. 수민이는 1시간 동안 남은 일 중 하나를 골라 작업량 1만큼 처리할 수 있습니다. 수민이의 퇴근까지 남은 N 시간과 각 일에 대한 작업량이 있을 때, noOvertime 함수를 제작하여 수민이의 야근 지수를 최소화 한 결과를 출력해 주세요.</p>\n\n<p>예를 들어, N=4 일 때, 남은 일의 작업량이 [4, 3, 3] 이라면 야근 지수를 최소화하기 위해 일을 한 결과는 [2, 2, 2]가 되고 야근 지수는 22 + 22 + 22 = 12가 되어 12를 반환해 줍니다.</p>\n\n<h3 id=\"내-코드\">내 코드</h3>\n\n<p>[파이썬]</p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">noOvertime</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">works</span><span class=\"p\">):</span>\n    <span class=\"k\">while</span> <span class=\"n\">n</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"n\">getMaxNum</span><span class=\"p\">(</span><span class=\"n\">works</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">-=</span> <span class=\"mi\">1</span>\n        <span class=\"n\">n</span> <span class=\"o\">-=</span> <span class=\"mi\">1</span>\n    <span class=\"k\">return</span> <span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">*</span><span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">works</span><span class=\"p\">))</span>\n    \n<span class=\"k\">def</span> <span class=\"nf\">getMaxNum</span><span class=\"p\">(</span><span class=\"n\">works</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">works</span><span class=\"p\">)):</span>\n        <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">works</span><span class=\"p\">)):</span>\n            <span class=\"k\">if</span> <span class=\"n\">works</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">works</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]:</span>\n                <span class=\"n\">works</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">works</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">works</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">],</span> <span class=\"n\">works</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"n\">works</span>\n    \n<span class=\"c\"># 실행을 위한 테스트 코드입니다.</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">noOvertime</span><span class=\"p\">(</span><span class=\"mi\">48</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">]))</span>\n</code></pre>\n</div>\n\n<p>[자바]</p>\n\n<div class=\"language-java highlighter-rouge\"><pre class=\"highlight\"><code>\n</code></pre>\n</div>\n\n<h3 id=\"느낀점\">느낀점</h3>\n<p>파이썬에서 제공해주는 <code class=\"highlighter-rouge\">index()</code>라는 편리한 메서드를 알게되었다.</p>\n"
    } ,
  
    {
      "title"    : "[Try Hello World] Level2 최솟값 만들기",
      "category" : "Solve Algorithm!tryhelloworld",
      "tags"     : "Alogorithm, Level2",
      "url"      : "/solve%20algorithm!/tryhelloworld/2017/11/01/tryhelloword-getminsum.html",
      "date"     : "2017-11-01 00:00:00 +0900",
      "content"   : "<h2 id=\"최솟값-만들기\">최솟값 만들기</h2>\n\n<p>자연수로 이루어진 길이가 같은 수열 A,B가 있습니다. 최솟값 만들기는 A, B에서 각각 한 개의 숫자를 뽑아 두 수를 곱한 값을 누적하여 더합니다. 이러한 과정을 수열의 길이만큼 반복하여 최종적으로 누적된 값이 최소가 되도록 만드는 것이 목표입니다.</p>\n\n<p>예를 들어 A = [1, 2] , B = [3, 4] 라면 <br />\n<strong>1.</strong> A에서 1, B에서 4를 뽑아 곱하여 더합니다. <br />\n<strong>2.</strong> A에서 2, B에서 3을 뽑아 곱하여 더합니다.</p>\n\n<p>수열의 길이만큼 반복하여 최솟값 10을 얻을 수 있으며, 이 10이 최솟값이 됩니다. <br />\n수열 A,B가 주어질 때, 최솟값을 반환해주는 getMinSum 함수를 완성하세요.</p>\n\n<h3 id=\"내-코드\">내 코드</h3>\n\n<p>[파이썬]</p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">getMinSum</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n    <span class=\"n\">sort_a</span> <span class=\"o\">=</span> <span class=\"n\">sort_list</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n    <span class=\"n\">sort_b</span> <span class=\"o\">=</span> <span class=\"n\">sort_list</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    \n    <span class=\"k\">for</span> <span class=\"n\">idx</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)):</span>\n        <span class=\"n\">result</span> <span class=\"o\">+=</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"n\">b</span><span class=\"p\">[</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span><span class=\"o\">-</span><span class=\"n\">idx</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"n\">result</span>\n    \n<span class=\"k\">def</span> <span class=\"nf\">sort_list</span><span class=\"p\">(</span><span class=\"n\">li</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">idx</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">li</span><span class=\"p\">)</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">li</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">li</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">]:</span>\n            <span class=\"n\">li</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">],</span> <span class=\"n\">li</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">li</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">li</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">]</span>\n    <span class=\"k\">if</span> <span class=\"n\">li</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">li</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span>\n        <span class=\"n\">li</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">li</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">li</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">li</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"n\">li</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">getMinSum</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]))</span>\n</code></pre>\n</div>\n\n<p>[자바]</p>\n\n<div class=\"language-java highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nc\">TryHelloWorld</span> <span class=\"o\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">idx</span><span class=\"o\">;</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">getMinSum</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"o\">[]</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"o\">[]</span><span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">answer</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"n\">idx</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">idx</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">idx</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"n\">answer</span> <span class=\"o\">+=</span> <span class=\"n\">A</span><span class=\"o\">[</span><span class=\"n\">idx</span><span class=\"o\">]*</span><span class=\"n\">B</span><span class=\"o\">[(</span><span class=\"n\">A</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">)-</span><span class=\"n\">idx</span><span class=\"o\">];</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">answer</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"nf\">getSortedArray</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">array</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">temp</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"n\">idx</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">idx</span><span class=\"o\">&lt;</span><span class=\"n\">array</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"o\">;</span> <span class=\"n\">idx</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">array</span><span class=\"o\">[</span><span class=\"n\">idx</span><span class=\"o\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">array</span><span class=\"o\">[</span><span class=\"n\">idx</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n                <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"n\">array</span><span class=\"o\">[</span><span class=\"n\">idx</span><span class=\"o\">];</span>\n                <span class=\"n\">array</span><span class=\"o\">[</span><span class=\"n\">idx</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">array</span><span class=\"o\">[</span><span class=\"n\">idx</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">];</span>\n                <span class=\"n\">array</span><span class=\"o\">[</span><span class=\"n\">idx</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">temp</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">array</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">array</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n            <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"n\">array</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">];</span>\n            <span class=\"n\">array</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">array</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">];</span>\n            <span class=\"n\">array</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"n\">temp</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">array</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">TryHelloWorld</span> <span class=\"n\">test</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">TryHelloWorld</span><span class=\"o\">();</span>\n        <span class=\"kt\">int</span> <span class=\"o\">[]</span><span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">};</span>\n        <span class=\"kt\">int</span> <span class=\"o\">[]</span><span class=\"n\">B</span> <span class=\"o\">=</span> <span class=\"o\">{</span><span class=\"mi\">4</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"o\">,</span><span class=\"mi\">6</span><span class=\"o\">};</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">test</span><span class=\"o\">.</span><span class=\"na\">getMinSum</span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">,</span><span class=\"n\">B</span><span class=\"o\">));</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre>\n</div>\n"
    } ,
  
    {
      "title"    : "[Try Hello World] Level2 콜라츠 추측",
      "category" : "Solve Algorithm!tryhelloworld",
      "tags"     : "Alogorithm, Level2",
      "url"      : "/solve%20algorithm!/tryhelloworld/2017/11/01/tryhelloword-collatz.html",
      "date"     : "2017-11-01 00:00:00 +0900",
      "content"   : "<h2 id=\"콜라츠-추측\">콜라츠 추측</h2>\n\n<p>1937년 Collatz란 사람에 의해 제기된 이 추측은, 입력된 수가 짝수라면 2로 나누고, 홀수라면 3을 곱하고 1을 더한 다음, 결과로 나온 수에 같은 작업을 1이 될 때까지 반복할 경우 모든 수가 1이 된다는 추측입니다.</p>\n\n<p>예를 들어, 입력된 수가 6이라면 6→3→10→5→16→8→4→2→1 이 되어 총 8번 만에 1이 됩니다. collatz 함수를 만들어 입력된 수가 몇 번 만에 1이 되는지 반환해 주세요. 단, 500번을 반복해도 1이 되지 않는다면 –1을 반환해 주세요.</p>\n\n<h3 id=\"내-코드\">내 코드</h3>\n\n<p>[파이썬]</p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">collatz</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">):</span>\n    <span class=\"n\">repeat</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"k\">while</span> <span class=\"n\">num</span> <span class=\"o\">!=</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">num</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"n\">num</span> <span class=\"o\">/</span> <span class=\"mi\">2</span>        \n        <span class=\"k\">elif</span> <span class=\"n\">repeat</span> <span class=\"o\">&gt;</span> <span class=\"mi\">500</span><span class=\"p\">:</span>\n            <span class=\"n\">repeat</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n            <span class=\"k\">break</span><span class=\"p\">;</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"n\">num</span> <span class=\"o\">*</span> <span class=\"mi\">3</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n        <span class=\"n\">repeat</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n    <span class=\"k\">return</span> <span class=\"n\">repeat</span>\n</code></pre>\n</div>\n\n<p>[자바]</p>\n\n<div class=\"language-java highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nc\">Collatz</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">collatz</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">num</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">repeat</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">num</span> <span class=\"o\">!=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">num</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"n\">num</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">repeat</span> <span class=\"o\">&gt;</span> <span class=\"mi\">500</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">repeat</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">;</span>\n                <span class=\"k\">break</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                <span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"n\">num</span> <span class=\"o\">*</span> <span class=\"mi\">3</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n            <span class=\"n\">repeat</span><span class=\"o\">++;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">repeat</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">Collatz</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Collatz</span><span class=\"o\">();</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"na\">collatz</span><span class=\"o\">(</span><span class=\"mi\">6</span><span class=\"o\">));</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre>\n</div>\n\n<h3 id=\"다른-사람-코드\">다른 사람 코드</h3>\n\n<p>[파이썬]</p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">collatz</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">500</span><span class=\"p\">):</span>\n        <span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"n\">num</span> <span class=\"o\">/</span> <span class=\"mi\">2</span> <span class=\"k\">if</span> <span class=\"n\">num</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"n\">num</span><span class=\"o\">*</span><span class=\"mi\">3</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n        <span class=\"k\">if</span> <span class=\"n\">num</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n    <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n</code></pre>\n</div>\n\n<p>[자바]</p>\n\n<div class=\"language-java highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nc\">Collatz</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">collatz</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">num</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">answer</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">500</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"n\">num</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"o\">?</span> <span class=\"n\">num</span> <span class=\"o\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">num</span> <span class=\"o\">*</span> <span class=\"mi\">3</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">num</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"k\">return</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">Collatz</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Collatz</span><span class=\"o\">();</span>        \n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"na\">collatz</span><span class=\"o\">(</span><span class=\"mi\">6</span><span class=\"o\">));</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre>\n</div>\n"
    } ,
  
    {
      "title"    : "CORS와 CSRF(2)",
      "category" : "IT/기본개념basic-concept",
      "tags"     : "CORS, CSRF, HTTP",
      "url"      : "/it/%EA%B8%B0%EB%B3%B8%EA%B0%9C%EB%85%90/basic-concept/2017/10/29/csrf-cors.html",
      "date"     : "2017-10-29 00:00:00 +0900",
      "content"   : "<blockquote>\n  <p><code class=\"highlighter-rouge\">CORS</code>와 <code class=\"highlighter-rouge\">CSRF</code>, 완전히 다른 개념임에도 불구하고 비슷한 이름으로 헷갈렸었다. 이 포스트에서 CSRF의 개념을 정리하고 장고에 적용하는 방법 및 예시를 작성하려 한다.</p>\n</blockquote>\n\n<h2 id=\"csrfcross-site-reuqest-forgery\">CSRF(Cross Site Reuqest Forgery)</h2>\n<p>사이트 간 요청 위조, 웹사이트의 취약점 공격의 하나로 CSRF 공격은 특정 웹 사이트가 사용자의 웹 브라우저를 신용하는 상태를 노린 것이다. 즉 사용자의 권한을 이용하여 서버에 부정적인 요청을 일으키는 공격이다.</p>\n\n<p>사용자가 로그인한 상태에서 해당 공격 코드가 삽입된 페이지를 열면, 공격자가 의도한 요청이 열람한 유저 혹은 관리자의 권한으로 등록/수정/삭제 등이 이루어지게 된다.</p>\n\n<h3 id=\"공격과정\">공격과정</h3>\n<p style=\"font-weight: bold; color: #8d8d8d; margin: 25px 0;\">주 공격 대상</p>\n<ul>\n  <li>글쓰기 시 HTML 태그가 허용된 게시판</li>\n</ul>\n\n<p style=\"font-weight: bold; color: #8d8d8d; margin: 25px 0;\">주 공격 대상</p>\n<ul>\n  <li>&lt;script&gt;, &lt;object&gt;, &lt;applet&gt;, &lt;embed&gt;, &lt;img&gt;, &lt;form&gt; 등</li>\n</ul>\n\n<p><img src=\"http://localhost:4000/assets/csrf.png\" alt=\"\" class=\"center-image\" /></p>\n\n<p style=\"font-weight: bold; color: #8d8d8d; margin: 25px 0;\">피해 유형</p>\n<ul>\n  <li>정보 노출 쿠키 혹은 세션 정보 노출</li>\n  <li>동일 작업 반복 게시물 클릭시 공격자가 원하는 동작 수행</li>\n</ul>\n\n<p style=\"font-weight: bold; color: #8d8d8d; margin: 25px 0;\">보호 대책</p>\n<ul>\n  <li>가장 기본적으로 서버 상태를 변경하는 요청에 대해 GET을 쓰지 않는 것이다.</li>\n  <li>하지만 POST 메소드의 경우에도 hidden 필드에 임의의 키값을 전달하고 그 키값이 맞는가를 매번 확인하도록 하는 절차가 필요하다.</li>\n  <li>이때, 검증은 반드시 서버에서 이루어지도록 개발하여야 한다.</li>\n</ul>\n\n<h4 id=\"실제-공격-사례\">실제 공격 사례</h4>\n\n<p class=\"quote\">\n최근에 발생했던 옥션의 1800만명 개인 정보 유출 사고는 CSRF 공격을 당한 것으로 밝혀졌다. 중국 해커는 직접 서버를 공격하는 대신, 옥션 운영진을 대상으로 악성 코드를 첨부한 메일을 대량으로 유포했다. 운영자가 메일을 확인한 순간 ID를 얻을 수 있었고, 해커는 이 ID를 이용하여 옥션 서버에 로그인할 수 있었다고 한다.\n</p>\n\n<h2 id=\"장고에서-csrf-적용하기\">장고에서 CSRF 적용하기</h2>\n<p>장고에서는 1.2 버전부터 CSRF 취약점을 막는 기능을 기본으로 제공한다. 모든 POST 방식의 폼 전송에 hidden 필드로 세션에 따른 임의 키 값을 전송하며 해당 키 값이 유효한지 매번 확인한다.</p>\n\n<p><strong>1.</strong> 설정 파일(settings.py) <code class=\"highlighter-rouge\">미들웨어</code>에 <code class=\"highlighter-rouge\">django.middleware.csrf.CsrfViewMiddleware</code>를 추가한다. 장고 1.2 이상 버전의 경우 기본으로 포함되어 있다. <br />\n<strong>2.</strong> POST가 사용된 장고 템플릿에 <code class=\"highlighter-rouge\"><span class=\"p\">{</span><span class=\"err\">%</span><span class=\"w\"> </span><span class=\"err\">csrf_token</span><span class=\"w\"> </span><span class=\"err\">%</span><span class=\"p\">}</span></code>을 삽입한다. <a href=\"https://bbungsang.github.io/%EB%91%90%EC%88%9F%EA%B0%88%20%EC%8A%A4%ED%84%B0%EB%94%94/two-scoops/2017/08/30/ch15-dtl-jinja2.html\">Jinja2</a>의 경우 <code class=\"highlighter-rouge\"><span class=\"p\">{</span><span class=\"err\">{</span><span class=\"w\"> </span><span class=\"err\">csrf_input</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"err\">}</span></code>을 삽입한다.</p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code>\n<span class=\"o\">&lt;</span><span class=\"n\">form</span> <span class=\"n\">action</span><span class=\"o\">=</span><span class=\"s\">\"\"</span> <span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s\">\"POST\"</span><span class=\"o\">&gt;</span>\n    <span class=\"p\">{</span><span class=\"o\">%</span> <span class=\"n\">csrf_token</span> <span class=\"o\">%</span><span class=\"p\">}</span>\n    <span class=\"c\"># Jinja2, {{ csrf_input }}</span>\n    <span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">]</span>\n    <span class=\"o\">&lt;</span><span class=\"n\">button</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s\">\"submit\"</span><span class=\"o\">&gt;</span><span class=\"err\">제출</span><span class=\"o\">&lt;/</span><span class=\"n\">button</span><span class=\"o\">&gt;</span>\n<span class=\"o\">&lt;/</span><span class=\"n\">form</span><span class=\"o\">&gt;</span>\n\n</code></pre>\n</div>\n"
    } ,
  
    {
      "title"    : "CORS와 CSRF(1)",
      "category" : "IT/기본개념basic-concept",
      "tags"     : "CORS, CSRF, HTTP",
      "url"      : "/it/%EA%B8%B0%EB%B3%B8%EA%B0%9C%EB%85%90/basic-concept/2017/10/28/csrf-cors.html",
      "date"     : "2017-10-28 00:00:00 +0900",
      "content"   : "<blockquote>\n  <p><code class=\"highlighter-rouge\">CORS</code>와 <code class=\"highlighter-rouge\">CSRF</code>, 완전히 다른 개념임에도 불구하고 비슷한 이름으로 헷갈렸었다. 이 포스트에서 CORS의 개념을 정리하고 장고에 적용하는 방법 및 예시를 작성하려 한다.</p>\n</blockquote>\n\n<h2 id=\"corscross-origin-resourc-sharing\">CORS(Cross Origin Resourc Sharing)</h2>\n<p>단어 그대로, 전송되는 도메인(내 사이트)으로부터 다른 도메인의 CSS, 이미지 등의 리소스를 요청하기 위해 <code class=\"highlighter-rouge\">cross-origin HTTP 요청</code>을 사용한다.</p>\n\n<p>이전에는 보안상의 이유로 브라우저들은 cross-origin HTTP 요청(AJAX)을 제한했다.  <code class=\"highlighter-rouge\">동일 출처 정책(Same Origin Policy)</code>을 두어 다른 도메인 서버에 요청하는 것을 차단하였다. 즉, 한 도메인끼리 HTTP 요청을 보내는 것만 가능했다. 이를 다른 말로 샌드박스(Sand Box)라고 하는데, 아이들이 다치지 않고 그 안에서만 놀수 있도록 만든 ‘모래 놀이통’에서 따온 말이다.</p>\n\n<p>AJAX는 자원 요청시 XMLHttpRequest를 통해서 처리하기 때문에 크로스 도메인 문제가 발생하면 아래와 같은 오류 메세지를 호출할 것이다.</p>\n\n<p class=\"quote\">\n\"교차 원본 요청 차단: 동일 출처 정책으로 인해 http://www.othersite.com 에 있는 원격 자원을 읽을 수 없습니다. 자원을 같은 도메인으로 이동시키거나 CORS를 활성화하여 해결할 수 있습니다.\"\n</p>\n\n<p>이를 개선시키기 위해 CORS가 등장한 것이다.</p>\n\n<p><img src=\"http://localhost:4000/assets/cors_ex.png\" alt=\"\" class=\"center-image\" /></p>\n\n<p>서버의 수정없이 클라이언트 측에서 이를 해결할 수 있으나 100% 해결은 불편한 부분이 다소 존재한다. 따라서 서버 측에서 크로스 도메일을 허용하여 문제를 해결하는 방법을 사용한다.</p>\n\n<p>CORS는 웹 페이지의 제한된 자원을 외부의 도메인에서의 요청을 허용해주는 메커니즘이다. 이는 브라우저와 서버간의 Cross-Origin HTTP 요청 혀용 여부를 안전하게 결정하도록 방법을 정의하여 <code class=\"highlighter-rouge\">Access-Control-Allow-</code>로 시작하는 HTTP 헤더를 쉽게 관리를 가능하도록 한다.</p>\n\n<p>크로스 도메인 요청을 허용할 웹 서버에서 허용하는 도메인을 별도로 지정해주면 된다.</p>\n\n<h3 id=\"장고에서-cors-적용하기\">장고에서 CORS 적용하기</h3>\n\n<p><strong>Step 1. 설치하기</strong></p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>&gt;&gt;&gt; pip install django-cors-headers\n</code></pre>\n</div>\n\n<p><strong>Step 2. 앱 등록하기</strong></p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">],</span>\n    <span class=\"s\">'corsheaders'</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p><strong>Step 3. 미들웨어 등록하기</strong></p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"n\">MIDDLEWARE_CLASSES</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"s\">'django.middleware.common.CommonMiddleware'</span><span class=\"p\">,</span>\n    <span class=\"s\">'corsheaders.middleware.CorsMiddleware'</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p><strong>Step 4. Credentials을 참으로 설정하기</strong></p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"n\">CORS_ALLOW_CREDENTIALS</span> <span class=\"o\">=</span> <span class=\"bp\">True</span>\n</code></pre>\n</div>\n\n<p><strong>Step 5. 허용할 Origin 설정하기</strong></p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"n\">CORS_ORIGIN_WHITELIST</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"s\">'www.mysite.com'</span><span class=\"p\">,</span>\n    <span class=\"s\">'www.othersite.com'</span><span class=\"p\">,</span>\n    <span class=\"s\">'www.etcsite.com'</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</code></pre>\n</div>\n"
    } ,
  
    {
      "title"    : "상속(Inheritance)",
      "category" : "컴퓨터 사이언스css",
      "tags"     : "OOP, 오버로딩, 오버라이딩",
      "url"      : "/%EC%BB%B4%ED%93%A8%ED%84%B0%20%EC%82%AC%EC%9D%B4%EC%96%B8%EC%8A%A4/css/2017/10/19/inheritance.html",
      "date"     : "2017-10-19 00:00:00 +0900",
      "content"   : "<p>상속은 자식 클래스가 부모 클래스의 모든 멤버와 메소드를 이어받는것을 의미한다. <br />\n하지만 상속은 아무때나 쓰면 안됀다. 언제 상속을 쓰고 언제 상속을 쓰면 안됄까?</p>\n\n<h2 id=\"is-a\">is-a</h2>\n\n<pre><code class=\"language-docker\">A laptop is a computer (O)\nA desktop is a computer (O)\nA laptop is a desktop (X)\n</code></pre>\n\n<p>노트북은 컴퓨터의 일종으로 컴퓨터가 가지고 있는 모든 속성을 가지고 있다. 데스크탑과 노트북은 많은 특성들을 공유하지만 공유하지 않는 부분도 존재하기 때문에 <strong>데스크탑을 노트북이라고 할 수 없다.</strong> <br />\n따라서 <strong>laptop은 desktop의 클래스를 상속받을 수 없다.</strong></p>\n\n<p>즉, 상속 여부를 판단하는 기준은 자식 클래스가 부모 클래스에 <code class=\"highlighter-rouge\">is a로 합당한가</code>를 고려하는 것이다.</p>\n\n<p>이 때, 공유되는 특성을 부모 클래스에 정의하고, 그렇지 않은 특성만 각자 클래스에 따로 정의한다.</p>\n\n<h2 id=\"오버로딩과-오버라이딩\">오버로딩과 오버라이딩</h2>\n<h3 id=\"오버로딩\">오버로딩</h3>\n<p>같은 공간 안에 같은 이름의 함수를 정의하는 것, 하지만 파이썬에서는 절대 오버로딩을 인정하지 않는다. 에러는 발생하지 않지만 나중에 선언한 하나의 메서드만 인정한다.</p>\n\n<blockquote>\n  <p>In Python you have to write a single constructor that catches all cases using default arguments <br />\nThe last method overwrites any previous method 마지막에 정의한 메소드가 그 전에 정의한 메소드를 모두 덮어버린다.</p>\n</blockquote>\n\n<h4 id=\"in-파이썬\">in 파이썬</h4>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">Computer</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">cpu</span><span class=\"p\">,</span> <span class=\"n\">ram</span><span class=\"p\">,</span> <span class=\"n\">hard_disk</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cpu</span> <span class=\"o\">=</span> <span class=\"n\">cpu</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ram</span> <span class=\"o\">=</span> <span class=\"n\">ram</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">hard_disk</span> <span class=\"o\">=</span> <span class=\"n\">hard_disk</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">calculate</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"overloading test\"</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"o\">+</span><span class=\"n\">b</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">calculate</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"p\">):</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"computer calculating\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">com</span> <span class=\"o\">=</span> <span class=\"n\">Computer</span><span class=\"p\">(</span><span class=\"s\">\"i7\"</span><span class=\"p\">,</span> <span class=\"s\">\"12GB\"</span><span class=\"p\">,</span> <span class=\"s\">\"1TB\"</span><span class=\"p\">)</span>\n<span class=\"n\">com</span><span class=\"o\">.</span><span class=\"n\">calculate</span><span class=\"p\">()</span>\n<span class=\"n\">com</span><span class=\"o\">.</span><span class=\"n\">calculate</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>[결과]</p>\n\n<p><img src=\"http://localhost:4000/assets/calc_python.png\" alt=\"\" class=\"center-image\" /></p>\n\n<p>하지만 C나 Java 등에서는 함수 이름이 같아도 반환형과 인자의 개수만 다르다면 함수를 몇 개든지 만들 수 있다.</p>\n\n<h4 id=\"in-자바\">in 자바</h4>\n\n<div class=\"language-java highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nc\">Computer</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">calculrate</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"computer calculating\"</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">calculrate</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"overloading test \"</span> <span class=\"o\">+</span> <span class=\"n\">result</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">OverLoading</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span> <span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">Computer</span> <span class=\"n\">com</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Conputer</span><span class=\"o\">();</span>\n        <span class=\"n\">com</span><span class=\"o\">.</span><span class=\"na\">calculrate</span><span class=\"o\">();</span>\n        <span class=\"n\">com</span><span class=\"o\">.</span><span class=\"na\">calculrate</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre>\n</div>\n\n<p>[결과]</p>\n\n<p><img src=\"http://localhost:4000/assets/calc_java.png\" alt=\"\" class=\"center-image\" /></p>\n\n<h3 id=\"오버라이딩\">오버라이딩</h3>\n<p>오버라이딩 같은 이름의 함수가 존재한다면 상속받는 함수보다는 현재 객체에서 정의하고 있는 함수의 우선 순위가 더 높다.</p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">Computer</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">cpu</span><span class=\"p\">,</span> <span class=\"n\">ram</span><span class=\"p\">,</span> <span class=\"n\">hard_disk</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cpu</span> <span class=\"o\">=</span> <span class=\"n\">cpu</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ram</span> <span class=\"o\">=</span> <span class=\"n\">ram</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">hard_disk</span> <span class=\"o\">=</span> <span class=\"n\">hard_disk</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">calculate</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"p\">):</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"computer calculating\"</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Laptop</span><span class=\"p\">(</span><span class=\"n\">Computer</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">cpu</span><span class=\"p\">,</span> <span class=\"n\">ram</span><span class=\"p\">,</span> <span class=\"n\">hard_disk</span><span class=\"p\">,</span> <span class=\"n\">touch_pad</span><span class=\"o\">=</span><span class=\"s\">\"normal\"</span><span class=\"p\">):</span>\n        <span class=\"n\">Computer</span><span class=\"o\">.</span><span class=\"n\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">cpu</span><span class=\"p\">,</span> <span class=\"n\">ram</span><span class=\"p\">,</span> <span class=\"n\">hard_disk</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">touch_pad</span> <span class=\"o\">=</span> <span class=\"n\">touch_pad</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">calculate</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"laptop calculating, a little bit slow\"</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<ul>\n  <li>Computer의 속성을 정의하지 않아도 상속받았기 때문에 calculator()가 존재한다.</li>\n  <li>하지만 Laptop은 노트북이므로 조금 느린 연산을 한다는 것을 표현하고자 재정의하였다.</li>\n</ul>\n\n<p>[결과]</p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>&gt;&gt;&gt; l1 = Laptop(\"i7\", \"12GB\", \"1TB\")\n&gt;&gt;&gt; l1.calculate()\nlaptop calculating, a little bit slow\n</code></pre>\n</div>\n\n<h2 id=\"has-a\">has-a</h2>\n<p>현재는 잘 쓰이지 않지만 옛날에는 이 조건에서도 상속을 사용했었음을 알아야 할 필요가 있다.</p>\n\n<pre><code class=\"language-docker\">A policeman has a gun\n</code></pre>\n\n<p>경찰관은 총을 가지고 있다, 총을 상속받으면 위 문장을 표현할 수 있다. 하지만 경찰관은 총을 가지고 있기도, 가지고 있지 않기도 하다는 것을 고려해야한다. 이럴 때 사용하는 것이 바로 <code class=\"highlighter-rouge\">객체 합성</code>이다.</p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">Gun</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">kind</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">kind</span> <span class=\"o\">=</span> <span class=\"n\">kind</span>\n\n    <span class=\"c\"># 총알이 나가는 것</span>\n    <span class=\"k\">def</span> <span class=\"nf\">bbangya</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"빵야~ 빵야~\"</span><span class=\"p\">)</span>\n\n<span class=\"c\"># 객체 합성(객체 속의 객체) != 상속</span>\n<span class=\"k\">class</span> <span class=\"nc\">Police</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">gun_kind</span><span class=\"o\">=</span><span class=\"s\">''</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">gun_kind</span><span class=\"p\">:</span>\n            <span class=\"c\"># 총(의 종류)을 가지고 있다면, 총 객체를 만들어서 인스턴스 멤버로 가짐.</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">gun</span> <span class=\"o\">=</span> <span class=\"n\">Gun</span><span class=\"p\">(</span><span class=\"n\">gun_kind</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"c\"># 총이라는 멤버 이름은 존재하지만 'None'으로 빈 값을 세팅, 나중에 총을 가질 여지가 있음.</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">gun</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\n\n        <span class=\"c\"># 총이 없는 경찰에게 총을 얻도록,</span>\n        <span class=\"c\"># 총을 가진 경찰에게 다른 종류의 총을 얻도록.    </span>\n        <span class=\"k\">def</span> <span class=\"nf\">get_gun</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">gun_kind</span>            \n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">gun</span> <span class=\"o\">=</span> <span class=\"n\">Gun</span><span class=\"p\">(</span><span class=\"n\">gun_kind</span><span class=\"p\">)</span>\n\n        <span class=\"c\"># 경찰관이 총을 겨누는 것</span>\n        <span class=\"k\">def</span> <span class=\"nf\">shoot</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">gun</span><span class=\"p\">:</span> <span class=\"c\"># 인스턴스 멤버로 해당 객체(Gun)를 가지고 있다면,</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">gun</span><span class=\"o\">.</span><span class=\"n\">bbangya</span><span class=\"p\">()</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"총을 소지하고 있지 않습니다.\"</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>[결과]</p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>&gt;&gt;&gt; p1 = Police(\"리볼버\")\n&gt;&gt;&gt; p1.shoot()\n빵야~ 빵야~\n\n&gt;&gt;&gt; p2 = Police()\n&gt;&gt;&gt; p2.shoot()\n총을 소지하고 있지 않습니다.\n\n&gt;&gt;&gt; p2.get_gun(\"기관총\")\n&gt;&gt;&gt; p2.shoot()\n빵야~ 빵야~\n</code></pre>\n</div>\n\n<p>위와 같이 객체를 핸들링하는 것을 <code class=\"highlighter-rouge\">객체 합성</code>이라고 하며 이럴 경우(has-a) 상속을 사용하는 것은 부적절하다.</p>\n"
    } ,
  
    {
      "title"    : "[22장] 테스트, 정말 거추장스럽고 낭비일까?",
      "category" : "두숟갈 스터디two-scoops",
      "tags"     : "Django, Django Template",
      "url"      : "/%EB%91%90%EC%88%9F%EA%B0%88%20%EC%8A%A4%ED%84%B0%EB%94%94/two-scoops/2017/10/15/python-test.html",
      "date"     : "2017-10-15 00:00:00 +0900",
      "content"   : "<p>충분한 테스트가 이루어지지 않는다면 직장, 돈 그리고 심하게는 생명까지도 한순간에 위험에 처할 수 있다. 오늘날 장고가 다양한 어플리케이션이 쓰이면서 자동화된 테스트에 대한 요구가 중요한 문제로 대두되었다.</p>\n\n<h2 id=\"221-어떻게-테스트를-구축할-것인가\">22.1 어떻게 테스트를 구축할 것인가</h2>\n<p>우선 해야할 일은 django-admin startapp 명령으로 기본 생성되었던 불필요한 test.py 모듈을 지우는 것이다.</p>\n\n<p>test_forms.py, test_models.py, test_views.py 모듈을 직접 새로 생성한다.\n다음과 같은 구조가 생성될 것이다.</p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>application/\n    __init__.py\n    admin.py\n    forms.py\n    models.py\n    test_forms.py\n    test_models.py\n    test_views.py\n    views.py\n</code></pre>\n</div>\n\n<p>물론 forms.py, models.py, views.py 외에 다른 종류의 파일들이 있다면 그에 해당하는 테스트 파일을 같은 방식으로 생성하자. 이는 ‘파이썬의 도’의 ‘수평적인 것이 중첩된 것보다 낫다(Flat is better than nested)’ 철학에 기반을 두고 구성한 것이다. 이렇게 구성하면 장고 앱을 훨씬 쉽게 살펴볼 수 있다.</p>\n\n<blockquote>\n  <p>테스트 모듈은 <code class=\"highlighter-rouge\">test_</code> 접두어를 붙여 생성하자 <br />\n그렇게 하지 않으면 장고의 테스트 러너가 해당 테스트 파일을 인지하지 못 한다.</p>\n</blockquote>\n\n<h2 id=\"222-단위-테스트-작성하기\">22.2 단위 테스트 작성하기</h2>\n<h3 id=\"2221-각-테스트-메서드는-테스트를-한-가지씩-수행해야-한다\">22.2.1 각 테스트 메서드는 테스트를 한 가지씩 수행해야 한다</h3>\n<ul>\n  <li>테스트 메서드는 그 테스트 범위가 좁아야 한다.</li>\n  <li>하나의 단위 테스트는 절대로 여러 개의 뷰나 모델 폼 또는 한 클래스 안의 여러 메서드에 대한 테스트를 수행해서는 안 된다.</li>\n  <li>하나의 테스트에서는 뷰, 모델, 폼 메서드가 작동하는 데 있어서 단 하나의 기능에 대한 정의, 즉 뷰면 뷰, 모델이면 모델 식으로 하나의 기능에 대해서만 테스트가 이루어져야 한다.</li>\n</ul>\n\n<p>하지만 뷰 하나만으로도 모델, 폼, 메서드 그리고 함수가 줄줄이 연관지어 호출되는데, 어떻게 뷰에 대한 테스트만을 딱 잘라서 하나의 테스트로 할 수 있단 말인가?</p>\n\n<p>이에 대한 방법은 특별한 테스트에 대한 환경을 완전히 최소한으로 구성하는 것이다.</p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"c\"># flavors/test_api.py</span>\n<span class=\"kn\">import</span> <span class=\"nn\">json</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">django.core.urlresolvers</span> <span class=\"kn\">import</span> <span class=\"n\">reverse</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.test</span> <span class=\"kn\">import</span> <span class=\"n\">TestCase</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">flavors.models.</span> <span class=\"kn\">import</span> <span class=\"n\">Flavor</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">FlavorAPITests</span><span class=\"p\">(</span><span class=\"n\">TestCase</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">setUp</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">Flavor</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get_or_create</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s\">\"A Title\"</span><span class=\"p\">,</span> <span class=\"n\">slug</span><span class=\"o\">=</span><span class=\"s\">\"a-slug\"</span><span class=\"p\">)</span>\n        \n    <span class=\"k\">def</span> <span class=\"nf\">test_list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"n\">reverse</span><span class=\"p\">(</span><span class=\"s\">\"flavor_object_api\"</span><span class=\"p\">)</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEquals</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">status_code</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">)</span>\n        <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">content</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEquals</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">),</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>아래 코드는 좀 더 확장된 예제이다.</p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"c\"># flavors/test_api.py</span>\n<span class=\"kn\">import</span> <span class=\"nn\">json</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">django.core.urlresolvers</span> <span class=\"kn\">import</span> <span class=\"n\">reverse</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.test</span> <span class=\"kn\">import</span> <span class=\"n\">TestCase</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">flavors.models.</span> <span class=\"kn\">import</span> <span class=\"n\">Flavor</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">DjangoRestFrameworkTests</span><span class=\"p\">(</span><span class=\"n\">TestCase</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">setUp</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">Flavor</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get_or_create</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s\">\"title1\"</span><span class=\"p\">,</span> <span class=\"n\">slug</span><span class=\"o\">=</span><span class=\"s\">\"slug1\"</span><span class=\"p\">)</span>\n        <span class=\"n\">Flavor</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get_or_create</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s\">\"title2\"</span><span class=\"p\">,</span> <span class=\"n\">slug</span><span class=\"o\">=</span><span class=\"s\">\"slug2\"</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">create_read_url</span> <span class=\"o\">=</span> <span class=\"n\">reverse</span><span class=\"p\">(</span><span class=\"s\">\"flavor_rest_api\"</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">read_update_delete_url</span> <span class=\"o\">=</span> \\\n            <span class=\"n\">reverse</span><span class=\"p\">(</span><span class=\"s\">\"flavor_rest_api\"</span><span class=\"p\">,</span> <span class=\"n\">kwargs</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s\">\"slug\"</span><span class=\"p\">:</span> <span class=\"s\">\"slug1\"</span><span class=\"p\">})</span>\n            \n    <span class=\"k\">def</span> <span class=\"nf\">test_list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">create_read_url</span><span class=\"p\">)</span>\n        <span class=\"c\"># 타이틀 둘 다 콘텐츠 안에 존재하는가?</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertContains</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"s\">\"title1\"</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertContains</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"s\">\"title2\"</span><span class=\"p\">)</span>\n        \n    <span class=\"k\">def</span> <span class=\"nf\">test_detail</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">read_update_delete_url</span><span class=\"p\">)</span>\n        <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">content</span><span class=\"p\">)</span>\n        <span class=\"n\">content</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s\">\"id\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s\">\"title\"</span><span class=\"p\">:</span> <span class=\"s\">\"title1\"</span><span class=\"p\">,</span> <span class=\"s\">\"slug\"</span><span class=\"p\">:</span> <span class=\"s\">\"slug1\"</span><span class=\"p\">,</span> <span class=\"s\">\"scoops_remaining\"</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">}</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEquals</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">content</span><span class=\"p\">)</span>\n        \n    <span class=\"k\">def</span> <span class=\"nf\">test_create</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">post</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s\">\"title\"</span><span class=\"p\">:</span> <span class=\"s\">\"title3\"</span><span class=\"p\">,</span> <span class=\"s\">\"slug\"</span><span class=\"p\">:</span> <span class=\"s\">\"slug3\"</span><span class=\"p\">}</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">crate_read_url</span><span class=\"p\">,</span> <span class=\"n\">post</span><span class=\"p\">)</span>\n        <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">content</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEquals</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">status_code</span><span class=\"p\">,</span> <span class=\"mi\">201</span><span class=\"p\">)</span>\n        <span class=\"n\">content</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s\">\"id\"</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s\">\"title\"</span><span class=\"p\">:</span> <span class=\"s\">\"title3\"</span><span class=\"p\">,</span> <span class=\"s\">\"slug\"</span><span class=\"p\">:</span> <span class=\"s\">\"slug3\"</span><span class=\"p\">,</span> <span class=\"s\">\"scoops_ramaining\"</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">}</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEquals</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">content</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assetEquals</span><span class=\"p\">(</span><span class=\"n\">Flavor</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">(),</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n    \n    <span class=\"k\">def</span> <span class=\"nf\">test_delete</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">read_update_delete_url</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEquals</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">status_code</span><span class=\"p\">,</span> <span class=\"mi\">204</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEquals</span><span class=\"p\">(</span><span class=\"n\">Falvor</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">(),</span> <span class=\"mi\">1</span><span class=\"p\">)</span>    \n</code></pre>\n</div>\n\n<h3 id=\"2222-뷰에-대해서는-가능하면-요청-팩터리를-이용하자\">22.2.2 뷰에 대해서는 가능하면 요청 팩터리를 이용하자</h3>\n<ul>\n  <li><a href=\"https://docs.djangoproject.com/en/1.8/topics/testing/advanced/#module-django.test.client\">django.test.client.RequestFactory</a>는 모든 뷰에 대해 해당 뷰의 첫 번째 인자로 이용할 수 있는 <code class=\"highlighter-rouge\">request</code> 인스턴스를 제공한다. 이는 일반 장고 테스트 클라이언트보다 독립된 환경을 제공한다.</li>\n  <li>RequestFactory는  get(), post(), put(), delete(), head(), options(), trace()와 같은 HTTP 메서드만 접근 가능하다.</li>\n  <li>하지만 생성된 요청이 세션과 인증을 포함한 미들웨어를 지원하지 않기 때문에 테스트를 작성할 때 추가적인 작업이 필요하다.</li>\n</ul>\n\n<p>테스트하고자 하는 뷰가 세션을 필요로 할 때는 다음과 같이 작성할 수 있다.</p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.contrib.auth.models</span> <span class=\"kn\">import</span> <span class=\"n\">AnonymousUser</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.contrib.sessions.middleware</span> <span class=\"kn\">import</span> <span class=\"n\">SessionMiddleware</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.test</span> <span class=\"kn\">import</span> <span class=\"n\">TestCase</span><span class=\"p\">,</span> <span class=\"n\">RequestFactory</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">.views</span> <span class=\"kn\">import</span> <span class=\"n\">cheese_flavors</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">add_middleware_to_request</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">middleware_class</span><span class=\"p\">):</span>\n    <span class=\"n\">middleware</span> <span class=\"o\">=</span> <span class=\"n\">middleware_class</span><span class=\"p\">()</span>\n    <span class=\"n\">middleware</span><span class=\"o\">.</span><span class=\"n\">process_request</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">request</span>\n    \n<span class=\"k\">def</span> <span class=\"nf\">add_middleware_to_response</span><span class=\"p\">(</span><span class=\"n\">reqeust</span><span class=\"p\">,</span> <span class=\"n\">middleware_class</span><span class=\"p\">):</span>\n    <span class=\"n\">middleware</span> <span class=\"o\">=</span> <span class=\"n\">middleware_class</span><span class=\"p\">()</span>\n    <span class=\"n\">middleware</span><span class=\"o\">.</span><span class=\"n\">process_request</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">request</span>\n    \n<span class=\"k\">class</span> <span class=\"nc\">SavoryIceCreamTest</span><span class=\"p\">(</span><span class=\"n\">TestCase</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">setUp</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c\"># 모든 테스트에서 이 요청 팩토리로 접근할 수 있어야 한다.</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">factory</span> <span class=\"o\">=</span> <span class=\"n\">RequestFactory</span><span class=\"p\">()</span>\n        \n    <span class=\"k\">def</span> <span class=\"nf\">test_cheese_flavors</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">'/cheesy/broccoli/'</span><span class=\"p\">)</span>\n        <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">AnonymousUser</span><span class=\"p\">()</span>\n        \n        <span class=\"c\"># 요청 객체에 세션을 가지고 표식을 달도록 한다.</span>\n        <span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"n\">add_middleware_to_request</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">SessionMiddleware</span><span class=\"p\">)</span>\n        \n        <span class=\"c\"># 요청에 대한 처리와 테스트를 진행한다.</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">cheese_flavors</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertContains</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"s\">\"bleah!\"</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<h3 id=\"2223-테스트가-필요한-테스트-코드는-작성하지-말자\">22.2.3 테스트가 필요한 테스트 코드는 작성하지 말자</h3>\n<p>테스트는 가능한 한 단순하게 작성해야한다. 테스트 케이스 안의 코드가 복잡하거나 추상적이라면 문제가 있는 것이다.</p>\n\n<h3 id=\"2224-같은-일을-반복하지-말라는-법칙은-테스트-케이스를-쓰는-데는-적용되지-않는다\">22.2.4 같은 일을 반복하지 말라는 법칙은 테스트 케이스를 쓰는 데는 적용되지 않는다</h3>\n<ul>\n  <li>setUp() 메서드는 테스트 클래스의 모든 테스트 메서드에 대해 재사용이 가능한 데이터를 만드는 데 큰 도움이 된다.</li>\n  <li>그러나 때론 비슷하지만 각 테스트 메서드에 대해 각기 다른 데이터가 필요하기도 하고 종종 이러한 이유로 기능이 화려한 테스트 유틸리티를 만드는 실수에 빠지기도 한다.</li>\n  <li>이러한 경우에 같거나 비슷한 코드를 여러 번 반복해서 쓰고 또 쓰는 것이 해법이다.</li>\n</ul>\n\n<h3 id=\"2225-픽스처를-너무-신뢰하지-말자\">22.2.5 픽스처를 너무 신뢰하지 말자</h3>\n<ul>\n  <li>프로젝트의 데이터가 바뀌어 감에 따라 픽스처 자체를 유지하기 어렵다. JSON 파일이 손상되었거나 데이터베이스를 제대로 반영하고 있지 않는 상태라면 JSON 파일의 로드 프로세스에서 매우 큰 어려움을 겪게 된다.</li>\n  <li>이럴 경우 픽스처 보다는 ORM에 의존하는 코드를 제작하는 편이 훨씬 쉬울 것이다. 서드 파티 패키지를 이용하는 것을 선호하는 사람도 있다.</li>\n</ul>\n\n<blockquote>\n  <p><strong>테스트 데이터를 생성해 주는 도구</strong> <br /></p>\n  <ul>\n    <li>factory boy: 모델 테스트 데이터 생성 <br /></li>\n    <li>model mommy: 모델 테스트 데이터 생성 <br /></li>\n    <li>mock: 장고뿐만 아니라 다른 환경에서도 이용 가능한 시스템의 일부를 대체할 수 있는 목(mock) 객체 생성</li>\n  </ul>\n</blockquote>\n\n<h3 id=\"2226-테스트해야-할-대상들\">22.2.6 테스트해야 할 대상들</h3>\n<p>물론 <code class=\"highlighter-rouge\">전부 다</code> 테스트해야 하는 대상이다. 다음을 포함해서 테스트 가능한 것은 모두 다 테스트해야 한다.</p>\n\n<ul>\n  <li><strong>뷰:</strong> 데이터 뷰, 데이터 변경 그리고 커스텀 클래스에 기반을 둔 뷰 메서드</li>\n  <li><strong>모델:</strong> 모델의 생성, 수정, 삭제 및 모델의 메서드와 모델 관리 메서드</li>\n  <li><strong>폼:</strong> 폼 메서드, clean() 메서드, 커스텀 필드</li>\n  <li><strong>유효성 검사기:</strong> 본인이 제작한 커스텀 유효성 검사기에 대해 다양한 테스트 케이스를 심도 깊게 작성하라.</li>\n  <li><strong>시그널:</strong> 시그널은 원격에서 작동하기에 테스트를 하지 않을 경우 문제를 야기하기 쉽다.</li>\n  <li><strong>필터:</strong> 필터들은 기본적으로 한 개 또는 두 개의 인자를 넘겨받는 함수이기 때문에 테스트를 제작하기에 그리 어렵지 않다.</li>\n  <li><strong>템플릿 태그:</strong> 템플릿 태그는 그 기능이 막강하고 또한 템플릿 콘텍스트를 허용하기 때문에 테스트 케이스를 작성하는 것이 까다롭다. 이는 즉 정말 테스트해야할 대상이라는 것이다.</li>\n  <li><strong>기타:</strong> 콘텍스트 프로세서, 미들웨어, 이메일, 그리고 이 목록에 포함되지 않은 모든 것</li>\n  <li><strong>실패:</strong> 만약 위의 경우 중 어느 하나라도 실패하면 어떻게 될까?</li>\n</ul>\n\n<p>프로젝트 내에서 테스트가 필요 없는 부분은 장고 코어 부분과 서드 파티 패키지에서 이미 테스트되어 있는 부분 정도일 것이다.</p>\n\n<h3 id=\"2227-테스트의-목적은-테스트의-실패를-찾는-데-있다\">22.2.7 테스트의 목적은 테스트의 실패를 찾는 데 있다</h3>\n<p>테스트 시나리오보다 이러한 예외적인 경우에 대한 테스트가 더욱 중요하다. 성공 시나리오에서의 실패는 사용자에게 불편을 야기하겠지만 바로 보고되는 사항들이다. 반면 실패 시나리오에서의 실패는 인지하지도 못하는 보안상의 문제점을 만들어내고, 이러한 문제들이 발견됐을 때는 이미 너무 늦은 경우가 허다하다.</p>\n\n<h3 id=\"2228-목mock을-이용하여-실제-데이터에-문제를-일으키지-않고-단위-테스트-하기\">22.2.8 목(Mock)을 이용하여 실제 데이터에 문제를 일으키지 않고 단위 테스트 하기</h3>\n<p>Mock 소셜 로그인이나 결제 시스템과 같은 외부 리소스 디펜던시가 있는 경우, 우리 서버가 아닌 다른 서버에서 작동하는 것을 테스트에 적용하기는 힘들다. 해당 테스트를 가짜로 적용해주는 것을 말한다.\n 단위 테스트는 단위 테스트 자체가 호출하는 함수나 메서드 이외의 것은 테스트하지 않도록 구성되어 있다. 이는 외부 API를 이용하는 기능들에 대해 단위 테스트를 작성하는 데 큰 난제로 나타나게 된다.</p>\n\n<ul>\n  <li>선택 1: 단위 테스트 자체를 통합 테스트(Intergration Test)로 변경한다.</li>\n  <li>선택 2: 목(Mock) 라이브러리를 이용하여 외부 API에 대한 가짜 응답을 만든다.</li>\n</ul>\n\n<p>목(Mock) 라이브러리는 우리가 테스트를 위한 특정 값들의 반환을 필요로 할 때 매우 빠르게 이용할 수 있는 몽키 패치(monkey_patch) 라이브러리를 제공한다.</p>\n\n<blockquote>\n  <p><strong>몽키 패치(Monkey Patch)란?</strong> <br />\n런타임 중인 프로그램 메모리의 소스 내용을 직접 바꾸는 것이다. 원래 게릴라 패치였는데 발음의 유사성으로 사람들이 고릴라 패치라고 쓰기 시작했다. 하지만 고릴라라고 하면 좀 위험하게 들리기 때문에 고릴라보다 덩치가 작은 원숭이 패치로 부르게 됐다고… <br /> \n일반적으로 개발자들 사이에서 몽키패치는 안티 패턴으로 인식된다.</p>\n</blockquote>\n\n<p>이는 우리가 외부 API에 대한 유효성을 테스트하는 것이 아닌 우리 코드의 로직에 대한 검사를 하게 되는 것이다.</p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">mock</span>\n<span class=\"kn\">import</span> <span class=\"nn\">unittest</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">icecreamapi</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">flavors.exceptions</span> <span class=\"kn\">import</span> <span class=\"n\">CantListFlavors</span>\n<span class=\"kn\">from</span> <span class=\"nn\">flavors.utils</span> <span class=\"kn\">import</span> <span class=\"n\">list_flavors_sorted</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">TestCreamSorting</span><span class=\"p\">(</span><span class=\"n\">unittest</span><span class=\"o\">.</span><span class=\"n\">TestCase</span><span class=\"p\">):</span>\n    <span class=\"c\"># icecreamapi.get_flavors() 몽키 패치 세팅</span>\n    <span class=\"nd\">@mock.patch.object</span><span class=\"p\">(</span><span class=\"n\">icecreamapi</span><span class=\"p\">,</span> <span class=\"s\">\"get_flavors\"</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">test_flavor_sort</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">get_flavors</span><span class=\"p\">):</span>\n        <span class=\"c\"># icecreamapi.get_flavors()가 정렬되어 있지 않은 리스트를 생성하도록 설정</span>\n        <span class=\"n\">get_flavors</span><span class=\"o\">.</span><span class=\"n\">return_value</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">'chocolate'</span><span class=\"p\">,</span> <span class=\"s\">'vanilla'</span><span class=\"p\">,</span> <span class=\"s\">'strawberry'</span><span class=\"p\">,</span> <span class=\"p\">]</span>\n        \n        <span class=\"c\"># list_flavors_sorted()가 icecreamapi.get_flavors() 함수 호출</span>\n        <span class=\"c\"># 몽키 패치를 했으므로 항상 반환되는 값은 ['chocolate', 'vanilla', 'strawberry', ]가 되며,</span>\n        <span class=\"c\"># 이는 list_flavors_sorted()에 의해 자동으로 정렬된다.</span>\n        <span class=\"n\">flavors</span> <span class=\"o\">=</span> <span class=\"n\">list_flavors_sorted</span><span class=\"p\">()</span>\n        \n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span>\n            <span class=\"n\">falvors</span><span class=\"p\">,</span>\n            <span class=\"p\">[</span><span class=\"s\">'chocolate'</span><span class=\"p\">,</span> <span class=\"s\">'strawberry'</span><span class=\"p\">,</span> <span class=\"s\">'vanilla'</span><span class=\"p\">,</span> <span class=\"p\">]</span>\n        <span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<h3 id=\"2229-좀-더-고급스러운-단언-메서드-사용하기\">22.2.9 좀 더 고급스러운 단언 메서드 사용하기</h3>\n<p>두 개의 리스트(또는 튜플)를 서로 비교하는 것은 흔히 보는 테스트 케이스다. 하지만 <code class=\"highlighter-rouge\">두 리스트가 서로 다른 정렬 형식</code>을 가지고 있다면 리스트를 매치하기 위해 <code class=\"highlighter-rouge\">재정렬</code>해야 한다.</p>\n\n<p>이럴 경우에 <strong>set.assertEqual(control_list, candidate_list)와 같이 사용하는 것이 옳은 것일까?</strong> <code class=\"highlighter-rouge\">unittest의 ListItemsEqual()</code>이라는 Assert Method를 알고 있다면 “아니다”라고 이야기할 것이다.</p>\n\n<h3 id=\"22210-각-테스트-목적을-문서화하라\">22.2.10 각 테스트 목적을 문서화하라</h3>\n<p>문서화되지 않은 코드 때문에 프로젝트 관리가 어려워지는 것처럼 문서화되지 않은 테스트 코드는 테스트를 불가능하게 할 수 있다. 디버그가 불가능한 문제를 해결하는 현명한 방법은 그 해당 문제에 관한 테스트를 문서화하는 것임을 명심하자.</p>\n\n<h2 id=\"223-통합-테스트integration-tests란\">22.3 통합 테스트(Integration Tests)란?</h2>\n<p>개별적인 소프트웨어 모듈이 하나의 그룹으로 조합되어 테스트되는 것을 의미하며, 단위 테스트가 끝난 후에 행하는 것이 가장 이상적이다.</p>\n\n<ul>\n  <li>어플리케이션이 브라우저에 잘 작동하는지 확인하는 셀레늄(Selenium) 테스트</li>\n  <li>서드 파티 API에 대한 가상 목(mock) 응답을 대신하는 실제 테스팅</li>\n  <li>외부로 나가는 요청에 대한 유효성 검사를 위해 requestbin이나 http://httpbin.org 등과 연동하는 경우</li>\n  <li>API가 기대하는 대로 잘 작동하는지 확인하기 위해 runscope.com을 이용하는 경우</li>\n</ul>\n\n<h3 id=\"통합-테스트의-문제점\">통합 테스트의 문제점</h3>\n<ul>\n  <li>시간이 많이 소요될 수 있으며 단위 테스트와 비교하면 테스트 속도가 느리다.</li>\n  <li>통합 테스트로부터 반환된 에러의 경우, 에러 이면에 숨어 있는 에러의 원인을 찾기가 단위 테스트보다 어렵다.</li>\n  <li>단위 테스트에 비해 많은 주의를 요구하여 작은 변경으로도 전반에 문제가 나타날 수 있다.</li>\n</ul>\n"
    } ,
  
    {
      "title"    : "select 태그의 selected 옵션 차등 부여하기",
      "category" : "JavaScriptjavascript",
      "tags"     : "JavaScript, selectedIndex",
      "url"      : "/javascript/2017/10/12/select-tag-default.html",
      "date"     : "2017-10-12 00:00:00 +0900",
      "content"   : "<blockquote>\n  <p><strong>배경</strong> : 책 카테고리에 대해서 select, option 태그 적용<br />\n<strong>이슈</strong> : 어떤 책이든지 상관없이 첫 번째 option의 value인 ‘언어’만 세팅된다.<br />\n<strong>하려는 일</strong> : 책 제목에 따라서 option의 value를 다르게 세팅<br />\n<strong>해결 방법</strong> : if문 분기 처리 + include() + <code class=\"highlighter-rouge\">selectedIndex</code> 활용</p>\n</blockquote>\n\n<p><img src=\"http://localhost:4000/assets/select1.png\" alt=\"\" class=\"center-image\" /></p>\n\n<h2 id=\"selectedindex-활용-예시\">selectedIndex 활용 예시</h2>\n\n<div class=\"language-javascript highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">title</span><span class=\"p\">.</span><span class=\"nx\">includes</span><span class=\"p\">(</span><span class=\"s1\">'운영체제'</span><span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"nx\">title</span><span class=\"p\">.</span><span class=\"nx\">includes</span><span class=\"p\">(</span><span class=\"s1\">'리눅스'</span><span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"nx\">title</span><span class=\"p\">.</span><span class=\"nx\">includes</span><span class=\"p\">(</span><span class=\"s1\">'OS'</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n      <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"s1\">'id_category'</span><span class=\"p\">).</span><span class=\"nx\">selectedIndex</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">title</span><span class=\"p\">.</span><span class=\"nx\">includes</span><span class=\"p\">(</span><span class=\"s1\">'알고리즘'</span><span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"nx\">title</span><span class=\"p\">.</span><span class=\"nx\">includes</span><span class=\"p\">(</span><span class=\"s1\">'자료구조'</span><span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"nx\">title</span><span class=\"p\">.</span><span class=\"nx\">includes</span><span class=\"p\">(</span><span class=\"s1\">'Algorithm'</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n      <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"s1\">'id_category'</span><span class=\"p\">).</span><span class=\"nx\">selectedIndex</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">title</span><span class=\"p\">.</span><span class=\"nx\">includes</span><span class=\"p\">(</span><span class=\"s1\">'네트워크'</span><span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"nx\">title</span><span class=\"p\">.</span><span class=\"nx\">includes</span><span class=\"p\">(</span><span class=\"s1\">'TCP'</span><span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"nx\">title</span><span class=\"p\">.</span><span class=\"nx\">includes</span><span class=\"p\">(</span><span class=\"s1\">'IP'</span><span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"nx\">title</span><span class=\"p\">.</span><span class=\"nx\">includes</span><span class=\"p\">(</span><span class=\"s1\">'프로토콜'</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n      <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"s1\">'id_category'</span><span class=\"p\">).</span><span class=\"nx\">selectedIndex</span> <span class=\"o\">=</span> <span class=\"mi\">3</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">title</span><span class=\"p\">.</span><span class=\"nx\">includes</span><span class=\"p\">(</span><span class=\"s1\">'데이터베이스'</span><span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"nx\">title</span><span class=\"p\">.</span><span class=\"nx\">includes</span><span class=\"p\">(</span><span class=\"s1\">'SQL'</span><span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"nx\">title</span><span class=\"p\">.</span><span class=\"nx\">includes</span><span class=\"p\">(</span><span class=\"s1\">'DB'</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n      <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"s1\">'id_category'</span><span class=\"p\">).</span><span class=\"nx\">selectedIndex</span> <span class=\"o\">=</span> <span class=\"mi\">4</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n</code></pre>\n</div>\n\n<ul>\n  <li><code class=\"highlighter-rouge\">title.include('...☆')</code> 책 제목에 ‘…☆’에 해당하는 문자열이 존재하면,</li>\n  <li>id가 id_category인 select 태그의 selected 옵션을 각각 해당하는 index에 맞게 부여한다.</li>\n</ul>\n\n<h4 id=\"결과\">결과</h4>\n\n<p><img src=\"http://localhost:4000/assets/select2.png\" alt=\"\" class=\"center-image\" /></p>\n"
    } ,
  
    {
      "title"    : "자바스크립트 정규표현식",
      "category" : "JavaScriptjavascript",
      "tags"     : "JavaScript, 정규표현식",
      "url"      : "/javascript/2017/10/12/javascript_regexp.html",
      "date"     : "2017-10-12 00:00:00 +0900",
      "content"   : "<ul>\n  <li>자바스크립트에서 정규표현식 패턴은 여는 <code class=\"highlighter-rouge\">/</code>와 닫는 <code class=\"highlighter-rouge\">/</code> 사이에 기술하면 된다.</li>\n  <li><strong>[주의]</strong> 정규표현식 패턴은 문자열이 아니기 때문에 작은따옴표나 큰따옴표를 사용하면 안된다.</li>\n</ul>\n\n<h3 id=\"정규표현식-특수-문자\">정규표현식 특수 문자</h3>\n<blockquote>\n  <p>예제에 사용할 문자 : <strong>“hellllo1234!”</strong></p>\n</blockquote>\n\n<table>\n  <thead>\n    <tr>\n      <th style=\"text-align: center\">문자</th>\n      <th style=\"text-align: center\">일치</th>\n      <th style=\"text-align: left\">예제</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td style=\"text-align: center\">^</td>\n      <td style=\"text-align: center\">입력한 값의 시작</td>\n      <td style=\"text-align: left\"><code class=\"highlighter-rouge\">/^hello/</code> “hello” 와 일치</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\">$</td>\n      <td style=\"text-align: center\">입력한 값의 끝</td>\n      <td style=\"text-align: left\"><code class=\"highlighter-rouge\">/lo$/</code> “lo” 와 일치</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\">*</td>\n      <td style=\"text-align: center\">0번 이상 반복</td>\n      <td style=\"text-align: left\"><code class=\"highlighter-rouge\">/el*/</code> “ellll”와 일치</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\">?</td>\n      <td style=\"text-align: center\">0번 또는 1번 반복</td>\n      <td style=\"text-align: left\"><code class=\"highlighter-rouge\">/el?/</code> “el” 와 일치</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\">+</td>\n      <td style=\"text-align: center\">1번 이상 반복</td>\n      <td style=\"text-align: left\"><code class=\"highlighter-rouge\">/el?/</code> “ellll” 와 일치</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\">{n}</td>\n      <td style=\"text-align: center\">정확한 횟수 n번 반복</td>\n      <td style=\"text-align: left\"><code class=\"highlighter-rouge\">/el{1}/</code> “el” 와 일치, <code class=\"highlighter-rouge\">/el{2}/</code> “ell” 와 일치</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\">{n,}</td>\n      <td style=\"text-align: center\">n번 이상 반복</td>\n      <td style=\"text-align: left\"><code class=\"highlighter-rouge\">/el{2}/</code> “ellll” 와 일치, “el” 와 불일치</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\">{n,m}</td>\n      <td style=\"text-align: center\">최소 n번, 최대 m번 반복</td>\n      <td style=\"text-align: left\"><code class=\"highlighter-rouge\">/el{2}/</code> “ellll” 와 일치, “el” 와 불일치</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\">\\b</td>\n      <td style=\"text-align: center\">단어 경계 값의 시작</td>\n      <td style=\"text-align: left\"><code class=\"highlighter-rouge\">/\\bhell/</code> “hell” 와 일치</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\">\\B</td>\n      <td style=\"text-align: center\">단어 경계를 제외한 모든 문자</td>\n      <td style=\"text-align: left\"><code class=\"highlighter-rouge\">/\\Bl/</code> “l” 와 일치, <code class=\"highlighter-rouge\">/\\Bh/</code>의 경우, 첫 경계 단어인 “h” 와 일치</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\">\\d</td>\n      <td style=\"text-align: center\">0부터 9까지의 숫자</td>\n      <td style=\"text-align: left\"><code class=\"highlighter-rouge\">/\\d{3}/</code> “123” 와 일치, default는 {2}</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\">\\D</td>\n      <td style=\"text-align: center\">숫자를 제외한 모든 문자</td>\n      <td style=\"text-align: left\"><code class=\"highlighter-rouge\">/\\D{3}/</code> “hel” 와 일치, default는 {2}</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\">\\w</td>\n      <td style=\"text-align: center\">단어 문자(숫자 포함)</td>\n      <td style=\"text-align: left\"><code class=\"highlighter-rouge\">/\\w{8}/</code> “hellllo1” 와 일치, default는 {2}</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\">\\W</td>\n      <td style=\"text-align: center\">단어 문자가 아닌 문자, 특수 문자</td>\n      <td style=\"text-align: left\"><code class=\"highlighter-rouge\">/\\W/</code> “!” 와 일치</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\">\\n</td>\n      <td style=\"text-align: center\">줄바꿈</td>\n      <td style=\"text-align: left\"> </td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\">\\s</td>\n      <td style=\"text-align: center\">하나의 공백 문자</td>\n      <td style=\"text-align: left\"> </td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\">\\S</td>\n      <td style=\"text-align: center\">공백 문자가 아닌 모든 문자</td>\n      <td style=\"text-align: left\"> </td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\">[…]</td>\n      <td style=\"text-align: center\">대괄호 안의 모든 문자</td>\n      <td style=\"text-align: left\"> </td>\n    </tr>\n  </tbody>\n</table>\n\n<h3 id=\"자바스크립트-정규표현식-활용-예시\">자바스크립트 정규표현식 활용 예시</h3>\n\n<p><img src=\"http://localhost:4000/assets/regexp1.png\" alt=\"\" class=\"center-image\" /> <br />\n<img src=\"http://localhost:4000/assets/regexp2.png\" alt=\"\" class=\"center-image\" /></p>\n\n<blockquote>\n  <p>배경 : 검색한 결과를 readonly 옵션이 있는 input 창에 세팅 <br />\n이슈 : 검색어에 해당하는 키워드에 <code class=\"highlighter-rouge\">b태그</code>가 삽입되어 있다. <br />\n하려는 일 : 세팅되는 b태그 제거 <br />\n해결 방법 : 자바스크립트 정규표현식 활용</p>\n</blockquote>\n\n<div class=\"language-javascript highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">obj</span> <span class=\"o\">=</span> <span class=\"nb\">eval</span><span class=\"p\">(</span><span class=\"s2\">\"(\"</span> <span class=\"o\">+</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'input:checkbox:checked'</span><span class=\"p\">).</span><span class=\"nx\">val</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"s2\">\")\"</span><span class=\"p\">);</span>\n<span class=\"kd\">var</span> <span class=\"nx\">title</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">obj</span><span class=\"p\">.</span><span class=\"nx\">title</span><span class=\"p\">).</span><span class=\"nx\">replace</span><span class=\"p\">(</span><span class=\"sr\">/</span><span class=\"se\">[</span><span class=\"sr\">&lt;</span><span class=\"se\">/</span><span class=\"sr\">b&gt;</span><span class=\"se\">]</span><span class=\"sr\">/g</span><span class=\"p\">,</span> <span class=\"s2\">\"\"</span><span class=\"p\">);</span>\n<span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"s1\">'title'</span><span class=\"p\">).</span><span class=\"nx\">value</span> <span class=\"o\">=</span> <span class=\"nx\">obj</span><span class=\"p\">.</span><span class=\"nx\">title</span><span class=\"p\">;</span>\n</code></pre>\n</div>\n\n<p><code class=\"highlighter-rouge\">/[&lt;/b&gt;]/g</code> : 대괄호 안의 &lt;, /, b, &gt; 에 해당하는 모든 문자, <code class=\"highlighter-rouge\">g</code>는 전역 검색을 의미. 즉, 첫 번째 일치 결과에서 멈추지 않고 전체 문자열에 대해 패턴을 검색하는 것을 의미한다.</p>\n\n<h4 id=\"결과\">결과</h4>\n\n<p><img src=\"http://localhost:4000/assets/regexp3.png\" alt=\"\" class=\"center-image\" /></p>\n\n"
    } ,
  
    {
      "title"    : "[데이터베이스] 이상과 함수적 종속",
      "category" : "데이터베이스database",
      "tags"     : "데이터베이스, 정규화, 이상(Anomaly), 함수적 종속",
      "url"      : "/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4/database/2017/10/08/anomaly-and-fucntional-dependency.html",
      "date"     : "2017-10-08 00:00:00 +0900",
      "content"   : "<h2 id=\"이상anomaly\">이상(Anomaly)</h2>\n<p>테이블에서 속성들의 <code class=\"highlighter-rouge\">종속</code>으로 인해 <code class=\"highlighter-rouge\">중복</code>이 발생하고, 이 <code class=\"highlighter-rouge\">중복</code>으로 인해 테이블 조작시 발생하는 문제</p>\n\n<blockquote>\n  <p><code class=\"highlighter-rouge\">수강</code> 테이블</p>\n</blockquote>\n\n<table>\n  <thead>\n    <tr>\n      <th style=\"text-align: center\">학번</th>\n      <th style=\"text-align: center\">과목번호</th>\n      <th style=\"text-align: center\">성적</th>\n      <th style=\"text-align: center\">학년</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td style=\"text-align: center\">100</td>\n      <td style=\"text-align: center\">C413</td>\n      <td style=\"text-align: center\">A</td>\n      <td style=\"text-align: center\">4</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\">100</td>\n      <td style=\"text-align: center\">E421</td>\n      <td style=\"text-align: center\">A</td>\n      <td style=\"text-align: center\">4</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\">200</td>\n      <td style=\"text-align: center\">C123</td>\n      <td style=\"text-align: center\">B</td>\n      <td style=\"text-align: center\">3</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\">300</td>\n      <td style=\"text-align: center\">C324</td>\n      <td style=\"text-align: center\">C</td>\n      <td style=\"text-align: center\">1</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\">400</td>\n      <td style=\"text-align: center\">C123</td>\n      <td style=\"text-align: center\">A</td>\n      <td style=\"text-align: center\">4</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\">400</td>\n      <td style=\"text-align: center\">C312</td>\n      <td style=\"text-align: center\">A</td>\n      <td style=\"text-align: center\">4</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\">400</td>\n      <td style=\"text-align: center\">C324</td>\n      <td style=\"text-align: center\">A</td>\n      <td style=\"text-align: center\">4</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\">400</td>\n      <td style=\"text-align: center\">C413</td>\n      <td style=\"text-align: center\">B</td>\n      <td style=\"text-align: center\">4</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\">500</td>\n      <td style=\"text-align: center\">C312</td>\n      <td style=\"text-align: center\">B</td>\n      <td style=\"text-align: center\">2</td>\n    </tr>\n  </tbody>\n</table>\n\n<h3 id=\"삽입이상insertion-anomaly\">삽입이상(Insertion Anomaly)</h3>\n<p>&lt;수강&gt; 테이블에서 한 학생이 여러 강의를 수강할 수 있으므로 학번만으로 <code class=\"highlighter-rouge\">기본키</code>를 지정할 수 없다. 따라서 <code class=\"highlighter-rouge\">학번</code> + <code class=\"highlighter-rouge\">과목번호</code>를 합쳐서 <code class=\"highlighter-rouge\">기본키</code>로 사용해야 한다. 이 때, 위 테이블에 어떤 학생이 ‘700’의 학번 정보와 ‘2’라는 학년 정보만으로 레코드를 삽입하려고 한다면 <strong>기본키인 과목번호 부재</strong>로 <strong>삽입할 수 없게 되는</strong> <code class=\"highlighter-rouge\">삽입 이상</code>이 발생하게 된다.</p>\n\n<h3 id=\"삭제-이상deletaion-anomaly\">삭제 이상(Deletaion Anomaly)</h3>\n<p>&lt;수강&gt; 테이블에서 학번이 ‘200’인 학생이 수강하려 했던 과목을 취소하기 위해 해당 레코드(Raw)를 삭제하면, 그 학생의 성적 및 학년 정보까지 삭제된다. 이와 같이 <code class=\"highlighter-rouge\">유지하고자 했던 정보까지 삭제</code>되어 <code class=\"highlighter-rouge\">정보 손실</code>이 발생하는, 연쇄 삭제 작용이 <code class=\"highlighter-rouge\">삭제 이상</code>이다</p>\n\n<h3 id=\"갱신-이상update-anomaly\">갱신 이상(Update Anomaly)</h3>\n<p>&lt;수강&gt; 테이블에서 학번이 ‘400’인 학생이 학년을 ‘4’에서 ‘3’으로 변경한다면, 해당 학생의 다른 레코드의 경우 ‘4’를 유지하고 있기 때문에 학년에 대한 2가지 값을 가지게 된다. 이로 인해 <code class=\"highlighter-rouge\">정보 불일치성</code>이 발생하게 되고, 이를 일컬어 <code class=\"highlighter-rouge\">갱신 이상</code>이라고 한다.</p>\n\n<p><br /><br /></p>\n\n<h2 id=\"함수적-종속\">함수적 종속</h2>\n<p>함수적 종속은 데이터의 의미를 표현하는 것으로, 데이터베이스에서 항상 유지되어야 할 조건이다.</p>\n\n<blockquote>\n  <p><code class=\"highlighter-rouge\">학생</code> 테이블</p>\n</blockquote>\n\n<table>\n  <thead>\n    <tr>\n      <th style=\"text-align: center\">학번</th>\n      <th style=\"text-align: center\">이름</th>\n      <th style=\"text-align: center\">학년</th>\n      <th style=\"text-align: center\">학과</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td style=\"text-align: center\">712</td>\n      <td style=\"text-align: center\">배찌</td>\n      <td style=\"text-align: center\">4</td>\n      <td style=\"text-align: center\">컴퓨터공학과</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\">714</td>\n      <td style=\"text-align: center\">다오</td>\n      <td style=\"text-align: center\">4</td>\n      <td style=\"text-align: center\">기계공학과</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\">725</td>\n      <td style=\"text-align: center\">에띠</td>\n      <td style=\"text-align: center\">3</td>\n      <td style=\"text-align: center\">컴퓨터공학과</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\">413</td>\n      <td style=\"text-align: center\">마리드</td>\n      <td style=\"text-align: center\">1</td>\n      <td style=\"text-align: center\">한문교육과</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\">243</td>\n      <td style=\"text-align: center\">우니</td>\n      <td style=\"text-align: center\">4</td>\n      <td style=\"text-align: center\">중어중문과</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\">254</td>\n      <td style=\"text-align: center\">디지니</td>\n      <td style=\"text-align: center\">3</td>\n      <td style=\"text-align: center\">기계공학과</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\">567</td>\n      <td style=\"text-align: center\">케피</td>\n      <td style=\"text-align: center\">2</td>\n      <td style=\"text-align: center\">사학과</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\">656</td>\n      <td style=\"text-align: center\">수</td>\n      <td style=\"text-align: center\">3</td>\n      <td style=\"text-align: center\">중어중문과</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\">190</td>\n      <td style=\"text-align: center\">모스</td>\n      <td style=\"text-align: center\">4</td>\n      <td style=\"text-align: center\">컴퓨터공학과</td>\n    </tr>\n  </tbody>\n</table>\n\n<ul>\n  <li><code class=\"highlighter-rouge\">학생</code> 테이블에서 기본키는 학번이다.</li>\n  <li>이름, 학년, 학과는 각각 학번에 함수적 종속이다.</li>\n  <li>이를 <code class=\"highlighter-rouge\">학번 ➔ 이름</code>, <code class=\"highlighter-rouge\">학번 ➔ 학년</code>,  <code class=\"highlighter-rouge\">학번 ➔ 학과</code> 혹은 <code class=\"highlighter-rouge\">학번 ➔ 이름, 학년, 학과</code>와 같이 기호로 표현할 수 있다.</li>\n  <li><code class=\"highlighter-rouge\">X ➔ Y</code>의 관계를 갖을 때, X를 <code class=\"highlighter-rouge\">결정자</code>, Y를 <code class=\"highlighter-rouge\">종속자</code>라고 한다.</li>\n</ul>\n\n<h2 id=\"함수적-종속-다이어그램\">함수적 종속 다이어그램</h2>\n\n<blockquote>\n  <p><code class=\"highlighter-rouge\">수강</code> 테이블</p>\n</blockquote>\n\n<table>\n  <thead>\n    <tr>\n      <th style=\"text-align: center\">학번</th>\n      <th style=\"text-align: center\">과목번호</th>\n      <th style=\"text-align: center\">성적</th>\n      <th style=\"text-align: center\">학년</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td style=\"text-align: center\">100</td>\n      <td style=\"text-align: center\">C413</td>\n      <td style=\"text-align: center\">A</td>\n      <td style=\"text-align: center\">4</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\">100</td>\n      <td style=\"text-align: center\">E421</td>\n      <td style=\"text-align: center\">A</td>\n      <td style=\"text-align: center\">4</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\">200</td>\n      <td style=\"text-align: center\">C123</td>\n      <td style=\"text-align: center\">B</td>\n      <td style=\"text-align: center\">3</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\">300</td>\n      <td style=\"text-align: center\">C324</td>\n      <td style=\"text-align: center\">C</td>\n      <td style=\"text-align: center\">1</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\">400</td>\n      <td style=\"text-align: center\">C123</td>\n      <td style=\"text-align: center\">A</td>\n      <td style=\"text-align: center\">4</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\">400</td>\n      <td style=\"text-align: center\">C312</td>\n      <td style=\"text-align: center\">A</td>\n      <td style=\"text-align: center\">4</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\">400</td>\n      <td style=\"text-align: center\">C324</td>\n      <td style=\"text-align: center\">A</td>\n      <td style=\"text-align: center\">4</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\">400</td>\n      <td style=\"text-align: center\">C413</td>\n      <td style=\"text-align: center\">B</td>\n      <td style=\"text-align: center\">4</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\">500</td>\n      <td style=\"text-align: center\">C312</td>\n      <td style=\"text-align: center\">B</td>\n      <td style=\"text-align: center\">2</td>\n    </tr>\n  </tbody>\n</table>\n\n<p><code class=\"highlighter-rouge\">수강</code> 테이블을 함수적 종속으로 표현하면,</p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>학번, 과목번호 ➔ 성적\n학번 ➔ 학년\n</code></pre>\n</div>\n\n<p>이를 함수적 종속 다이어그램으로 표현하면,</p>\n\n<p><img src=\"http://localhost:4000/assets/fd_diagram.png\" alt=\"\" class=\"center-image\" /></p>\n\n<ul>\n  <li><code class=\"highlighter-rouge\">성적</code>은 <code class=\"highlighter-rouge\">학번, 과목번호</code>에 <strong>완전 함수적 종속(Full Functional Dependency)</strong>, 완전 함수적 종속은 기본키에 완전히 종속적일 때를 일컫는다. 즉, 성적은 기본키인 학번과 과목번호 모두에 종속적이다.</li>\n  <li><code class=\"highlighter-rouge\">학년</code>은  <code class=\"highlighter-rouge\">학번, 과목번호</code>이 아닌, <code class=\"highlighter-rouge\">학번</code>에만 종속되므로 <strong>부분 함수적 종속(Partial Functional Dependency)</strong>, 학년은 과목번호에 상관없이 한 학번에 항상 같은 학년이 온다. 즉, 학년은 기본키의 일부인 학번에 부분 종속적이다.</li>\n</ul>\n"
    } ,
  
    {
      "title"    : "페이스북 로그인 플로우 직접 빌드 in Django",
      "category" : "Django ProjectUsed Book Store",
      "tags"     : "Django, Facebook Login",
      "url"      : "/django%20project/used%20book%20store/2017/10/02/facebook-login-of-django.html",
      "date"     : "2017-10-02 00:00:00 +0900",
      "content"   : "<blockquote>\n  <p>facebook for developers의 <a href=\"https://developers.facebook.com/docs/facebook-login/manually-build-a-login-flow\">Facebook 로그인 문서</a>를 참고하여 작성하였습니다. <br />\n틀린 내용이 있다면 언제든 문의주세요:D</p>\n</blockquote>\n\n<h3 id=\"로그인-대화-상자-호출-및-리다이렉션-url-설정하기\">로그인 대화 상자 호출 및 리다이렉션 URL 설정하기</h3>\n\n<div class=\"language-html highlighter-rouge\"><pre class=\"highlight\"><code>\n<span class=\"nt\">&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">\"https://www.facebook.com/v2.9/dialog/oauth?client_id={{ facebook_app_id }}&amp;redirect_uri={{ site_url }}{% url 'member:facebook_login' %}&amp;scope=email\"</span><span class=\"nt\">&gt;</span>페이스북 로그인<span class=\"nt\">&lt;/a&gt;</span>\n\n</code></pre>\n</div>\n\n<ul>\n  <li>페이스북 로그인을 클릭하면 페이스북 로그인 대화 상자가 호출되고, 인증 성공시 페이스북 로그인 뷰를 실행하게 된다.</li>\n  <li>엔드포인트 필수 매개변수로는 <code class=\"highlighter-rouge\">client_id</code>, <code class=\"highlighter-rouge\">redirect_uri</code>가 있다.</li>\n  <li><strong>client_id</strong>는 앱 등록후 발급받은 앱 ID이며, <strong>redirect_uri</strong>는 인증 성공후 장고 어플리케이션에서 회원가입 혹은 로그인을 하도록 리다이렉트 할 URL이다.</li>\n  <li>예를 들어 내 사이트의 경우, <strong>http://localhost:8000/member/login/facebook</strong>에서 페이스북 로그인 뷰를 실행하므로 이 주소가 <strong>redirect_uri</strong>가 된다.</li>\n  <li><code class=\"highlighter-rouge\"><span class=\"p\">{</span><span class=\"err\">{</span><span class=\"w\"> </span><span class=\"err\">facebook_app_id</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"err\">}</span></code>와 <code class=\"highlighter-rouge\"><span class=\"p\">{</span><span class=\"err\">{</span><span class=\"w\"> </span><span class=\"err\">site_url</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"err\">}</span></code>은 <code class=\"highlighter-rouge\">context_processor</code>에 별도로 지정해 놓은 장고 템플릿 태그이다.</li>\n</ul>\n\n<h4 id=\"내-프로젝트-디렉토리-구조페이스북-로그인-위주\">내 프로젝트 디렉토리 구조(페이스북 로그인 위주)</h4>\n\n<p><img src=\"http://localhost:4000/assets/facebook_login_project_structure.png\" alt=\"\" class=\"center-image\" /></p>\n\n<h3 id=\"id-확인\">ID 확인</h3>\n<p>액세스 토큰을 생성하기 전에 사용자가 응답 데이터가 있는 사용자인지 확인해야 한다. 선택적 매개변수인 <code class=\"highlighter-rouge\">response_type</code>에 따라 여러 다른 방식으로 ID 확인을 수행할 수 있다.</p>\n\n<ul>\n  <li><strong>code</strong> : 각 로그인 요청에 고유한 암호화된 문자열로, <code class=\"highlighter-rouge\">서버에서 토큰을 처리</code>할 때 유용하다. 코드가 수신되면 엔드포인트를 사용하여 액세스 토큰과 교환을 해야한다. 이 호출에서 <code class=\"highlighter-rouge\">앱 시크릿 코드</code>가 사용되므로 서버 간에 이루어져야 한다. (시크릿 코드는 클라이언트 코드에 있지 않아야 한다.)</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"n\">code</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">GET</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">'code'</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<h3 id=\"액세스-토큰과-코드의-교환\">액세스 토큰과 코드의 교환</h3>\n<p>액세스 토큰을 얻으려면 다음과 같이 엔드포인트에 HTTP GET 요청을 한다.</p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>GET https://graph.facebook.com/v2.10/oauth/access_token?\n   client_id={app-id}\n   &amp;redirect_uri={redirect-uri}\n   &amp;client_secret={app-secret}\n   &amp;code={code-parameter}\n</code></pre>\n</div>\n\n<p><br />\n<strong>[파이썬 in Django]</strong> <br />\nutils/apis/get_information.py <code class=\"highlighter-rouge\">get_facebook_access_token()</code></p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">get_facebook_access_token</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">code</span><span class=\"p\">):</span>\n    <span class=\"n\">exchange_access_token_url</span> <span class=\"o\">=</span> <span class=\"s\">'https://graph.facebook.com/v2.9/oauth/access_token'</span>\n    <span class=\"n\">redirect_uri</span> <span class=\"o\">=</span> <span class=\"s\">'{}{}'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n        <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">SITE_URL</span><span class=\"p\">,</span>\n        <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">exchange_access_token_url_params</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s\">'client_id'</span><span class=\"p\">:</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">FACEBOOK_APP_ID</span><span class=\"p\">,</span>\n        <span class=\"s\">'redirect_uri'</span><span class=\"p\">:</span> <span class=\"n\">redirect_uri</span><span class=\"p\">,</span>\n        <span class=\"s\">'client_secret'</span><span class=\"p\">:</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">FACEBOOK_SECRET_CODE</span><span class=\"p\">,</span>\n        <span class=\"s\">'code'</span><span class=\"p\">:</span> <span class=\"n\">code</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n    \n    <span class=\"c\"># requests를 사용하여 GET 요청</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span>\n        <span class=\"n\">exchange_access_token_url</span><span class=\"p\">,</span>\n        <span class=\"n\">params</span><span class=\"o\">=</span><span class=\"n\">exchange_access_token_url_params</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n    \n    <span class=\"c\"># 응답받은 데이터 json 형태로 변형</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">()</span>\n    \n    <span class=\"c\"># 응답받은 결과값에 'access_token'이라는 key가 존재하면,</span>\n    <span class=\"k\">if</span> <span class=\"s\">'access_token'</span> <span class=\"ow\">in</span> <span class=\"n\">result</span><span class=\"p\">:</span>\n        <span class=\"c\"># access_token key의 value를 반환</span>\n        <span class=\"k\">return</span> <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"s\">'access_token'</span><span class=\"p\">]</span>\n    <span class=\"k\">elif</span> <span class=\"s\">'error'</span> <span class=\"ow\">in</span> <span class=\"n\">result</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"nb\">Exception</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"nb\">Exception</span><span class=\"p\">(</span><span class=\"s\">'Unknown Error'</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<h3 id=\"액세스-토큰-검사하기\">액세스 토큰 검사하기</h3>\n<p>graph API 엔드포인트를 사용하여 액세스토큰의 검사를 수행할 수 있다.</p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>GET graph.facebook.com/debug_token?\n     input_token={token-to-inspect}\n     &amp;access_token={app-token-or-admin-token}\n</code></pre>\n</div>\n\n<ul>\n  <li><strong>input_token</strong> : 검사가 필요한 토큰</li>\n  <li><strong>access_token</strong> : 개발자의 액세스 토큰</li>\n</ul>\n\n<p><strong>[파이썬 in Django]</strong> <br />\nutils/apis/get_information <code class=\"highlighter-rouge\">facebook_debug_token()</code></p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">debug_token</span><span class=\"p\">(</span><span class=\"n\">input_token</span><span class=\"p\">):</span>\n    <span class=\"n\">access_token</span> <span class=\"o\">=</span> <span class=\"s\">'{}|{}'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n        <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">FACEBOOK_APP_ID</span><span class=\"p\">,</span>\n        <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">FACEBOOK_SECRET_CODE</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">debug_token_url</span> <span class=\"o\">=</span> <span class=\"s\">'https://graph.facebook.com/debug_token'</span>\n    <span class=\"n\">debug_token_url_params</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s\">'input_token'</span><span class=\"p\">:</span> <span class=\"n\">input_token</span><span class=\"p\">,</span>\n        <span class=\"s\">'access_token'</span><span class=\"p\">:</span> <span class=\"n\">access_token</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">debug_token_url</span><span class=\"p\">,</span> <span class=\"n\">debug_token_url_params</span><span class=\"p\">)</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">()</span>\n\n    <span class=\"k\">if</span> <span class=\"s\">'error'</span> <span class=\"ow\">in</span> <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"s\">'data'</span><span class=\"p\">]:</span>\n        <span class=\"k\">raise</span> <span class=\"n\">DebugTokenException</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n        \n    <span class=\"k\">return</span> <span class=\"n\">result</span>\n</code></pre>\n</div>\n\n<p>성공적인 응답을 받으면 다음과 같은 형태의 데이터를 가져올 것이다.</p>\n\n<div class=\"language-json highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"nt\">\"data\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n        </span><span class=\"nt\">\"app_id\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">138483919580948</span><span class=\"p\">,</span><span class=\"w\"> \n        </span><span class=\"nt\">\"application\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"봉자달봉중고서점\"</span><span class=\"p\">,</span><span class=\"w\"> \n        </span><span class=\"nt\">\"expires_at\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">1352419328</span><span class=\"p\">,</span><span class=\"w\"> \n        </span><span class=\"nt\">\"is_valid\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\"> \n        </span><span class=\"nt\">\"issued_at\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">1347235328</span><span class=\"p\">,</span><span class=\"w\"> \n        </span><span class=\"nt\">\"metadata\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n            </span><span class=\"nt\">\"sso\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"iphone-safari\"</span><span class=\"w\">\n        </span><span class=\"p\">},</span><span class=\"w\"> \n        </span><span class=\"nt\">\"scopes\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\">\n            </span><span class=\"s2\">\"email\"</span><span class=\"p\">,</span><span class=\"w\"> \n            </span><span class=\"s2\">\"publish_actions\"</span><span class=\"w\">\n        </span><span class=\"p\">],</span><span class=\"w\"> \n        </span><span class=\"nt\">\"user_id\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">1207059</span><span class=\"w\">\n    </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre>\n</div>\n\n<h3 id=\"사용자-정보-가져오기\">사용자 정보 가져오기</h3>\n<p>이렇게 얻은 <code class=\"highlighter-rouge\">access_token</code>과 <code class=\"highlighter-rouge\">user_id</code> 필드를 통해 사용자 정보를 가져올 수 있다.</p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>GET graph.facebook.com/v2.9/{user_id}?\n     access_token={access_token}\n     &amp;fields={가져오고자하는 필드, 'field1,field2,field3...'의 문자열 형태}\n</code></pre>\n</div>\n\n<p><br />\n<strong>[파이썬 in Django]</strong> <br />\nutils/apis/get_information <code class=\"highlighter-rouge\">facebook_get_user_info()</code></p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">facebook_get_user_info</span><span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"p\">,</span> <span class=\"n\">access_token</span><span class=\"p\">):</span>\n    <span class=\"n\">url_user_info</span> <span class=\"o\">=</span> <span class=\"s\">'https://graph.facebook.com/v2.9/{user_id}'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"o\">=</span><span class=\"n\">user_id</span><span class=\"p\">)</span>\n    <span class=\"n\">url_user_info_params</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s\">'access_token'</span><span class=\"p\">:</span> <span class=\"n\">access_token</span><span class=\"p\">,</span>\n        <span class=\"s\">'fields'</span><span class=\"p\">:</span> <span class=\"s\">','</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">([</span>\n            <span class=\"s\">'id'</span><span class=\"p\">,</span>\n            <span class=\"s\">'email'</span><span class=\"p\">,</span>\n            <span class=\"s\">'picture'</span><span class=\"p\">,</span>\n        <span class=\"p\">])</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">url_user_info</span><span class=\"p\">,</span> <span class=\"n\">params</span><span class=\"o\">=</span><span class=\"n\">url_user_info_params</span><span class=\"p\">)</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">()</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">result</span>\n</code></pre>\n</div>\n\n<p><br /><br /></p>\n\n<h2 id=\"페이스북-로그인-실행하기\">페이스북 로그인 실행하기</h2>\n\n<h3 id=\"페이스북-전용-유저-매니저\">페이스북 전용 유저 매니저</h3>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">MyUserManager</span><span class=\"p\">(</span><span class=\"n\">DefaultUserManager</span><span class=\"p\">):</span>\n\t<span class=\"k\">def</span> <span class=\"nf\">get_or_create_facebook_user</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">user_info</span><span class=\"p\">):</span>\n\t\t<span class=\"n\">username</span> <span class=\"o\">=</span> <span class=\"n\">user_info</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">'email'</span><span class=\"p\">,</span> <span class=\"s\">''</span><span class=\"p\">)</span>\n\t\t<span class=\"n\">my_photo</span> <span class=\"o\">=</span> <span class=\"n\">user_info</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">'picture'</span><span class=\"p\">,</span> <span class=\"s\">''</span><span class=\"p\">)</span>\n\t\t<span class=\"n\">nickname</span> <span class=\"o\">=</span> <span class=\"s\">'{}_{}'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n\t\t\t<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">USER_TYPE_FACEBOOK</span><span class=\"p\">,</span>\n\t\t\t<span class=\"n\">user_info</span><span class=\"p\">[</span><span class=\"s\">'id'</span><span class=\"p\">]</span>\n\t\t<span class=\"p\">)</span>\n\t\n\t<span class=\"n\">user</span><span class=\"p\">,</span> <span class=\"n\">user_created</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_or_create</span><span class=\"p\">(</span>\n\t\t<span class=\"n\">username</span><span class=\"o\">=</span><span class=\"n\">username</span><span class=\"p\">,</span>\n\t\t<span class=\"n\">user_type</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">USER_TYPE_FACEBOOK</span><span class=\"p\">,</span>\n\t\t<span class=\"n\">my_photo</span><span class=\"o\">=</span><span class=\"n\">my_photo</span><span class=\"p\">[</span><span class=\"s\">'data'</span><span class=\"p\">][</span><span class=\"s\">'url'</span><span class=\"p\">],</span>\n\t\t<span class=\"n\">nickname</span><span class=\"o\">=</span><span class=\"n\">nickname</span><span class=\"p\">,</span>\n\t<span class=\"p\">)</span>\n\t\n\t<span class=\"k\">return</span> <span class=\"n\">user</span>\n</code></pre>\n</div>\n\n<h3 id=\"페이스북-로그인-뷰\">페이스북 로그인 뷰</h3>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">facebook_login</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"n\">code</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">GET</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">'code'</span><span class=\"p\">)</span>\n\n    <span class=\"c\"># code가 없으면 에러 메세지를 request에 추가하고 이전 페이지로 redirect</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">code</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">error_message_and_redirect_referer</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">access_token</span> <span class=\"o\">=</span> <span class=\"n\">get_facebook_access_token</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">code</span><span class=\"p\">)</span>\n        <span class=\"n\">debug_result</span> <span class=\"o\">=</span> <span class=\"n\">facebook_debug_token</span><span class=\"p\">(</span><span class=\"n\">access_token</span><span class=\"p\">)</span>\n        <span class=\"n\">user_info</span> <span class=\"o\">=</span> <span class=\"n\">facebook_get_user_info</span><span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"o\">=</span><span class=\"n\">debug_result</span><span class=\"p\">[</span><span class=\"s\">'data'</span><span class=\"p\">][</span><span class=\"s\">'user_id'</span><span class=\"p\">],</span> <span class=\"n\">access_token</span><span class=\"o\">=</span><span class=\"n\">access_token</span><span class=\"p\">)</span>\n        <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">MyUser</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get_or_create_facebook_user</span><span class=\"p\">(</span><span class=\"n\">user_info</span><span class=\"p\">)</span>\n\n        <span class=\"n\">django_login</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">user</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">redirect</span><span class=\"p\">(</span><span class=\"s\">'book:main'</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"n\">GetAccessTokenException</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">code</span><span class=\"p\">)</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">message</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">error_message_and_redirect_referer</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"n\">DebugTokenException</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">code</span><span class=\"p\">)</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">message</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">error_message_and_redirect_referer</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p><a href=\"\">» 카카오 로그인</a></p>\n\n<p><br /></p>\n"
    } ,
  
    {
      "title"    : "[14장] 템플릿 태그와 필터",
      "category" : "두숟갈 스터디two-scoops",
      "tags"     : "Django, Django Template",
      "url"      : "/%EB%91%90%EC%88%9F%EA%B0%88%20%EC%8A%A4%ED%84%B0%EB%94%94/two-scoops/2017/09/21/ch14-template-tag-filter.html",
      "date"     : "2017-09-21 00:00:00 +0900",
      "content"   : "<p>장고 템플릿은 단순히 장고 템플릿 언어를 사용하여 마크업된 <code class=\"highlighter-rouge\">파이썬 문자열</code>이다. 장고는 수십 가지 기본 템플릿 <a href=\"https://docs.djangoproject.com/en/1.11/topics/templates/#tags\">태그</a>와 <a href=\"https://docs.djangoproject.com/en/1.11/topics/templates/#filters\">필터</a>를 제공한다.</p>\n\n<p>템플릿 태그는 <code class=\"highlighter-rouge\"><span class=\"p\">{</span><span class=\"err\">%</span></code> 와 <code class=\"highlighter-rouge\">%}</code>로 둘러쌓인다.</p>\n\n<div class=\"language-html highlighter-rouge\"><pre class=\"highlight\"><code>\n{% if user.is_authenticated %}\n\tHello, {{ user.username }}.\n{% endif %}\n\n</code></pre>\n</div>\n\n<p>필터는 변수 및 태그 인수의 값을 변환한다.</p>\n\n<div class=\"language-html highlighter-rouge\"><pre class=\"highlight\"><code>\n{{ django|title }}\n\n</code></pre>\n</div>\n\n<p><strong>템플릿 태그를 커스텀할 경우 참고할 만한 최고의 방법론</strong></p>\n\n<ul>\n  <li>모든 기본 템플릿과 태그의 이름은 명확하고 직관적이어야 한다.</li>\n  <li>모든 기본 템플릿과 태그는 각각 한 가지 목적만을 수행한다.</li>\n  <li>기본 템플릿과 태그는 영속 데이터(데이터베이스의 데이터)에 변형을 가하지 않는다.</li>\n</ul>\n\n<h2 id=\"1-필터\">1. 필터</h2>\n<h3 id=\"1-1-필터는-함수다\">1-1. 필터는 함수다.</h3>\n<p>필터는 <code class=\"highlighter-rouge\">장고 템플릿 안</code>에서 <code class=\"highlighter-rouge\">파이썬을 이용</code>할 수 있게 해주는 <code class=\"highlighter-rouge\">데코레이터를 가진 함수</code>일 뿐이다. 즉, 필터는 일반 함수들처럼 호출될 수 있다는 의미이기도 하다.</p>\n\n<h3 id=\"1-2-필터의-재사용\">1-2. 필터의 재사용</h3>\n<p>하지만 대부분의 장고 템플릿 필터 로직은 다른 라이브러리를 상속했기 때문에 장고 템플릿 필터의 코드를 재사용하기 보다는 상속했던 라이브러리를 바로 임포트하여 사용하는 것을 권장한다.</p>\n\n<p>즉 예를 들어 <code class=\"highlighter-rouge\">django.template.defaultfilters.slugify</code>를 임포트할 필요 없이 <code class=\"highlighter-rouge\">django.utils.text.slugify</code>를 바로 임포트하여 사용하면 된다.</p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"c\"># /template/defaultfilters.py</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.text</span> <span class=\"kn\">import</span> <span class=\"n\">slugify</span> <span class=\"k\">as</span> <span class=\"n\">_slugify</span>\n\n<span class=\"nd\">@register.filter</span><span class=\"p\">(</span><span class=\"n\">is_safe</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n<span class=\"nd\">@stringfilter</span>\n<span class=\"k\">def</span> <span class=\"nf\">slugify</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">_slugify</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"c\"># /utils/text.py</span>\n\n<span class=\"nd\">@keep_lazy</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">SafeText</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">slugify</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">allow_unicode</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">):</span>\n    <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">allow_unicode</span><span class=\"p\">:</span>\n        <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">unicodedata</span><span class=\"o\">.</span><span class=\"n\">normalize</span><span class=\"p\">(</span><span class=\"s\">'NFKC'</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">unicodedata</span><span class=\"o\">.</span><span class=\"n\">normalize</span><span class=\"p\">(</span><span class=\"s\">'NFKD'</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"s\">'ascii'</span><span class=\"p\">,</span> <span class=\"s\">'ignore'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"s\">'ascii'</span><span class=\"p\">)</span>\n    <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">(</span><span class=\"s\">r'[^</span><span class=\"err\">\\</span><span class=\"s\">w</span><span class=\"err\">\\</span><span class=\"s\">s-]'</span><span class=\"p\">,</span> <span class=\"s\">''</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span>\n    <span class=\"k\">return</span> <span class=\"n\">mark_safe</span><span class=\"p\">(</span><span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">(</span><span class=\"s\">r'[-</span><span class=\"err\">\\</span><span class=\"s\">s]+'</span><span class=\"p\">,</span> <span class=\"s\">'-'</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<blockquote>\n  <p>필터 자체를 임포트하면 코드에서 추상화된 레벨이 하나 더해지므로 훗날 디버깅이 필요할 때 약간 복잡해질 우려도 있다.</p>\n</blockquote>\n\n<h3 id=\"1-3-그렇다면-필터를-언제-사용해야하는가\">1-3. 그렇다면 필터를 언제 사용해야하는가?</h3>\n<ul>\n  <li>필터는 데이터의 외형을 수정하는 데 매우 유용하다. 따라서 REST API 혹은 다른 출력 포맷에서 손쉽게 재사용할 수 있다.</li>\n  <li>예를 들어, 장고 템플릿을 사용하는 프론트 엔드와 REST API 백엔드가 분리되어 존재한다면, 양쪽에 같은 값을 가공해서 보내고 템플릿 필터로 정의된 함수를 양쪽에서 사용할 경우, 같은 결과를 장고 템플릿 뷰와 REST API Response에서 호출할 수 있다.</li>\n  <li>하지만 두 개의 인자만을 받을 수 있는 기능적 제약 때문에 필터를 복잡하게 응용하기는 매우 어렵다.</li>\n</ul>\n\n<h2 id=\"2-템플릿-태그\">2. 템플릿 태그</h2>\n<h3 id=\"2-1-템플릿-태그들은-디버깅하기가-쉽지-않다\">2-1. 템플릿 태그들은 디버깅하기가 쉽지 않다.</h3>\n<p>복잡한 템플릿 태그들은 디버깅하기 까다롭다. 이 경우 로그와 테스트를 통해 도움을 받을 수 있다.</p>\n\n<h3 id=\"2-2-템플릿-태그는-재사용하기가-어렵다\">2-2. 템플릿 태그는 재사용하기가 어렵다.</h3>\n<p>출력 포맷은 동일 템플릿 태그를 이용하여 처리하기란 쉽지 않은 일이다. 여러 종류의 포맷이 필요하다면 다른 뷰에서도 쉽게 접근할 수 있도록 템플릿 태그 안의 모든 로직을 utils.py로 옮기는 것을 고려해보자.</p>\n\n<h3 id=\"2-3-템플릿-태그의-성능\">2-3. 템플릿 태그의 성능</h3>\n<ul>\n  <li>템플릿 태그 안에 또 다른 템플릿을 로드할 경우 심각한 성능 문제를 야기할 수 있다. 따라서 장고에서 어떻게 템플릿이 로드되는지에 대한 깊은 이해가 필요하다.</li>\n  <li>커스텀 템플릿 태그가 많은 템플릿을 로드한다면, <a href=\"https://docs.djangoproject.com/en/1.8/ref/templates/api/#django.template.loaders.cached.Loader\">로드된 템플릿을 캐시하는 방법</a>을 고려할 수 있다.</li>\n</ul>\n\n<h3 id=\"2-4-언제-템플릿-태그를-사용할-것인가\">2-4. 언제 템플릿 태그를 사용할 것인가</h3>\n<p>HTML을 렌더링하는 작업이 필요할 때 사용할 것을 권장한다.</p>\n\n<h3 id=\"2-5-템플릿-태그-라이브러리-이름-짓기와-템플릿-태그-모듈-로드하기\">2-5. 템플릿 태그 라이브러리 이름 짓기와 템플릿 태그 모듈 로드하기</h3>\n<p><a href=\"https://docs.djangoproject.com/en/1.11/howto/custom-template-tags/\">커스텀 템플릿</a> 언어로 표현하고자 하는 것은 아래 그림과 같다.<br /><br /></p>\n\n<p><img src=\"http://localhost:4000/assets/custom_template.png\" alt=\"\" class=\"center-image\" /> <br /></p>\n\n<p>배찌라는 닉네임 뒤 괄호 안 username 일부를 가리고, ‘*’ 문자로 표현하기와 데이터베이스에 IntegerField로 등록되는  별점 데이터를 별 이모티콘으로 표현하기이다.</p>\n\n<hr />\n\n<p><strong>[django 1.8 버전]</strong></p>\n\n<p>템플릿 태그 라이브러리 작명 관례는 <code class=\"highlighter-rouge\">&lt;app_name&gt;_tags.py</code>다.</p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"c\"># django_app/book/book_tags.py</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">django</span> <span class=\"kn\">import</span> <span class=\"n\">template</span>\n\n<span class=\"n\">register</span> <span class=\"o\">=</span> <span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">Library</span><span class=\"p\">()</span>\n\n\n<span class=\"nd\">@register.filter</span>\n<span class=\"k\">def</span> <span class=\"nf\">change_star_score</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"s\">\"⭐\"</span> <span class=\"o\">*</span> <span class=\"n\">value</span>\n\n\n<span class=\"nd\">@register.filter</span>\n<span class=\"k\">def</span> <span class=\"nf\">hide_username</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">:],</span> <span class=\"s\">\"*****\"</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>settings에 해당 템플릿 태그를 사용할 것임을 선언해야 한다.</p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"c\"># django_app/config/settings.py</span>\n\n<span class=\"n\">TEMPLATES</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n        <span class=\"s\">'BACKEND'</span><span class=\"p\">:</span> <span class=\"s\">'django.template.backends.django.DjangoTemplates'</span><span class=\"p\">,</span>\n        <span class=\"s\">'DIRS'</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"n\">TEMPLATE_DIR</span><span class=\"p\">,</span>\n        <span class=\"p\">],</span>\n        <span class=\"s\">'APP_DIRS'</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">,</span>\n        <span class=\"s\">'OPTIONS'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s\">'libraries'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                <span class=\"s\">'book_tags'</span><span class=\"p\">:</span> <span class=\"s\">'book.book_tags'</span><span class=\"p\">,</span>\n            <span class=\"p\">},</span>\n        <span class=\"p\">},</span>\n    <span class=\"p\">},</span>\n<span class=\"p\">]</span>\n</code></pre>\n</div>\n\n<p>HTML에서 사용하기</p>\n\n<div class=\"language-html highlighter-rouge\"><pre class=\"highlight\"><code>\n{% extends 'common/base.html' %}\n\n{% load book_tags %}\n\n{% block content %}\n<span class=\"nt\">&lt;section</span> <span class=\"na\">class=</span><span class=\"s\">\"comment\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;p</span> <span class=\"na\">class=</span><span class=\"s\">\"comment-list\"</span><span class=\"nt\">&gt;</span>댓글 목록<span class=\"nt\">&lt;/p&gt;</span>\n  <span class=\"nt\">&lt;article</span> <span class=\"na\">class=</span><span class=\"s\">\"comment-content\"</span><span class=\"nt\">&gt;</span>\n      {% if comments %}\n        {% for comment in comments %}\n        <span class=\"nt\">&lt;ul&gt;</span>\n          <span class=\"nt\">&lt;li&gt;</span>\n            <span class=\"nt\">&lt;b&gt;</span>{{ comment.user.nickname }}({{ comment.user.username|hide_username }})<span class=\"nt\">&lt;/b&gt;</span>\n            <span class=\"nt\">&lt;span</span> <span class=\"na\">class=</span><span class=\"s\">\"date\"</span><span class=\"nt\">&gt;</span>{{ comment.created }}<span class=\"nt\">&lt;/span&gt;</span>\n            {{ comment.star_score|change_star_score }}\n          <span class=\"nt\">&lt;/li&gt;</span>\n          <span class=\"nt\">&lt;li&gt;</span>\n            {{ comment.content|safe }}\n          <span class=\"nt\">&lt;/li&gt;</span>\n        <span class=\"nt\">&lt;/ul&gt;</span>\n        {% endfor %}\n      {% else %}\n        작성된 댓글이 없습니다ʘ̥_ʘ\n      {% endif %}\n  <span class=\"nt\">&lt;/article&gt;</span>\n<span class=\"nt\">&lt;/section&gt;</span>\n{% endblock %}\n\n</code></pre>\n</div>\n\n<hr />\n\n<p><strong>[django 1.10 버전]</strong></p>\n\n<p>파이썬 파일을 만들고 settings에 별도로 선언하는 이전 버전과 달리 사용하려는 앱에 <code class=\"highlighter-rouge\">templatetags</code>라는 이름의 파이썬 패키지를 생성하고 파일을 작성하면, 장고 자체에서 자동으로 인식하여 해당 템플릿 태그를 사용할 수 있도록 한다.</p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"c\"># django_app/book/templatetags/comment.py</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">django</span> <span class=\"kn\">import</span> <span class=\"n\">template</span>\n\n<span class=\"n\">register</span> <span class=\"o\">=</span> <span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">Library</span><span class=\"p\">()</span>\n\n\n<span class=\"nd\">@register.filter</span>\n<span class=\"k\">def</span> <span class=\"nf\">change_star_score</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"s\">\"⭐\"</span> <span class=\"o\">*</span> <span class=\"n\">value</span>\n\n\n<span class=\"nd\">@register.filter</span>\n<span class=\"k\">def</span> <span class=\"nf\">hide_username</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">:],</span> <span class=\"s\">\"*****\"</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>HTML에서 사용하기</p>\n\n<div class=\"language-html highlighter-rouge\"><pre class=\"highlight\"><code>\n{% extends 'common/base.html' %}\n\n{% load comment %}\n\n#...[위 코드와 동일]\n\n</code></pre>\n</div>\n\n<h2 id=\"마치며\">마치며…</h2>\n<p>지금 시중에 번역되어 있는 책은 장고 1.8 버전이다. 그렇기 때문에 최신 버전의 장고에 적용하는 면에 있어서 적합하지 않는 부분이 많은 것 같다.</p>\n"
    } ,
  
    {
      "title"    : "[11장] 장고 폼의 기초",
      "category" : "두숟갈 스터디two-scoops",
      "tags"     : "Django, Django Form",
      "url"      : "/%EB%91%90%EC%88%9F%EA%B0%88%20%EC%8A%A4%ED%84%B0%EB%94%94/two-scoops/2017/09/20/ch11-django-form.html",
      "date"     : "2017-09-20 00:00:00 +0900",
      "content"   : "<h2 id=\"장고-폼을-이용하여-입력-데이터에-대한-유효성-검사하기\">장고 폼을 이용하여 입력 데이터에 대한 유효성 검사하기</h2>\n<p>장고 폼은 파이썬 딕셔너리의 <strong>유효성을 검사</strong> (딕셔너리 안에 해당 key와 value 여부, input 조건등 검사)에 최상의 도구이다.</p>\n\n<pre><code class=\"language-docker\">유효성 검사는 3단계의 메서드 실행으로 이뤄지는데, form 객체를 is_valid()할 때 검사가 실행된다.\n\n[1단계] to_python()\n\t- 유효성 검사의 첫 번째 단계로서, 값을 올바른 데이터 유형으로 강제 변환하고, 가능하지 않을 경우 \tValidationError를 발생시킨다. 즉 FloatField일 경우, 데이터를 Python float 타입으로 강제 \t변환시킨다.\n\n[2단계] validate()\n\t-  올바른 데이터 유형으로 변환된 값을 유효성 검사기에 적합한지 검사한다. 리턴되는 값은 없다.\n\n[3단계] run_validators()\n\t- 위 단계를 거친 후, 유효성 검사기를 통해 잘못 입력된 값에 대하여 ValidationError를 일으킨다.\n\nclean()은 위 3단계를 올바른 순서로 실행하고 오류를 전파한다. 유효성 검사를 통과한 깨끗한 데이터를 반환한 다음 폼의 cleaned_data 사전에 삽입한다.\n</code></pre>\n\n<p>뷰 단에서 유효성 검사 코드를 추가할 수 있지만, 매번 데이터가 바뀔 때마다 복잡한 유효성 검사 코드를 필요에 맞게 유지 관리하는 것은 매우 번거로운 일이다.</p>\n\n<h3 id=\"html-폼에서-post-메서드-이용하기\">HTML 폼에서 POST 메서드 이용하기</h3>\n<ul>\n  <li>모든 HTML 폼은 POST 메서드를 이용하여 데이터를 전송하게 된다.</li>\n  <li>폼에서 POST 메서드를 이용하지 않는 유일한 경우는 <code class=\"highlighter-rouge\">검색 폼</code>이다. 검색 폼은 일반적으로 <code class=\"highlighter-rouge\">어떤 데이터도 변경하지 않기 때문</code>이다. 이럴 경우 GET 메서드를 이용할 수 있다.</li>\n</ul>\n\n<h3 id=\"데이터를-변경하는-http-폼은-언제나-csrf-보안을-이용해야-한다\">데이터를 변경하는 HTTP 폼은 언제나 <a href=\"\">CSRF</a> 보안을 이용해야 한다.</h3>\n<p><code class=\"highlighter-rouge\">CSRF(Cross SIte Request Forgery protection), 교차 사이트 요청 위조 방지</code>는 사용자가 로그아웃하지 않고 유효한 세션을 계속 유지할 때 발생할 수 있는 공격으로부터 보호하는 메커니즘이다. \nCSRF 보안을 사용하지 않으면 치명적인 보안 문제를 일으킬 수 있으므로 항상 <a href=\"https://docs.djangoproject.com/en/1.11/ref/csrf/\">장고의 CSRF</a> 보안을 이용할 것을 충고한다.\n장고의 <code class=\"highlighter-rouge\">CsrfViewMiddleware</code>를 사이트 전체에 대한 보호막으로 이용함으로써 일일이 손으로 csrf_protect를 뷰에 데코레이팅하지 않아도 된다.\nCSRF 보안을 잠시 꺼 두어도 되는 경우로는 API를 제작할 때를 들 수 있다. django-tastypie나 django-rest-framework의 API 프레임워크에서는 이러한 처리를 자동으로 다해주기 때문이다.</p>\n\n<h3 id=\"ajax를-통해-데이터-추가하기\">AJAX를 통해 데이터 추가하기</h3>\n<ul>\n  <li><a href=\"\">AJAX</a>를 통해 데이터를 추가할 때는 반드시 장고의 <a href=\"\">CSRF</a> 보안을 이용해야 한다.</li>\n  <li><a href=\"\">CSRF</a> 보안을 이용하기 위해서는 먼저 CSRF 토큰을 얻어야 하는데, 이를 수행하는 방법은 CSRF_USE_SESSIONS 설정 사용 여부에 따라 다르다.</li>\n</ul>\n\n<p><strong>1. CSRF_USE_SESSIONS = False</strong></p>\n\n<ul>\n  <li>처음으로 사이트에 방문하면 쿠키를 저장하게 되는데, 이 쿠키는 <code class=\"highlighter-rouge\">csrftoken</code>에 대한 정보도 저장되어있다. 그리고 그 이후부터는 데이터를 전송할 때, HTTP Header에 이 쿠키 정보를 포함하여 전송한다.</li>\n  <li>장고는 <code class=\"highlighter-rouge\">csrftoken</code> 쿠키에 <code class=\"highlighter-rouge\">csrfmiddlewaretoken</code>에 저장된 값과 동일한 값이 저장된다.</li>\n</ul>\n\n<h4 id=\"csrftoken-cookie-가져오기\">csrftoken cookie 가져오기</h4>\n\n<p>jQuery를 사용할 경우</p>\n\n<div class=\"language-java highlighter-rouge\"><pre class=\"highlight\"><code>\n<span class=\"n\">function</span> <span class=\"nf\">getCookie</span><span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">var</span> <span class=\"n\">cookieValue</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">document</span><span class=\"o\">.</span><span class=\"na\">cookie</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">document</span><span class=\"o\">.</span><span class=\"na\">cookie</span> <span class=\"o\">!=</span> <span class=\"err\">''</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">var</span> <span class=\"n\">cookies</span> <span class=\"o\">=</span> <span class=\"n\">document</span><span class=\"o\">.</span><span class=\"na\">cookie</span><span class=\"o\">.</span><span class=\"na\">split</span><span class=\"o\">(</span><span class=\"sc\">';'</span><span class=\"o\">);</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">cookies</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"n\">var</span> <span class=\"n\">cookie</span> <span class=\"o\">=</span> <span class=\"n\">jQuery</span><span class=\"o\">.</span><span class=\"na\">trim</span><span class=\"o\">(</span><span class=\"n\">cookies</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]);</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">cookie</span><span class=\"o\">.</span><span class=\"na\">substring</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">name</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">+</span> <span class=\"sc\">'='</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n                <span class=\"n\">cookieValue</span> <span class=\"o\">=</span> <span class=\"n\">decodeURIComponent</span><span class=\"o\">(</span><span class=\"n\">cookie</span><span class=\"o\">.</span><span class=\"na\">substring</span><span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">));</span>\n                <span class=\"k\">break</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">cookieValue</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">jQuery</span><span class=\"o\">.</span><span class=\"na\">ajax</span><span class=\"o\">({</span>\n    <span class=\"nl\">type:</span> <span class=\"err\">'</span><span class=\"n\">PUT</span><span class=\"err\">'</span><span class=\"o\">,</span>\n    <span class=\"nl\">url:</span> <span class=\"n\">host</span><span class=\"o\">+</span><span class=\"err\">'</span><span class=\"o\">/</span><span class=\"n\">api</span><span class=\"o\">/</span><span class=\"n\">users</span><span class=\"o\">/</span><span class=\"err\">'</span><span class=\"o\">+</span><span class=\"n\">id</span><span class=\"o\">+</span><span class=\"sc\">'/'</span><span class=\"o\">,</span>\n    <span class=\"nl\">dataType:</span> <span class=\"err\">'</span><span class=\"n\">json</span><span class=\"err\">'</span><span class=\"o\">,</span>\n    <span class=\"nl\">contentType:</span> <span class=\"err\">'</span><span class=\"n\">application</span><span class=\"o\">/</span><span class=\"n\">json</span><span class=\"o\">;</span> <span class=\"n\">charset</span><span class=\"o\">=</span><span class=\"n\">utf</span><span class=\"o\">-</span><span class=\"mi\">8</span><span class=\"err\">'</span><span class=\"o\">,</span>\n    <span class=\"nl\">data:</span> <span class=\"n\">JSON</span><span class=\"o\">.</span><span class=\"na\">stringify</span><span class=\"o\">(</span><span class=\"n\">data</span><span class=\"o\">),</span>\n    <span class=\"nl\">beforeSend:</span> <span class=\"n\">function</span> <span class=\"o\">(</span><span class=\"n\">xhr</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n         <span class=\"n\">xhr</span><span class=\"o\">.</span><span class=\"na\">setRequestHeader</span><span class=\"o\">(</span><span class=\"s\">\"X-CSRFToken\"</span><span class=\"o\">,</span> <span class=\"n\">getCookie</span><span class=\"o\">(</span><span class=\"err\">'</span><span class=\"n\">csrftoken</span><span class=\"err\">'</span><span class=\"o\">));</span>\n    <span class=\"o\">},</span>\n    <span class=\"nl\">success:</span> <span class=\"n\">function</span><span class=\"o\">(</span><span class=\"n\">data</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        \n    <span class=\"o\">},</span>\n    <span class=\"nl\">error:</span> <span class=\"n\">function</span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        \n    <span class=\"o\">}</span>\n<span class=\"o\">});</span>\n\n</code></pre>\n</div>\n\n<p><a href=\"https://github.com/js-cookie/js-cookie/\">JavaScript Cookie 라이브러리</a>를 통해 csrftoken 쿠키를 얻을 경우</p>\n\n<div class=\"language-java highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"n\">var</span> <span class=\"n\">csrftoken</span> <span class=\"o\">=</span> <span class=\"n\">Cookies</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"err\">'</span><span class=\"n\">csrftoken</span><span class=\"err\">'</span><span class=\"o\">);</span>\n</code></pre>\n</div>\n\n<p><strong>2. CSRF_USE_SESSIONS = True</strong></p>\n\n<ul>\n  <li>CSRF_USE_SESSIONS를 활성화한 경우, HTML에 CSRF 토큰을 포함시키고 자바스크립트를 통하여 DOM으로부터 토큰을 읽어야한다.</li>\n</ul>\n\n<div class=\"language-java highlighter-rouge\"><pre class=\"highlight\"><code>\n<span class=\"o\">{%</span> <span class=\"n\">csrf_token</span> <span class=\"o\">%}</span>\n<span class=\"o\">&lt;</span><span class=\"n\">script</span> <span class=\"n\">type</span><span class=\"o\">=</span><span class=\"s\">\"text/javascript\"</span><span class=\"o\">&gt;</span>\n<span class=\"c1\">// using jQuery</span>\n<span class=\"n\">var</span> <span class=\"n\">csrftoken</span> <span class=\"o\">=</span> <span class=\"n\">jQuery</span><span class=\"o\">(</span><span class=\"s\">\"[name=csrfmiddlewaretoken]\"</span><span class=\"o\">).</span><span class=\"na\">val</span><span class=\"o\">();</span>\n<span class=\"o\">&lt;/</span><span class=\"n\">script</span><span class=\"o\">&gt;</span>\n\n</code></pre>\n</div>\n\n<ul>\n  <li>마지막으로 AJAX 요청에 헤더를 설정해야하며 jQuery 1.5.1 이상의 settings.crossDomain을 사용하여 요청을 다른 도메인으로 보내지 않도록 보호해야 한다.</li>\n</ul>\n\n<div class=\"language-java highlighter-rouge\"><pre class=\"highlight\"><code>\n<span class=\"n\">function</span> <span class=\"nf\">csrfSafeMethod</span><span class=\"o\">(</span><span class=\"n\">method</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"c1\">// 이 HTTP 메서드는 CSRF 보호를 요청하지 않는다.</span>\n    <span class=\"k\">return</span> <span class=\"o\">(/^(</span><span class=\"n\">GET</span><span class=\"o\">|</span><span class=\"n\">HEAD</span><span class=\"o\">|</span><span class=\"n\">OPTIONS</span><span class=\"o\">|</span><span class=\"n\">TRACE</span><span class=\"o\">)</span><span class=\"err\">$</span><span class=\"o\">/.</span><span class=\"na\">test</span><span class=\"o\">(</span><span class=\"n\">method</span><span class=\"o\">));</span>\n<span class=\"o\">}</span>\n<span class=\"err\">$</span><span class=\"o\">.</span><span class=\"na\">ajaxSetup</span><span class=\"o\">({</span>\n    <span class=\"nl\">beforeSend:</span> <span class=\"n\">function</span><span class=\"o\">(</span><span class=\"n\">xhr</span><span class=\"o\">,</span> <span class=\"n\">settings</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">csrfSafeMethod</span><span class=\"o\">(</span><span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"na\">type</span><span class=\"o\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">!</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">crossDomain</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">xhr</span><span class=\"o\">.</span><span class=\"na\">setRequestHeader</span><span class=\"o\">(</span><span class=\"s\">\"X-CSRFToken\"</span><span class=\"o\">,</span> <span class=\"n\">csrftoken</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">});</span>\n\n</code></pre>\n</div>\n\n<hr />\n\n<h2 id=\"장고-폼에-인스턴스-속성-추가하기\">장고 폼에 인스턴스 속성 추가하기</h2>\n<p>때때로 장고 폼의 clean(), clean_<field-name>(), save() 메서드에 추가로 폼 이스턴스 속성이 필여할 경우가 있다. 이럴 경우에는 `request.user` 객체를 이용하면 된다.</field-name></p>\n\n<p><strong>[Form]</strong></p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">]</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">TasterForm</span><span class=\"p\">(</span><span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">ModelForm</span><span class=\"p\">):</span>\n\t<span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n\t\t<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Taster</span>\n\t\t\n\t<span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n\t\t<span class=\"c\"># user 속성을 폼에 추가하기</span>\n\t\t<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s\">'user'</span><span class=\"p\">)</span>\n\t\t<span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">TasterForm</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">__init__</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p><code class=\"highlighter-rouge\">super()</code>를 호출하기 이전에 <code class=\"highlighter-rouge\">self.user</code>와 <code class=\"highlighter-rouge\">kwargs</code>를 호출했다. 크리스토퍼 램배커(Christopher Lambacher)에 의하면 이러한 방식이 폼을 더 강력하게, 특히 다중 상속을 이용할 때 강력한 효과를 발휘한다고 한다.</p>\n\n<p><strong>[View]</strong></p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">]</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">TasterUpdateView</span><span class=\"p\">(</span><span class=\"n\">LoginRequireMixin</span><span class=\"p\">,</span> <span class=\"n\">UpdateVeiw</span><span class=\"p\">):</span>\n\t<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Taster</span>\n\t<span class=\"n\">form_class</span> <span class=\"o\">=</span> <span class=\"n\">TasterForm</span>\n\t<span class=\"n\">success_url</span> <span class=\"o\">=</span> <span class=\"s\">\"/someplace/\"</span>\n\t\n\t<span class=\"k\">def</span> <span class=\"nf\">get_form_kwargs</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n\t<span class=\"s\">\"\"\" 키워드 인자로 폼 추가 \"\"\"</span>\n\t\t<span class=\"c\"># 폼 kwargs 가져오기</span>\n\t\t<span class=\"n\">kwargs</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">TasterUpdateVIew</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get_form_kwargs</span><span class=\"p\">()</span>\n\t\t<span class=\"c\"># kwargs의 user 업데이트</span>\n\t\t<span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s\">'user'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">user</span>\n\t\t<span class=\"k\">return</span> <span class=\"n\">kwargs</span>\t\n</code></pre>\n</div>\n\n<hr />\n\n<h2 id=\"폼-유효성-검사하는-방법\">폼 유효성 검사하는 방법</h2>\n<p><code class=\"highlighter-rouge\">form.is_valid()</code>가 호출될 때, 여러가지 일이 다음 순서로 진행된다.</p>\n\n<p><strong>1.</strong> 폼이 데이터를 받으면 form.is_valid()는 form.full_clean()을 호출한다. <br />\n<strong>2.</strong> form.full_clean()은 폼 필드들과 각각의 필드 유효성을 하나하나 검사하면서 다음과 같은 과정을 수행한다.</p>\n\n<pre><code class=\"language-docker\">a. 필드에 들어온 데이터에 대해 to_python()을 이용하여 파이썬 형식으로 변환하거나 변활할 때 문제가 생기면 ValidationError를 일으킨다.\nb. 커스텀 유효성 검사기를 포함한 각 필드에 특별한 유효성을 검사하고 문제가 있으면 ValidationError를 일으킨다.\nc. 폼에 clean_&lt;field-name&gt;()이 있으면 이를 실행한다.\n</code></pre>\n\n<p><strong>3.</strong> form.furll_clean()이 form.clean()을 실행한다. 참고로 ModelForm의 경우, form 데이터를 자동으로 모델 인스턴스로 설정하는데, ORM을 통해 모델 인스턴스를 저장할 때는 해당 모델의 clean() 메서드가 호출되지 않는다.</p>\n\n<h3 id=\"modelform-데이터는-폼에-먼저-저장되-이후-모델-인스턴스에-저장된다\">ModelForm 데이터는 폼에 먼저 저장되 이후 모델 인스턴스에 저장된다.</h3>\n<p>ModelForm에서 폼 데이터는 두 가지 각기 다른 단계를 통해 저장된다.</p>\n\n<ol>\n  <li>먼저 폼데이터가 폼 인스턴스에 저장된다.</li>\n  <li>그 다음에 폼 데이터가 모델 인스턴스에 저장된다.</li>\n</ol>\n\n<p>form.save()가 적용되기 전까지는 ModelForm이 모델 인스턴스로 저장되지 않기 때문에 이렇게 분리된 과정 자체를 장점으로 활용할 수 있다.</p>\n\n<h2 id=\"참고자료\">참고자료</h2>\n<ul>\n  <li>장고 공식문서 https://docs.djangoproject.com/en/1.11/ref/csrf/</li>\n</ul>\n"
    } ,
  
    {
      "title"    : "[DRF] Permissions",
      "category" : "DRFdrf",
      "tags"     : "Django, REST API",
      "url"      : "/drf/2017/09/13/drf-permissions.html",
      "date"     : "2017-09-13 00:00:00 +0900",
      "content"   : "<ul>\n  <li><a href=\"https://github.com/django-rest-framework-study/weeklystudy/blob/master/week1/drf-authentication.md\">Authentication</a>과 Permissions는 접근을 수락할 것인지 거부할 것인지를 결정한다.</li>\n  <li>Permissions는 보통 다른 인스턴스 정보를 가진 사용자가 나의 인스턴스만 접근할 수 있는 페이지에 접근하려할 때 사용된다.</li>\n  <li>Permissions는 항상 다른 코드가 실행되기 전, <strong>View가 시작될 때 체크</strong> 하며, <code class=\"highlighter-rouge\">요청에 대한 허용 여부를 판단</code>하기 위해  <code class=\"highlighter-rouge\">request.user</code>와 <code class=\"highlighter-rouge\">request.auth</code>의 인증 정보를 사용한다.</li>\n</ul>\n\n<h2 id=\"사용-권한-형태\">사용 권한 형태</h2>\n<ul>\n  <li>가장 간단한 사용 권한 형태는 인증된 모든 사용자에게 액세스를 허용하고, 인증되지 않은 모든 사용자에 대한 액세스를 거부하는 것이다. 이것은 DRF의 <code class=\"highlighter-rouge\">IsAuthenticated</code> 클래스에 해당한다.</li>\n  <li>강도가 더 낮은 사용 권한으로 DRF의 <code class=\"highlighter-rouge\">IsAutenticatedOrReadOnly</code>가 있는데, 해당 사용 권한은 인증된 사용자일 경우 모든 권한(생성/조회/수정/삭제)를 허용하고, 인증되지 않은 사용자는 조회만 허용하도록 하는 것이다.</li>\n</ul>\n\n<h2 id=\"사용-권한-검사-실패\">사용 권한 검사 실패</h2>\n<p>권한 검사가 실패하면, <code class=\"highlighter-rouge\">exceptions.PermissionDenied</code> 또는 <code class=\"highlighter-rouge\">exceptions.NotAuthenticated</code> 예외가 발생하고 <strong>View가 실행되지 않는다.</strong></p>\n\n<h3 id=\"권한-검사-실패-status\">권한 검사 실패 Status</h3>\n<ul>\n  <li><strong>HTTP 403 Forbidden</strong> : 요청이 성공적으로 인증되었으나 사용 권한이 거부된 것 또는 요청이 성공적으로 인증되지 않았고 최상위 Authentication 클래스가 WWW-Authenticate 헤더를 사용하지 않은 것.</li>\n  <li><strong>HTTP 401 Unauthorized response</strong> : 요청이 성공적으로 인증되지 않았고 최상위 클래스가 WWW-Authenticate 헤더를 사용하지 않은 것</li>\n</ul>\n\n<h2 id=\"object-level-permissions\">Object Level Permissions</h2>\n<p>Permissions는 object-level permissioning을 제공한다.</p>\n\n<ul>\n  <li>사용자가 모델 인스턴스에 대한 접근 및 조작 허용 여부를 결정할 때 사용된다.</li>\n  <li><code class=\"highlighter-rouge\">.get_object ()</code>가 호출 될 때, DRF의 View에 의해 실행되며, View의 사용 권한과 같이 유저가 지정된 객체를 조작 할 수 없는 경우에 exceptions.PermissionDenied 예외가 발생한다.</li>\n  <li>하지만 성능상의 이유로 제네릭 뷰는 object-level permissions를 자동으로 적용하지 않는다. 그렇기 때문에 object-level permissions를 사용하려면 쿼리셋을 적절하게 필터링해야 한다.</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">get_object</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">get_object_or_404</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_queryset</span><span class=\"p\">())</span>\n\n    <span class=\"c\"># View에서 get_object()를 override하여 내용을 변경할 때,</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">check_object_permissions</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">)</span> <span class=\"c\"># 를 명시적으로 호출해야 한다.</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">obj</span>\n</code></pre>\n</div>\n\n<h2 id=\"permissions-적용하기\">Permissions 적용하기</h2>\n\n<p><strong>1. 우선 <code class=\"highlighter-rouge\">settings</code>에 Permissions를 사용할 것이라는 내용을 선언해야 한다.</strong></p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"n\">REST_FRAMEWORK</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">'DEFAULT_PERMISSION_CLASSES'</span><span class=\"p\">:</span> <span class=\"p\">(</span>\n        <span class=\"s\">'rest_framework.permissions.IsAuthenticated'</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div>\n\n<p><br />\n<strong>2-1. CBV인 APIView에서 다음과 같이 사용 권한을 반영할 수 있다.</strong></p>\n\n<ul>\n  <li><code class=\"highlighter-rouge\">DEFAULT_PERMISSION_CLASSES</code>를 설정하면, 설정한 permission을 기본으로 사용 권한 검사를 하겠다는 의미이며, 특정 페이지에 대해서 다른 사용 권한을 부여하고 싶다면, 해당 View에 별도로 선언해야 한다.</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">ExampleView</span><span class=\"p\">(</span><span class=\"n\">APIView</span><span class=\"p\">):</span>\n    <span class=\"n\">permission_classes</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">IsAuthenticated</span><span class=\"p\">,)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">format</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"n\">content</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s\">'status'</span><span class=\"p\">:</span> <span class=\"s\">'request was permitted'</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">Response</span><span class=\"p\">(</span><span class=\"n\">content</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p><br />\n<strong>2-2. FBV인 경우, <code class=\"highlighter-rouge\">@api_view</code> 데코레이터를 활용하여 다음과 같이 사용 권한을 반영할 수 있다.</strong></p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nd\">@api_view</span><span class=\"p\">([</span><span class=\"s\">'GET'</span><span class=\"p\">])</span>\n<span class=\"nd\">@permission_classes</span><span class=\"p\">((</span><span class=\"n\">IsAuthenticated</span><span class=\"p\">,</span> <span class=\"p\">))</span>\n<span class=\"k\">def</span> <span class=\"nf\">example_view</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">format</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n    <span class=\"n\">content</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s\">'status'</span><span class=\"p\">:</span> <span class=\"s\">'request was permitted'</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">Response</span><span class=\"p\">(</span><span class=\"n\">content</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p><br />\n<img src=\"http://localhost:4000/assets/non_permission.png\" alt=\"\" class=\"center-image\" /></p>\n\n<p align=\"center\">인증되지 않은 유저가 뷰를 실행시킬 때</p>\n\n<h2 id=\"api-reference\">API Reference</h2>\n<h3 id=\"allowany\">AllowAny</h3>\n<ul>\n  <li>요청이 인증되었거나 인증되지 않았는지 여부와 관계가 없다.</li>\n  <li>의도를 명시화 시키는 목적으로 주로 쓰인다.</li>\n</ul>\n\n<h3 id=\"isauthenticated\">IsAuthenticated</h3>\n<ul>\n  <li>인증되지 않은 사용자의 사용 권한을 거부한다.</li>\n  <li>등록된 사용자만 API에 액세스할 수 있도록 할 때 적합하다.</li>\n</ul>\n\n<h3 id=\"isadminuser\">IsAdminUser</h3>\n<ul>\n  <li>user.is_staff가 True 인 경우를 제외하고 모든 사용자에 대한 권한을 거부한다.</li>\n  <li>관리자만 접근할 수 있는 페이지에 대한 API 액세스에 적합하다.</li>\n</ul>\n\n<h3 id=\"isauthenticatedorreadonly\">IsAuthenticatedOrReadOnly</h3>\n<ul>\n  <li>인증된 사용자일 경우 모든 권한(생성/조회/수정/삭제)를 허용하고, 인증되지 않은 사용자는 조회만 허용한다.</li>\n</ul>\n\n<p>[…]</p>\n\n<h3 id=\"custom-permissions\">Custom permissions</h3>\n<p>커스텀 사용 권한을 적용하기 위해서, BasePermission과 아래의 메서드를 오버라이드해야 한다.</p>\n\n<ul>\n  <li>.has_permissions(self, request, view)</li>\n  <li>.has_object_permissions(self, request, view, obj)</li>\n</ul>\n\n<p>위 메서드는 액세스가 허용되면 True를 그렇지 않으면 False를 반환한다.</p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">BlacklistPermission</span><span class=\"p\">(</span><span class=\"n\">permissions</span><span class=\"o\">.</span><span class=\"n\">BasePermission</span><span class=\"p\">):</span>\n    <span class=\"s\">\"\"\"\n    Global permission check for blacklisted IPs.\n    \"\"\"</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">has_permission</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">view</span><span class=\"p\">):</span>\n\n    \t<span class=\"c\"># The IP address of the client.</span>\n\t\t<span class=\"n\">ip_addr</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">META</span><span class=\"p\">[</span><span class=\"s\">'REMOTE_ADDR'</span><span class=\"p\">]</span>\n\t\t<span class=\"n\">blacklisted</span> <span class=\"o\">=</span> <span class=\"n\">Blacklist</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"nb\">filter</span><span class=\"p\">(</span><span class=\"n\">ip_addr</span><span class=\"o\">=</span><span class=\"n\">ip_addr</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">()</span>\n\t\t<span class=\"k\">return</span> <span class=\"ow\">not</span> <span class=\"n\">blacklisted</span>\n</code></pre>\n</div>\n\n<p><br />\n요청이 읽기 모드인지 쓰기모드인지 테스트하고자 한다면, ‘GET’, ‘OPTIONS’와 ‘HEAD’와 같은 튜플 형태의 <code class=\"highlighter-rouge\">SAVE_METHODS</code>와 비교하여 요청 메서드를 점검해야 한다.</p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">if</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">method</span> <span class=\"ow\">in</span> <span class=\"n\">permissions</span><span class=\"o\">.</span><span class=\"n\">SAFE_METHODS</span><span class=\"p\">:</span>\n    <span class=\"c\"># Check permissions for read-only request</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"c\"># Check permissions for write request</span>\n</code></pre>\n</div>\n\n<h2 id=\"참고자료\">참고자료</h2>\n<ul>\n  <li><a href=\"\">Django rest framework 공식문서 - Permissions</a></li>\n</ul>\n"
    } ,
  
    {
      "title"    : "[DRF] JWT(Json Web Token)",
      "category" : "DRFdrf",
      "tags"     : "Authentication, Token",
      "url"      : "/drf/2017/09/12/authentication-jwt.html",
      "date"     : "2017-09-12 00:00:00 +0900",
      "content"   : "<blockquote>\n  <p>REST API 인증이 핫해지면서 많이 언급되는 것이 <code class=\"highlighter-rouge\">OAuth</code>인데, 최근에 회자되고 있는 것이 <code class=\"highlighter-rouge\">JWT(JSON Web Token)</code>이라는 표준이다.</p>\n</blockquote>\n\n<h2 id=\"oauth-기반-토큰\">OAuth 기반 토큰</h2>\n<ul>\n  <li>OAuth에 의해서 발급되는 <code class=\"highlighter-rouge\">access_token</code>은 무작위로 나열되는 문자열로, 토큰 자체에는 특별한 정보를 가지고 있지 않다.</li>\n  <li>API나 서비스를 제공하는 서버 측에서 해당 토큰을 이용하여 사용자의 권한을 식별한 뒤, 권한을 허용해주는 구조이다.</li>\n</ul>\n\n<p><img src=\"/assets/oauth-token.png\" alt=\"\" class=\"center-image\" /></p>\n\n<h2 id=\"claim-기반-토큰\">Claim 기반 토큰</h2>\n<ul>\n  <li>Claim은 사용자에 대한 프로퍼티나 속성을 뜻한다.</li>\n  <li>해당 토큰을 이용해서 요청을 받는 서버 입장에서는 서비스를 호출한 사용자에 대한 추가 정보가 이미 토큰 안에 포함돼있기 때문에 다른 곳에서 가져올 필요가 없다.</li>\n  <li>인증 단계에서 토큰을 생성 혹은 조회하여 해당하는 토큰 값을 가져오는 것이 아니고, username, email 등의 <code class=\"highlighter-rouge\">user 정보</code>를 가져온다.</li>\n  <li>즉 토큰 내에 유저 정보가 존재하기 때문에 토큰을 별도로 서버에서 유지할 필요가 없으며, 사용자 정보를 호출하기 위해 <strong>계정 시스템을 거칠 필요가 없다.</strong></li>\n</ul>\n\n<p><img src=\"/assets/claim-token.png\" alt=\"\" class=\"center-image\" /></p>\n\n<h2 id=\"jwt\">JWT</h2>\n<ul>\n  <li>JWT는 JSON 객체로서 클라이언트와 서버 간에 안전하게 정보를 전송할 수 있는 작고 독립적인 방법을 정의하는 공개 표준(RFC 7519)이다.</li>\n  <li>JWT의 경우 <code class=\"highlighter-rouge\">Claim 기반이라는 방식</code>을 사용하는데, 토큰 자체가 정보를 가지고 있는 방식으로, JWT는 이 Claim을 <code class=\"highlighter-rouge\">JSON 형태</code>로 정의한다.</li>\n  <li>하지만 JSON은 ‘\\n’ 등의 개행문자가 포함되어 있기 떄문에 Header에 넣기가 불편하다. 따라서 해당 JSON 문자열을 BASE64 인코딩을 통해서 하나의 문자열로 변환해야 한다.</li>\n</ul>\n\n<div class=\"language-json highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"nt\">\"username\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"bbungsang\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nt\">\"email\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"bbungsang@bbungsang.com\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nt\">\"nickname\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"뿡상\"</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre>\n</div>\n\n<p>BASE64 인코딩 결과</p>\n\n<pre><code class=\"language-docker\">EAACcwd4rQBgBAOpQkOqdHp3Iqywfwqky25QnbJe0TJnQQlrB5AferqBq43CXmgrkRIO6yK22DHckc7G3WHUqGSZC9\n</code></pre>\n\n<h3 id=\"왜-사용할까\">왜 사용할까?</h3>\n\n<ul>\n  <li><strong>Reliable</strong> : HMAC 알고리즘 또는 RSA를 사용하는 공개/개인키를 사용하여 서명되었기 때문에 검증되었고 신뢰도가 높다.</li>\n  <li><strong>Compact</strong> : 크기가 작기 때문에 POST 파라미터 혹은 HTTP Header를 통해 전송될 수 있으며 이는 전송이 빠름을 의미한다.</li>\n  <li><strong>Self-contained</strong> : 사용자에 대한 모든 정보가 들어있어 데이터베이스에 두 번 이상 쿼리를 날릴 필요가 없다.</li>\n</ul>\n\n<h3 id=\"jwt-structure\">JWT Structure</h3>\n<p>JWT는 <code class=\"highlighter-rouge\">.</code>로 구분된 3개의 Base64 문자열이다.(XML 기반 표준과 비교할 때 더 작아졌다.)</p>\n\n<ul>\n  <li>Header</li>\n  <li>Payload</li>\n  <li>Signature</li>\n</ul>\n\n<p><code class=\"highlighter-rouge\">xxxx.yyyy.zzzz</code>의 형태로 표현된다.</p>\n\n<h4 id=\"header\">Header</h4>\n<p>헤더는 일반적으로 HMACSHA256 또는 RSA의 해시 알고리즘과 Base64 URL로 인코딩되어 있는 토큰, 두 부분으로 구성된다.</p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"nt\">\"alg\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"HS256\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nt\">\"typ\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"JWT\"</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre>\n</div>\n\n<h4 id=\"payload\">Payload</h4>\n<p>Claim이 들어있으며, Claim은 Entity와 추가 메타데이터에 대한 설명으로 Reserved, Public, Private 3가지 유형이 존재한다.</p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"nt\">\"sub\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"1234567890\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nt\">\"username\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"bbungsang\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nt\">\"admin\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre>\n</div>\n\n<h4 id=\"signature\">Signature</h4>\n<ul>\n  <li>Signature을 만들려면 인코딩 된 Header, 인코딩 된 Payload, 암호 및 Header에 지정된 알고리즘을 서명해야한다.</li>\n  <li>해당 Signature는 JWT 발신자를 확인하고 메세지가 변경되었는지 여부를 확인하는데 사용된다.</li>\n</ul>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>HMACSHA256(\n  base64UrlEncode(header) + \".\" +\n  base64UrlEncode(payload),\n  secret)\n</code></pre>\n</div>\n\n<p><br />\n<img src=\"/assets/jwt-example.png\" alt=\"\" class=\"center-image\" /></p>\n\n<p align=\"center\">jwt.io Debugger</p>\n<p><br /></p>\n"
    } ,
  
    {
      "title"    : "[DRF] Authentication",
      "category" : "DRFdrf",
      "tags"     : "Django, REST API",
      "url"      : "/drf/2017/09/11/Autentication(1).html",
      "date"     : "2017-09-11 00:00:00 +0900",
      "content"   : "<ul>\n  <li>Authentication은 View의 시작, Permission이 수행되기 전에 실행된다.</li>\n  <li>인증 스키마는 클래스 단위로 정의되며, 각 클래스에 대해 인증을 시도한다. 성공적으로 인증을 한 클래스의 반환 값을 사용하여 <code class=\"highlighter-rouge\">request.user</code> 및 <code class=\"highlighter-rouge\">request.auth</code>를 설정한다.</li>\n  <li><strong>클래스가 인증되지 않으면</strong> request.user(User 인스턴스와 관련이 있음)는 <code class=\"highlighter-rouge\">AnonymousUser 인스턴스</code>로 설정되고, request.auth(Token과 관련이 있음)는 <code class=\"highlighter-rouge\">None</code>으로 설정된다.</li>\n</ul>\n\n<h2 id=\"authentication-설정하기\">Authentication 설정하기</h2>\n\n<p>기본 인증 스키마는 <code class=\"highlighter-rouge\">settings</code>에서 <code class=\"highlighter-rouge\">DEFAULT_AUTHENTICATION_CLASSES</code>를 사용하여 설정할 수 있다.</p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"n\">REST_FRAMEWORK</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">'DEFAULT_AUTHENTICATION_CLASSES'</span><span class=\"p\">:</span> <span class=\"p\">(</span>\n        <span class=\"s\">'rest_framework.authentication.BasicAuthentication'</span><span class=\"p\">,</span>\n        <span class=\"s\">'rest_framework.authentication.SessionAuthentication'</span><span class=\"p\">,</span>\n        <span class=\"p\">[</span><span class=\"o\">...</span> <span class=\"err\">여러</span> <span class=\"err\">종류의</span> <span class=\"err\">인증</span> <span class=\"err\">스키마</span><span class=\"p\">]</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div>\n\n<h2 id=\"api-뷰에-authentication-적용하기\">API 뷰에 Authentication 적용하기</h2>\n\n<h3 id=\"cbvclass\">CBV(Class)</h3>\n\n<p><code class=\"highlighter-rouge\">APIView</code>에서 <code class=\"highlighter-rouge\">authentication_classes</code>를 통해 튜플 형태의 단위별 Authentication을 설정할 수 있다.</p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">ExampleView</span><span class=\"p\">(</span><span class=\"n\">APIView</span><span class=\"p\">):</span>\n\t<span class=\"c\"># 첫 번째 인증 클래스는 응답 유형을 결정할 때 사용한다.</span>\n    <span class=\"n\">authentication_classes</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">SessionAuthentication</span><span class=\"p\">,</span> <span class=\"n\">BasicAuthentication</span><span class=\"p\">)</span>\n    <span class=\"n\">permission_classes</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">IsAuthenticated</span><span class=\"p\">,)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">):</span>\n    \t<span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n\n<ul>\n  <li>DEFAULT_AUTHENTICATION_CLASSES를 설정하면, 설정한 기본 인증 제도 하에 이 DRF를 실행하겠다는 의미를 전제하고 있다. 즉, 기본적으로 SessionAuthentication(모든 페이지에 세션 인증 반영)을 설정했고, 특정 페이지만 TokenAuthentication으로 인증할 경우, 해당 View에 별도로 선언해야 한다.</li>\n</ul>\n\n<h3 id=\"fbvfunction\">FBV(Function)</h3>\n\n<p>또는 <code class=\"highlighter-rouge\">@api_view</code> 데코레이터를 통해 FBV에서 설정할 수도 있다.</p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nd\">@api_view</span><span class=\"p\">([</span><span class=\"s\">'GET'</span><span class=\"p\">])</span>\n<span class=\"nd\">@authentication_classes</span><span class=\"p\">((</span><span class=\"n\">SessionAuthentication</span><span class=\"p\">,</span> <span class=\"n\">BasicAuthentication</span><span class=\"p\">))</span>\n<span class=\"nd\">@permission_classes</span><span class=\"p\">((</span><span class=\"n\">IsAuthenticated</span><span class=\"p\">,))</span>\n<span class=\"k\">def</span> <span class=\"nf\">example_view</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n\t<span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n\n<h2 id=\"인증되지-않고-거부된-요청에-따른-응답\">인증되지 않고 거부된 요청에 따른 응답</h2>\n<p>인증되지 않은 요청으로 권한이 거부될 때, 2개의 에러코드가 발생할 수 있다.</p>\n\n<ul>\n  <li><strong>HTTP 401 Unauthorized</strong> : <code class=\"highlighter-rouge\">WWW-Authenticate</code> 헤더가 항상 포함, 클라이언트에 인증 방법 제시한다.</li>\n</ul>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>HTTP/ 1.1 401 Unauthorized\nWWW-Authenticate: Basic realm=\"api\" # 이 부분으로 인증 종류 판별\n</code></pre>\n</div>\n\n<ul>\n  <li><strong>HTTp 403 Permissions Denied</strong> : <code class=\"highlighter-rouge\">WWW-Authenticate</code> 헤더가 포함되지 않는다. 요청은 성공적으로 인증됐지만 요청을 수행할 수 있는 사용 권한이 거부 된 경우 사용된다.</li>\n</ul>\n\n<h1 id=\"api-reference\">API Reference</h1>\n<h2 id=\"basicauthentication\">BasicAuthentication</h2>\n<ul>\n  <li>이 인증 체계는 username과 password에 대해 HTTP 기본 인증을 사용한다. 하지만 기본 인증은 일반적으로 테스트에 적합하다.</li>\n  <li>인증을 성공하면, <code class=\"highlighter-rouge\">request.user</code>는 <code class=\"highlighter-rouge\">장고 User 인스턴스</code>가 될 것이고, <code class=\"highlighter-rouge\">request.auth</code>는 <code class=\"highlighter-rouge\">None</code>이 될 것이다.</li>\n  <li>인증되지 않은 요청에 대하여 권한이 거부되면 HTTP 401 Unauthorized 응답을 WWW-Authenticate 헤더와 같이 돌려받는다.</li>\n</ul>\n\n<h2 id=\"sessionsauthentication\">SessionsAuthentication</h2>\n<h3 id=\"전통적인-인증-방식세션-인증-방식\">전통적인 인증 방식(세션 인증 방식)</h3>\n<ul>\n  <li>세션 인증 체계는 장고 기본 세션 백엔드를 사용한다.</li>\n  <li>성공적으로 인증이 이뤄졌다면, <code class=\"highlighter-rouge\">request.user</code>는 <code class=\"highlighter-rouge\">장고 유저 인스턴스</code>가 될 것이고 <code class=\"highlighter-rouge\">request.auth</code>는 <code class=\"highlighter-rouge\">None</code>이 될 것이다.</li>\n  <li>인증되지 않은 요청에 대하여 권한이 거부되면, HTTP 403 Forbidden 응답을 돌려받는다.</li>\n  <li>만약 세션 인증을 AJAX 스타일의 API와 사용한다면, PUT, PATCH, POST 또는 DELETE 요청과 같은 안전하지 않은 HTTP 메서드 호출을 할 경우 CSRF token을 포함시켜야 한다.</li>\n</ul>\n\n<p><img src=\"http://localhost:4000/assets/session-login.png\" alt=\"\" class=\"center-image\" /></p>\n\n<ol>\n  <li>사용자는 username과 password를 로그인 폼을 통해 제출한다.</li>\n  <li>서버는 Request에 대하여 DB를 순회하여 일치하는 user 정보가 있는지를 검증한다. Request가 유효하면 세션을 생성하고 세션 정보를 Response 헤더에 포함시켜 반환한다.</li>\n  <li>클라이언트는 인증된 사용자만 접근할 수 있는 페이지에 액세스할 때, 모든 Request 헤더에 세션 정보를 포함시킨다.</li>\n  <li>만약 세션 정보가 유효하면 서버측에서 사용자의 접근을 허용하고 그에 따른 렌더링된 HTML 내용을 반환한다.</li>\n</ol>\n\n<p><br />\n<strong>세션 로그인의 문제점</strong></p>\n<ul>\n  <li><strong>서버 확장시 세션 정보의 동기화 문제가 발생한다.</strong> : 서버 1에서 로그인을 성공했어도, 새로고침을 통해 서버2로 접근하게 되면 서버는 인증이 안됐다고 판단한다.</li>\n  <li><strong>서버 세션 저장소의 부하</strong> : 세션은 정보를 서버에 저장한다. 하지만 세션을 각 서버에 저장하지 않고 세션 전용 DB 서버에 저장해도 문제가 생긴다. 모든 요청 시 DB 서버에 조회를 해야하기 때문에 DB 부하를 일으킬 수 있다.</li>\n  <li><strong>웹&amp;앱 간의 상이한 쿠키-세션 처리 로직</strong> : 웹과 앱의 쿠키 처리 방법이 다르고, 다른 Client가 생겨나면 그에 맞는 쿠키-세션을 처리해야 한다.</li>\n</ul>\n\n<h2 id=\"tokenauthentication\">TokenAuthentication</h2>\n<p>세션의 문제를 해결하는 최선의 방법은 토큰이다.</p>\n\n<p><img src=\"http://localhost:4000/assets/token-login.png\" alt=\"\" class=\"center-image\" /></p>\n\n<blockquote>\n  <p><strong>토큰 기반 인증을 왜 사용할까? : 프론트엔드 프로젝트와 백엔드의 독립적인 개발</strong></p>\n\n  <ul>\n    <li>토큰 기반 인증에서 <code class=\"highlighter-rouge\">토큰</code>은 요청 <code class=\"highlighter-rouge\">헤더</code>를 통해 전달된다. 이를 <code class=\"highlighter-rouge\">Stateless</code>라고 하는데, JSON형태의 HTTP 요청을 만들 수 있는 클라이언트라면 누구든지 서버로 요청을 보낼 수 있다는 것을 의미한다.</li>\n    <li>대부분의 웹 어플리케이션 내에서 <code class=\"highlighter-rouge\">View</code>는 백엔드에서 렌더링이 되고, 그 결과가 브라우저로 반환되는데, 이는 프론트엔드의 로직이 백엔드 코드와 의존성이 있다는 것을 의미한다.</li>\n    <li>토큰 기반 인증에서 백엔드 코드는 렌더링된 HTML 대신 <code class=\"highlighter-rouge\">JSON 응답을 반환</code>할 것이고, 프론트엔드는 반환된 HTML을 받아쓰는 것이 아닌, 경량화되고 압축된 버전의 독립적인 코드를 <code class=\"highlighter-rouge\">CDN</code>에 넣어둘 수 있게된다.</li>\n    <li>즉, 사용자가 웹 페이지에 접속하면 HTML 컨텐츠는 CDN에서 제공되고, 페이지 내용은 인증 헤더의 토큰을 사용하는 API 서버에 의해 생성되어 프론트엔드와 백엔드의 독립적인 운용을 가능케한다.</li>\n    <li>토큰 기반 인증에서 토큰은 헤더 내에 포함되기 때문에 CSRF를 방지할 수 있다.</li>\n  </ul>\n</blockquote>\n\n<p><br />\n<strong>1. 토큰 인증 체계를 사용하기 위해서는 <code class=\"highlighter-rouge\">settings</code>의 <code class=\"highlighter-rouge\">INSTALLED_APPS 설정</code>에 <code class=\"highlighter-rouge\">rest_framework.authtoken</code>을 추가해야 한다.</strong></p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>INSTALLED_APPS = (\n    [...]\n    'rest_framework.authtoken'\n)\n</code></pre>\n</div>\n\n<p><br />\n<strong>2. rest_framework.authtoken 앱은 <code class=\"highlighter-rouge\">Django 데이터베이스 마이그레이션을 제공</code>하기 때문에 설정을 변경한 후에 <code class=\"highlighter-rouge\">migrate를 실행</code>해야 한다.</strong></p>\n\n<p><img src=\"http://localhost:4000/assets/after_add_authtoken_migration.png\" alt=\"\" class=\"center-image\" /></p>\n\n<p><img src=\"http://localhost:4000/assets/authtoken_running_migrations.png\" alt=\"\" class=\"center-image\" /></p>\n\n<p align=\"center\">python manage.py migrate 명령어 실행</p>\n<p><br /></p>\n\n<p><img src=\"http://localhost:4000/assets/db_table_list.png\" alt=\"\" class=\"center-image\" /></p>\n\n<p align=\"center\">migrate 실행 후 아래와 같이 데이터베이스 테이블이 생성된 것을 확인할 수 있다.</p>\n<p><br /></p>\n\n<p><img src=\"http://localhost:4000/assets/db_authtoken_token_fields.png\" alt=\"\" class=\"center-image\" /></p>\n\n<p align=\"center\">Token 테이블의 필드들</p>\n<p><br /></p>\n\n<p><strong>3. 토큰 생성하기</strong></p>\n\n<p>유저에 대하여 토큰을 생성해야하는데, <strong>MyUser 모델에 토큰을 생성하는 함수를 정의</strong> 하고 로그인 시 새로운 유저라면 토큰을 생성하고, 기존 유저라면 기존 토큰 값을 가져오도록 하려고 한다.</p>\n\n<p>[MyUser 모델]</p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">MyUser</span><span class=\"p\">(</span><span class=\"n\">AbstractUser</span><span class=\"p\">):</span>\n\t<span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_user_token</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">user_pk</span><span class=\"p\">):</span>\n    \t<span class=\"k\">return</span> <span class=\"n\">Token</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get_or_create</span><span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"o\">=</span><span class=\"n\">user_pk</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>[Login 시리얼라이저]</p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">LoginSerializer</span><span class=\"p\">(</span><span class=\"n\">serializers</span><span class=\"o\">.</span><span class=\"n\">Serializer</span><span class=\"p\">):</span>\n    <span class=\"s\">\"\"\" 로그인 \"\"\"</span>\n    <span class=\"n\">username</span> <span class=\"o\">=</span> <span class=\"n\">serializers</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">36</span><span class=\"p\">,</span> <span class=\"n\">write_only</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">password</span> <span class=\"o\">=</span> <span class=\"n\">serializers</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"n\">write_only</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">user_type</span> <span class=\"o\">=</span> <span class=\"n\">serializers</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">validate</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">):</span>\n        <span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">]</span>\n\n        <span class=\"n\">token</span><span class=\"p\">,</span> <span class=\"n\">created</span> <span class=\"o\">=</span> <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">get_user_token</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">pk</span><span class=\"p\">)</span>\n\n        <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s\">'token'</span><span class=\"p\">:</span> <span class=\"n\">token</span><span class=\"o\">.</span><span class=\"n\">key</span><span class=\"p\">,</span>\n            <span class=\"s\">'user'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                <span class=\"s\">'user_pk'</span><span class=\"p\">:</span> <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">pk</span><span class=\"p\">,</span>\n                <span class=\"s\">'username'</span><span class=\"p\">:</span> <span class=\"n\">username</span><span class=\"p\">,</span>\n                <span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">]</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">ret</span>\n</code></pre>\n</div>\n\n<p>[Login 뷰]</p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">LoginView</span><span class=\"p\">(</span><span class=\"n\">APIView</span><span class=\"p\">):</span>\n    <span class=\"s\">\"\"\" 로그인 \"\"\"</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">post</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">format</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"n\">serializer</span> <span class=\"o\">=</span> <span class=\"n\">LoginSerializer</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">serializer</span><span class=\"o\">.</span><span class=\"n\">is_valid</span><span class=\"p\">(</span><span class=\"n\">raise_exception</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">):</span>\n            <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"n\">serializer</span><span class=\"o\">.</span><span class=\"n\">validated_data</span>\n        <span class=\"k\">return</span> <span class=\"n\">Response</span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p><br />\n<img src=\"http://localhost:4000/assets/login_token_value.png\" alt=\"\" class=\"center-image\" /></p>\n\n<p align=\"center\">포스트맨으로 로그인 실행 예</p>\n<p><br /></p>\n\n<ul>\n  <li>성공적으로 인증이 이뤄졌다면, <code class=\"highlighter-rouge\">request.user</code>는 <code class=\"highlighter-rouge\">장고 유저 인스턴스</code>가 될 것이고 <code class=\"highlighter-rouge\">request.auth</code>는 <code class=\"highlighter-rouge\">rest_framework.authtoken.models.Token의 인스턴스</code>가 될 것이다.</li>\n</ul>\n\n<p><br />\n<strong>4. 클라이언트가 인증하려면 토큰 키가 인증 HTTP 헤더에 포함되어야한다. 키에는 두 문자열을 공백으로 구분하여 문자열 리터럴 “Token”을 접두어로 사용해야한다.</strong></p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>Authorization: Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b\n</code></pre>\n</div>\n\n<p><br />\n<strong>5. View에서 토큰 기반 인증을 사용하기 위해서는 Settings에 토큰 기반  인증을 사용할 것임을 선언해야 한다. 그렇지 않다면 Header에 아무리 토큰을 실어도 request.user가 AnonymousUser로 인식된다.</strong></p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>REST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework.authentication.TokenAuthentication',\n    )\n}\n</code></pre>\n</div>\n\n<p><br />\n<strong>6. 인증이 필요한 뷰 실행</strong></p>\n\n<p><img src=\"http://localhost:4000/assets/register_tutor.png\" alt=\"\" class=\"center-image\" /></p>\n\n<ul>\n  <li>헤더에 토큰을 실지 않으면 MyUser가 필요한 코드를 실행할 때, ‘MyUser matching query does not exist’ 오류를 뿜뿜한다.</li>\n  <li>토큰 인증을 기반으로 유저를 인증하는 것인데 토큰이 존재하지 않는 것이면 당연히 유저 또한 MyUser 테이블에 존재하지 않는 것이기 때문이다.</li>\n</ul>\n\n<hr />\n\n<h1 id=\"ajax로-프론트와-통신하기\">AJAX로 프론트와 통신하기</h1>\n\n<p>[login.js]</p>\n\n<div class=\"language-java highlighter-rouge\"><pre class=\"highlight\"><code> \n <span class=\"err\">$</span><span class=\"o\">(</span><span class=\"s\">\"#loginForm\"</span><span class=\"o\">).</span><span class=\"na\">submit</span><span class=\"o\">(</span><span class=\"n\">function</span><span class=\"o\">(</span><span class=\"n\">event</span><span class=\"o\">){</span>\n    <span class=\"n\">var</span> <span class=\"n\">username</span> <span class=\"o\">=</span> <span class=\"err\">$</span><span class=\"o\">(</span><span class=\"s\">\"input#username\"</span><span class=\"o\">).</span><span class=\"na\">val</span><span class=\"o\">();</span>\n    <span class=\"n\">var</span> <span class=\"n\">password</span> <span class=\"o\">=</span> <span class=\"err\">$</span><span class=\"o\">(</span><span class=\"s\">\"input#password\"</span><span class=\"o\">).</span><span class=\"na\">val</span><span class=\"o\">();</span>\n\n    <span class=\"n\">logIn</span><span class=\"o\">(</span><span class=\"n\">username</span><span class=\"o\">,</span> <span class=\"n\">password</span><span class=\"o\">);</span>\n  <span class=\"o\">})</span>\n\n  <span class=\"n\">function</span> <span class=\"nf\">logIn</span><span class=\"o\">(</span><span class=\"n\">username</span><span class=\"o\">,</span> <span class=\"n\">password</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">var</span> <span class=\"n\">token</span> <span class=\"o\">=</span> <span class=\"err\">''</span><span class=\"o\">;</span>\n    <span class=\"err\">$</span><span class=\"o\">.</span><span class=\"na\">ajax</span><span class=\"o\">({</span>\n      <span class=\"nl\">type:</span> <span class=\"s\">\"POST\"</span><span class=\"o\">,</span>\n      <span class=\"nl\">url:</span> <span class=\"s\">\"{% url 'member:api_login' %}\"</span><span class=\"o\">,</span>\n      <span class=\"nl\">data:</span> <span class=\"o\">{</span><span class=\"err\">'</span><span class=\"n\">username</span><span class=\"err\">'</span><span class=\"o\">:</span> <span class=\"n\">username</span><span class=\"o\">,</span> <span class=\"err\">'</span><span class=\"n\">password</span><span class=\"err\">'</span><span class=\"o\">:</span> <span class=\"n\">password</span><span class=\"o\">,</span> <span class=\"err\">'</span><span class=\"n\">csrfmiddlewaretoken</span><span class=\"err\">'</span><span class=\"o\">:</span> <span class=\"err\">'</span><span class=\"o\">{{</span> <span class=\"n\">csrf_token</span> <span class=\"o\">}}</span><span class=\"err\">'</span><span class=\"o\">},</span>\n      <span class=\"nl\">dataType:</span> <span class=\"s\">\"json\"</span><span class=\"o\">,</span>\n      <span class=\"nl\">success:</span> <span class=\"n\">function</span> <span class=\"o\">(</span><span class=\"n\">response</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">token</span> <span class=\"o\">=</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"na\">token</span><span class=\"o\">;</span>\n        <span class=\"n\">localStorage</span><span class=\"o\">.</span><span class=\"na\">setItem</span><span class=\"o\">(</span><span class=\"err\">'</span><span class=\"n\">token</span><span class=\"err\">'</span><span class=\"o\">,</span> <span class=\"n\">token</span><span class=\"o\">);</span>\n        <span class=\"err\">$</span><span class=\"o\">(</span><span class=\"s\">\"#result\"</span><span class=\"o\">).</span><span class=\"na\">html</span><span class=\"o\">(</span>\n          <span class=\"s\">\"{ token: \"</span> <span class=\"o\">+</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"na\">token</span> <span class=\"o\">+</span> <span class=\"s\">\" }\"</span>\n        <span class=\"o\">);</span>\n      <span class=\"o\">},</span>\n      <span class=\"nl\">error:</span> <span class=\"n\">function</span><span class=\"o\">(</span><span class=\"n\">request</span><span class=\"o\">,</span> <span class=\"n\">status</span><span class=\"o\">,</span> <span class=\"n\">error</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"err\">$</span><span class=\"o\">(</span><span class=\"s\">\"#result\"</span><span class=\"o\">).</span><span class=\"na\">html</span><span class=\"o\">(</span><span class=\"n\">error</span><span class=\"o\">);</span>\n      <span class=\"o\">}</span>\n    <span class=\"o\">});</span>\n    <span class=\"n\">event</span><span class=\"o\">.</span><span class=\"na\">preventDefault</span><span class=\"o\">();</span>\n  <span class=\"o\">}</span>\n  \n</code></pre>\n</div>\n\n<ul>\n  <li>submit을 할 경우, 폼의 value를 ‘username’, ‘password’ 변수에 각각 할당하고, 이를 인자로 logIn() 메서드를 실행한다.</li>\n</ul>\n\n<p><br />\n<img src=\"http://localhost:4000/assets/token_login.png\" alt=\"\" class=\"center-image\" /></p>\n\n<p align=\"center\">로그인 실행 후, Token이 `Local Storage`에 담겨진 것을 확인할 수 있다.</p>\n<p><br /></p>\n\n<h2 id=\"참고자료\">참고자료</h2>\n<ul>\n  <li><a href=\"http://www.django-rest-framework.org/api-guide/authentication/\">Django rest framework 공식문서 - Authentication</a></li>\n  <li><a href=\"http://behonestar.tistory.com/37\">토큰 기반 인증</a></li>\n</ul>\n"
    } ,
  
    {
      "title"    : "[Try Hello World] Level2 이상한 문자 만들기",
      "category" : "Solve Algorithm!tryhelloworld",
      "tags"     : "Alogorithm, Level2",
      "url"      : "/solve%20algorithm!/tryhelloworld/2017/09/02/tryhelloworld-level2-5.html",
      "date"     : "2017-09-02 00:00:00 +0900",
      "content"   : "<h2 id=\"이상한-문자-만들기\">이상한 문자 만들기</h2>\n<p>toWeirdCase 함수는 문자열 s를 매개변수로 입력받습니다.</p>\n\n<p>문자열 s에 각 단어의 짝수번째 인덱스 문자는 대문자로, 홀수번째 인덱스 문자는 소문자로 바꾼 문자열을 리턴하도록 함수를 완성하세요.</p>\n\n<p>예를 들어 s가 “try hello world”라면 첫 번째 단어는 “TrY”, 두 번째 단어는 “HeLlO”, 세 번째 단어는 “WoRlD”로 바꿔 “TrY HeLlO WoRlD”를 리턴하면 됩니다.</p>\n\n<p><strong>주의</strong> 문자열 전체의 짝/홀수 인덱스가 아니라, 단어(공백을 기준)별로 짝/홀수 인덱스를 판단합니다.</p>\n\n<ul>\n  <li>내 풀이</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">toWeirdCase</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n\t<span class=\"k\">for</span> <span class=\"n\">idx</span><span class=\"p\">,</span> <span class=\"n\">ele</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n\t\t<span class=\"k\">if</span> <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s\">\" \"</span><span class=\"p\">:</span>\n\t\t\t<span class=\"k\">return</span> <span class=\"n\">s</span><span class=\"p\">[:</span><span class=\"n\">idx</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"s\">\" \"</span> <span class=\"o\">+</span> <span class=\"n\">toWeirdCase</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">:])</span>\n\t\t<span class=\"k\">elif</span> <span class=\"n\">idx</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n\t\t\t<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"p\">[:</span><span class=\"n\">idx</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">:]</span>\n\t\t<span class=\"k\">else</span><span class=\"p\">:</span>\n\t\t\t<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"p\">[:</span><span class=\"n\">idx</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">:]</span>\n\t<span class=\"k\">return</span> <span class=\"n\">s</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"결과 : {}\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">toWeirdCase</span><span class=\"p\">(</span><span class=\"s\">\"try hello world\"</span><span class=\"p\">)));</span>\n</code></pre>\n</div>\n\n<ul>\n  <li>다른 사람 풀이</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">toWeirdCase</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"s\">\" \"</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">([</span><span class=\"s\">\"\"</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">([</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"n\">i</span><span class=\"o\">%</span><span class=\"mi\">2</span> <span class=\"k\">else</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">w</span><span class=\"p\">)])</span> <span class=\"k\">for</span> <span class=\"n\">w</span> <span class=\"ow\">in</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">()])</span>\n</code></pre>\n</div>\n\n<h3 id=\"소감\"><em>소감</em></h3>\n<ul>\n  <li>재귀가 편해서 재귀를 활용하려고 한다. 하지만 재귀함수와 컴프리헨션을 같이 사용하고 싶은데 그 방법은 잘 모르겠다. 이에 대해 좀 더 고민해봐야겠다.</li>\n  <li>enumerate() 메서드를 알고 있었지만 잘 사용하지는 못했다. 이번 문제를 풀고 해당 함수가 제법 유용하다는 것을 알게되었다. 자주 사용해야지.</li>\n</ul>\n"
    } ,
  
    {
      "title"    : "[Try Hello World] Level2 자연수를 뒤집어 리스트로 만들기",
      "category" : "Solve Algorithm!tryhelloworld",
      "tags"     : "Alogorithm, Level2",
      "url"      : "/solve%20algorithm!/tryhelloworld/2017/09/02/tryhelloworld-level2-4.html",
      "date"     : "2017-09-02 00:00:00 +0900",
      "content"   : "<h2 id=\"자연수를-뒤집어-리스트로-만들기\">자연수를 뒤집어 리스트로 만들기</h2>\n<p>digit_reverse함수는 양의 정수 n을 매개변수로 입력받습니다.</p>\n\n<p>n을 뒤집어 숫자 하나하나를 list로 표현해주세요.</p>\n\n<p>예를 들어 n이 12345이면 [5,4,3,2,1]을 리턴하면 됩니다.</p>\n\n<ul>\n  <li>내 풀이</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">digit_reverse</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n\t<span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">n</span> <span class=\"o\">%</span> <span class=\"mi\">10</span><span class=\"o\">**</span><span class=\"n\">i</span> <span class=\"o\">//</span> <span class=\"mi\">10</span><span class=\"o\">**</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">))</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"결과 : {}\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">digit_reverse</span><span class=\"p\">(</span><span class=\"mi\">12345</span><span class=\"p\">)));</span>\n</code></pre>\n</div>\n\n<ul>\n  <li>다른 사람 풀이</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">digit_reverse</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)][::</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n\n<h3 id=\"소감\"><em>소감</em></h3>\n<ul>\n  <li>컴프리헨션을 리스트로 받고, 또 해당 리스트를 슬라이스로 받을 수 있다는 것을 알게되었다.</li>\n</ul>\n"
    } ,
  
    {
      "title"    : "[Try Hello World] Level5 2 x n 타일링",
      "category" : "Solve Algorithm!tryhelloworld",
      "tags"     : "Alogorithm, Level5",
      "url"      : "/solve%20algorithm!/tryhelloworld/2017/09/01/tryhelloworld-level5-1.html",
      "date"     : "2017-09-01 00:00:00 +0900",
      "content"   : "<p>1x1 정사각형 2개가 붙어 있는 타일이 있습니다. 이 타일을 이용하여 총 2xN 의 보드판을 채우려고 합니다.</p>\n\n<p>타일은 가로, 세로 두 가지 방향으로 배치할 수 있습니다.</p>\n\n<p>보드판의 길이 N이 주어질 때, 2xN을 타일로 채울 수 있는 경우의 수를 반환하는 tiling 함수를 완성하세요.</p>\n\n<p>예를들어 N이 7일 경우 아래 그림이 타일을 배치할 수 있는 한 경우입니다.</p>\n\n<p><img src=\"http://localhost:4000/assets/tiles.png\" alt=\"tiles\" class=\"image-center\" /></p>\n\n<p>단, 리턴하는 숫자가 매우 커질 수도 있으므로 숫자가 5자리를 넘어간다면 맨 끝자리 5자리만 리턴하세요.</p>\n\n<p>예를 들어 N = 2일 경우 가로로 배치하는 경우와 세로로 배치하는 경우가 있을 수 있으므로 2를 반환해 주면 됩니다.</p>\n\n<p>하지만 만약 답이 123456789라면 56789만 반환해주면 됩니다. 리턴하는 숫자의 앞자리가 0일 경우 0을 제외한 숫자를 리턴하세요.</p>\n\n<p>리턴타입은 정수형이어야 합니다.</p>\n\n<ul>\n  <li>내 풀이</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">tiling</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n\t<span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\n\n\t<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n\t\t<span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"o\">+</span><span class=\"n\">b</span>\n\n\t<span class=\"n\">answer</span> <span class=\"o\">=</span> <span class=\"n\">b</span> <span class=\"o\">%</span> <span class=\"mi\">100000</span>\n\t<span class=\"k\">return</span> <span class=\"n\">answer</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">tiling</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<ul>\n  <li>다른 사람 풀이</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">math</span> <span class=\"kn\">import</span> <span class=\"n\">factorial</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">comb</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span><span class=\"n\">k</span><span class=\"p\">):</span>\n    <span class=\"n\">f</span><span class=\"o\">=</span><span class=\"n\">factorial</span>\n    <span class=\"k\">return</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span><span class=\"o\">//</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">-</span><span class=\"n\">k</span><span class=\"p\">))</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">tiling</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"n\">s</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">%</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n    <span class=\"n\">t</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">((</span><span class=\"n\">n</span><span class=\"o\">-</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n    <span class=\"n\">answer</span><span class=\"o\">=</span><span class=\"mi\">0</span>\n    <span class=\"k\">while</span> <span class=\"n\">s</span><span class=\"o\">&lt;=</span><span class=\"n\">n</span><span class=\"p\">:</span>\n        <span class=\"n\">answer</span><span class=\"o\">+=</span><span class=\"n\">comb</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"o\">+</span><span class=\"n\">t</span><span class=\"p\">,</span><span class=\"n\">s</span><span class=\"p\">)</span>\n        <span class=\"n\">s</span><span class=\"o\">+=</span><span class=\"mi\">2</span>\n        <span class=\"n\">t</span><span class=\"o\">-=</span><span class=\"mi\">1</span>\n    <span class=\"k\">return</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">answer</span><span class=\"p\">)[</span><span class=\"o\">-</span><span class=\"mi\">5</span><span class=\"p\">:])</span>\n</code></pre>\n</div>\n\n<h3 id=\"소감\"><em>소감</em></h3>\n<ul>\n  <li>그림을 그리면서 규칙을 살펴보니, 피보나치 수열이었다. 그래서 피보나지 수열 푸는 방식으로 풀었다.</li>\n  <li>알고보면 간단한 문제였는데 다른 사람의 경우 함수를 더 정의한다든지, 모듈을 임포트한다든지 여러 방법으로 접근하였다.</li>\n  <li>문과적 기질이 빛을 발휘한 문제였던 것 같다.</li>\n</ul>\n"
    } ,
  
    {
      "title"    : "[Try Hello World] Level2 하샤드수",
      "category" : "Solve Algorithm!tryhelloworld",
      "tags"     : "Alogorithm, Level2",
      "url"      : "/solve%20algorithm!/tryhelloworld/2017/09/01/tryhelloworld-level2-harshad.html",
      "date"     : "2017-09-01 00:00:00 +0900",
      "content"   : "<h2 id=\"하샤드수\">하샤드수</h2>\n<p>양의 정수 x가 하샤드 수이려면 x의 자릿수의 합으로 x가 나누어져야 합니다.</p>\n\n<p>예를들어 18의 자릿수 합은 1+8=9이고, 18은 9로 나누어 떨어지므로 18은 하샤드 수입니다.</p>\n\n<p>Harshad함수는 양의 정수 n을 매개변수로 입력받습니다. 이 n이 하샤드수인지 아닌지 판단하는 함수를 완성하세요.</p>\n\n<p>예를들어 n이 10, 12, 18이면 True를 리턴 11, 13이면 False를 리턴하면 됩니다.</p>\n\n<h3 id=\"내-풀이\">내 풀이</h3>\n\n<p>[파이썬]</p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">functools</span> <span class=\"kn\">import</span> <span class=\"nb\">reduce</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">Harshad</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">n</span> <span class=\"o\">%</span> <span class=\"nb\">reduce</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)])</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n\n<span class=\"c\"># 실행을 위한 코드입니다.</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">Harshad</span><span class=\"p\">(</span><span class=\"mi\">18</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p>[자바]</p>\n\n<div class=\"language-java highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">HarshadNumber</span><span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">isHarshad</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">num</span><span class=\"o\">){</span>\n        <span class=\"n\">String</span> <span class=\"n\">str_num</span> <span class=\"o\">=</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">(</span><span class=\"n\">num</span><span class=\"o\">);</span>\n        <span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">num_arr</span> <span class=\"o\">=</span> <span class=\"n\">str_num</span><span class=\"o\">.</span><span class=\"na\">split</span><span class=\"o\">(</span><span class=\"s\">\"\"</span><span class=\"o\">);</span>\n        <span class=\"kt\">int</span> <span class=\"n\">sum_num</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"n\">num_arr</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++){</span>\n            <span class=\"n\">sum_num</span> <span class=\"o\">+=</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">parseInt</span><span class=\"o\">(</span><span class=\"n\">num_arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]);</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">num</span> <span class=\"o\">%</span> <span class=\"n\">sum_num</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\t\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span>  <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">){</span>\n        <span class=\"n\">HarshadNumber</span> <span class=\"n\">sn</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">HarshadNumber</span><span class=\"o\">();</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">sn</span><span class=\"o\">.</span><span class=\"na\">isHarshad</span><span class=\"o\">(</span><span class=\"mi\">11</span><span class=\"o\">));</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre>\n</div>\n\n<h3 id=\"다른-사람-풀이\">다른 사람 풀이</h3>\n\n<p>[파이썬]</p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">Harshad</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">n</span> <span class=\"o\">%</span> <span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n</code></pre>\n</div>\n\n<p>[자바]</p>\n\n<div class=\"language-java highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">HarshadNumber</span><span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">isHarshad</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">num</span><span class=\"o\">){</span>\n        <span class=\"kt\">int</span> <span class=\"n\">sum</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">temp</span><span class=\"o\">=</span><span class=\"n\">num</span><span class=\"o\">;</span>\n        <span class=\"k\">do</span><span class=\"o\">{</span>\n            <span class=\"n\">sum</span><span class=\"o\">+=</span><span class=\"n\">temp</span><span class=\"o\">%</span><span class=\"mi\">10</span><span class=\"o\">;</span>\n            <span class=\"n\">temp</span><span class=\"o\">/=</span><span class=\"mi\">10</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span><span class=\"k\">while</span><span class=\"o\">(</span><span class=\"n\">temp</span><span class=\"o\">%</span><span class=\"mi\">10</span><span class=\"o\">&gt;</span><span class=\"mi\">0</span><span class=\"o\">);</span>\n            <span class=\"k\">return</span> <span class=\"n\">num</span><span class=\"o\">%</span><span class=\"n\">sum</span><span class=\"o\">==</span><span class=\"mi\">0</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span>  <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">){</span>\n        <span class=\"n\">HarshadNumber</span> <span class=\"n\">sn</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">HarshadNumber</span><span class=\"o\">();</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">sn</span><span class=\"o\">.</span><span class=\"na\">isHarshad</span><span class=\"o\">(</span><span class=\"mi\">110</span><span class=\"o\">));</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre>\n</div>\n\n<h3 id=\"느낀점\">느낀점</h3>\n\n<blockquote>\n  <p><strong>reduce()</strong> reduce(sum, [1, 2, 3, 4, 5])<br />\n<strong>sum()</strong> sum([1, 2, 3, 4, 5])</p>\n</blockquote>\n\n<p>원소의 합을 구할 때 요즘 좋다고 하는 람다를 써야할지, 내장 함수인 sum() 써야할지 아니면 성능적으로 큰 차이가 없는데 괜한 고민을 하는 건지 의문이 든다.</p>\n\n<p>자바에서 <code class=\"highlighter-rouge\">do while</code>문에 대한 쓰임을 이해할 수 있었다.</p>\n"
    } ,
  
    {
      "title"    : "[Try Hello World] Level2 JadenCase문자열 만들기",
      "category" : "Solve Algorithm!tryhelloworld",
      "tags"     : "Alogorithm, Level2",
      "url"      : "/solve%20algorithm!/tryhelloworld/2017/08/31/tryhelloworld-level2-2.html",
      "date"     : "2017-08-31 00:00:00 +0900",
      "content"   : "<h2 id=\"jadencase문자열-만들기\">JadenCase문자열 만들기</h2>\n<p>Jaden_Case함수는 문자열 s을 매개변수로 입력받습니다.</p>\n\n<p>s에 모든 단어의 첫 알파벳이 대문자이고, 그 외의 알파벳은 소문자인 문자열을 리턴하도록 함수를 완성하세요</p>\n\n<p>예를 들어 s가 “3people unFollowed me for the last week”라면 “3people Unfollowed Me For The Last Week”를 리턴하면 됩니다.</p>\n\n<ul>\n  <li>내 풀이 1</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">Jaden_Case</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n\t<span class=\"n\">li</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">()</span>\n\t<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">li</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">li</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">::]</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span>\n\t<span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">li</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n\t\t<span class=\"k\">return</span> <span class=\"n\">result</span>\n\t<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"n\">li</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"s\">\" \"</span><span class=\"p\">,</span> <span class=\"s\">\"\"</span><span class=\"p\">)</span>\n\t<span class=\"k\">return</span> <span class=\"n\">result</span> <span class=\"o\">+</span> <span class=\"s\">\" \"</span> <span class=\"o\">+</span> <span class=\"n\">Jaden_Case</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>     \n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">Jaden_Case</span><span class=\"p\">(</span><span class=\"s\">\"3people unFollowed me for the last week\"</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<ul>\n  <li>내 풀이 2</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">Jaden_Case</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"n\">test</span> <span class=\"o\">=</span> <span class=\"n\">n</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">()</span>\n    <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">test</span><span class=\"p\">:</span>\n        <span class=\"n\">answer</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"n\">answer</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">isdigit</span><span class=\"p\">():</span>\n            <span class=\"n\">answer</span> <span class=\"o\">=</span> <span class=\"n\">answer</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span>\n        <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">answer</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"s\">' '</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">Jaden_Case</span><span class=\"p\">(</span><span class=\"s\">\"3people is not sTudent\"</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<ul>\n  <li>다른 사람 풀이</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">Jaden_Case</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n    <span class=\"n\">answer</span> <span class=\"o\">=</span><span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">())):</span>\n        <span class=\"n\">answer</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">()[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">()[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()[</span><span class=\"mi\">1</span><span class=\"p\">:])</span>\n    <span class=\"k\">return</span> <span class=\"s\">\" \"</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">answer</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">Jaden_Case</span><span class=\"p\">(</span><span class=\"s\">\"3people unFollowed me for the last week\"</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<h3 id=\"소감\"><em>소감</em></h3>\n<ul>\n  <li>재귀함수에 꽂혀서 재귀를 이용해 풀어보았다. 이게 아닌데? 이게 맞는건가? 고민하면서 풀었는데, <code class=\"highlighter-rouge\">title()</code>이라는 내장 함수로 깔끔하고 신속하게 풀 수 있다는 것을 알고 굉장히 허무했었다.</li>\n  <li>하지만 title()을 쓰면, <code class=\"highlighter-rouge\">3people</code> 이 <code class=\"highlighter-rouge\">3People</code> 이 되기 때문에 문제의 취지와 맞지 않는다. 그렇기 때문에 문제에 맞추어 title()을 사용하여 다시 풀어보았다.</li>\n  <li>문제를 풀게 되면, 자연스럽게 리스트와 for문을 사용하게 되는데 파이써닉한 방법인 컴프리헨션을 잘 활용하도록 습관을 들여야겠다.</li>\n</ul>\n"
    } ,
  
    {
      "title"    : "[15장] 장고 템플릿과 Jinja2",
      "category" : "두숟갈 스터디two-scoops",
      "tags"     : "Django, Django Template, Jinja2",
      "url"      : "/%EB%91%90%EC%88%9F%EA%B0%88%20%EC%8A%A4%ED%84%B0%EB%94%94/two-scoops/2017/08/30/ch15-dtl-jinja2.html",
      "date"     : "2017-08-30 00:00:00 +0900",
      "content"   : "<h2 id=\"장고-템플릿과-jinja2\">장고 템플릿과 Jinja2</h2>\n<ul>\n  <li>장고 템플릿 시스템에서 <code class=\"highlighter-rouge\">장고 템플릿 언어(Django Template Language, DTL)</code>과 <code class=\"highlighter-rouge\">Jinja2</code>를 내장하여 지원하고 있다.</li>\n</ul>\n\n<h3 id=\"문법적-차이점\">문법적 차이점</h3>\n<ul>\n  <li>Jinja2는 DTL의 영향을 많이 받았기 때문에 문법적으로 매우 유사하다.</li>\n  <li>하지만 차이도 반드시 존재한다.</li>\n</ul>\n\n<table>\n  <thead>\n    <tr>\n      <th style=\"text-align: left\">용례</th>\n      <th style=\"text-align: left\">DTL</th>\n      <th style=\"text-align: left\">Jinja2</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td style=\"text-align: left\">메서드 호출</td>\n      <td style=\"text-align: left\">{{ user.get_info }}</td>\n      <td style=\"text-align: left\">{{ user.get_info() }}</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\">인자 필터</td>\n      <td style=\"text-align: left\">{{ toppings | join:”, “ }}</td>\n      <td style=\"text-align: left\">{{ toppings | join(“, “) }}</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\">인자 없는 루프</td>\n      <td style=\"text-align: left\">{% empty %}</td>\n      <td style=\"text-align: left\">{% else %}</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\">루프 변수</td>\n      <td style=\"text-align: left\">{{ forloop }}</td>\n      <td style=\"text-align: left\">{{ loop }}</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\">사이클</td>\n      <td style=\"text-align: left\">{% cycle “odd” “even” %}</td>\n      <td style=\"text-align: left\">{{ loop.cycle(“odd”, “even”) }}</td>\n    </tr>\n  </tbody>\n</table>\n\n<ul>\n  <li>시간이 지나면서 두 템플릿 언어는 서로 닮아가고 있으며 문법적으로 많은 공통점을 보이고 있다.</li>\n</ul>\n\n<h3 id=\"템플릿을-변경해야-할까\">템플릿을 변경해야 할까?</h3>\n<ul>\n  <li>장고 1.8 이후부터 settings.TEMPLATES 를 설정하여 특정 디렉토리의 템플릿에는 DTL을,</li>\n  <li>다른 디렉토리의 템플릿에는 Jinja2를 이용할 수 있게되었다.</li>\n  <li>따라서 DTL을 쓰는 중에 필요에 의해서 Jinja2의 장점을 이용할 수도 있고, Jinja2를 쓰는 중에 DTL을 사용할 수 있다. 즉, 다양한 템플릿 언어를 조화롭게 이용할 수 있기 때문에 변경을 고민할 필요가 없다.</li>\n</ul>\n\n<blockquote>\n  <p>하지만 템플릿 언어를 혼합해 쓰는 것은 정신적 부하를 가중시키는 위험을 초래한다. 따라서 위험을 없애기 위해 단 하나의 주템플릿 언어를 선택하여 이용하는 것을 권장한다.</p>\n</blockquote>\n\n<h3 id=\"장고-템플릿-언어dtl의-장점\">장고 템플릿 언어(DTL)의 장점</h3>\n<ul>\n  <li>이용을 위해 필요한 모든 것이 이미 장고 안에 포함되어 있고, DTL 기능이 공식 장고 문서에 훌륭하게 문서화되어 있다.</li>\n  <li>Janja2보다 더 많이 이용되면서 검증되었고 더 성숙하다.</li>\n  <li>대부분 DTL을 이용하고 있기 때문에 이를 Jinja2로 변경하려면 추가적인 작업이 필요하다.</li>\n</ul>\n\n<h3 id=\"jinja2의-장점\">Jinja2의 장점</h3>\n<ul>\n  <li>장고와 독립적으로 이용할 수 있다.</li>\n  <li>파이썬 문법에 좀 더 가깝기 때문에 문법이 직관적이다.</li>\n  <li>좀 더 명시적이고 명확하게 구성되어 있다. 예를 들면 템플릿상에서 함수 호출에 괄호가 이용된다.</li>\n  <li>일반적으로 더 빠르다. 템플릿에서 발생하는 병목 문제를 줄일 수 있다.</li>\n</ul>\n\n<hr />\n\n<h2 id=\"jinja2와-csrf\">Jinja2와 CSRF</h2>\n<ul>\n  <li>Jinja2는 DTL과는 다른 방식으로 장고의 CSRF 메커니즘에 접근한다.</li>\n  <li>Jinja2 템플릿에 CSRF를 포함시키기 위해 특별한 HTML이 있다.</li>\n</ul>\n\n<div class=\"language-html highlighter-rouge\"><pre class=\"highlight\"><code>\n<span class=\"nt\">&lt;div</span> <span class=\"na\">style=</span><span class=\"s\">\"display:none\"</span><span class=\"nt\">&gt;</span>\n\t<span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">\"hidden\"</span> <span class=\"na\">name=</span><span class=\"s\">\"csrfmiddlewaretoken\"</span> <span class=\"na\">value=</span><span class=\"s\">\"{{ csrf_token }}\"</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n\n</code></pre>\n</div>\n\n<p><a href=\"http://localhost:4000\" class=\"a-tag-deco\">CSRF</a></p>\n\n<h2 id=\"jinja2-템플릿-태그-이용하기\">Jinja2 템플릿 태그 이용하기</h2>\n<ul>\n  <li>Jinja2에서 DTL을 사용하는 것은 불가능하지만,</li>\n  <li>1.함수로 변환하기, 2.확장 프로그램(writing-jinja2-extensions)을 통한 <code class=\"highlighter-rouge\">변환</code>으로 특정 템플릿 태그 기능을 사용할 수 있다.</li>\n</ul>\n\n<h2 id=\"jinja2에서-장고-스타일-필터-이용하기\">Jinja2에서 장고 스타일 필터 이용하기</h2>\n<ul>\n  <li>일반적으로 사용해 온 <code class=\"highlighter-rouge\">장고의 기본 템플릿 필터</code>는 기본적으로 함수이기 때문에 커스텀 <code class=\"highlighter-rouge\">Jinja2 환경에 템플릿 필터를 쉽게 포함</code>시킬 수 있다.</li>\n</ul>\n\n<p>[core/jinja2.py]</p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"c\"># [...] import 생략</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">environment</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">options</span><span class=\"p\">):</span>\n\t<span class=\"c\"># jinja2에서 Environment 클래스 인스턴스화 : 이후 해당 객체를 변형하지 말자!</span>\n\t<span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">Environment</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">options</span><span class=\"p\">)</span>\n\t<span class=\"n\">env</span><span class=\"o\">.</span><span class=\"nb\">globals</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">({</span>\n\t\t<span class=\"s\">'static'</span><span class=\"p\">:</span> <span class=\"n\">staticfiles_storage</span><span class=\"o\">.</span><span class=\"n\">url</span><span class=\"p\">,</span>\n\t\t<span class=\"s\">'url'</span><span class=\"p\">:</span> <span class=\"n\">reverse</span><span class=\"p\">,</span>\n\t\t<span class=\"c\"># 장고 기본 필터 사용 지정</span>\n\t\t<span class=\"s\">'dj'</span><span class=\"p\">:</span> <span class=\"n\">defaultfilters</span>\n\t<span class=\"p\">})</span>\n\t<span class=\"k\">return</span> <span class=\"n\">env</span>\n</code></pre>\n</div>\n\n<p>[Jinja2에서 장고 템플릿 필터 사용 예시]</p>\n\n<div class=\"language-html highlighter-rouge\"><pre class=\"highlight\"><code>\n<span class=\"nt\">&lt;table&gt;&lt;tbody&gt;</span>\n{% for purchase in purchase_list %}\n\t<span class=\"nt\">&lt;tr&gt;</span>\n\t\t<span class=\"nt\">&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">\"{{ url(\"</span><span class=\"na\">purchase:detail</span><span class=\"err\">\",</span> <span class=\"na\">pk=</span><span class=\"s\">purchase.pk)</span> <span class=\"err\">}}\"</span><span class=\"nt\">&gt;</span>\n\t\t\t{{ purchase.title }}\n\t\t<span class=\"nt\">&lt;/a&gt;</span>\n\t<span class=\"nt\">&lt;/tr&gt;</span>\n\t<span class=\"nt\">&lt;tr&gt;</span>{{ dj.date(purchase.created, \"SHORT_DATE_FORMAT\") }}<span class=\"nt\">&lt;/tr&gt;</span>\n\t<span class=\"nt\">&lt;tr&gt;</span>{{ dj.floatformat(purchase.amount, 2) }}<span class=\"nt\">&lt;/tr&gt;</span>\n{% endfor %}\n<span class=\"nt\">&lt;/tbody&gt;&lt;/table&gt;</span>\n\n</code></pre>\n</div>\n\n<h2 id=\"jinja2-템플릿에서는-콘텍스트-프로세서가-호출되지-않음에-유의하자\">Jinja2 템플릿에서는 콘텍스트 프로세서가 호출되지 않음에 유의하자</h2>\n<ul>\n  <li><strong>콘텍스트 프로세서</strong> 란? 장고 템플릿을 이용할 때, settings.TEMPLATES의 context_processors 옵션에서 정의된 내장 함수의 리스트로, 요청 객체를 받아 콘텍스트에 추가될 아이템의 리스트들을 반환해 두는 것이다.</li>\n  <li>프로젝트에서 해당 콘텍스트 프로세서를 비중있게 이용하고 있지만, Jinja2 템플릿에서 이용할 경우 문제가 발생할 수 있다.</li>\n  <li>따라서 콘텍스트 프로세서를 통해 요청 객체를 변경하는 기능을 <code class=\"highlighter-rouge\">미들웨어</code>를 이용해 기능을 구현하는 방법을 구상 중이다.</li>\n</ul>\n\n<p>[advertisements/middleware.py]</p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"c\"># [...] import 생략</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">AdvertisementMiddleware</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n\t<span class=\"k\">def</span> <span class=\"nf\">process_request</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n\t\t<span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"n\">Advertisement</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"nb\">filter</span><span class=\"p\">(</span><span class=\"n\">subject</span><span class=\"o\">=</span><span class=\"s\">'ice-cream'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span>\n\t\t<span class=\"n\">ads</span> <span class=\"o\">=</span> <span class=\"n\">Advertisement</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"nb\">filter</span><span class=\"p\">(</span><span class=\"n\">subjects</span><span class=\"o\">=</span><span class=\"s\">'ice-cream'</span><span class=\"p\">)</span>\n\t\t\n\t\t<span class=\"c\"># 콘텍스트를 요청 객체에 추가한다.</span>\n\t\t<span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"s\">'context'</span><span class=\"p\">):</span>\n\t\t\t<span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\t\t<span class=\"c\"># 콘텍스트를 오버라이딩하지 않고 새로 만든다.</span>\n\t\t<span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">({</span>\n\t\t\t<span class=\"s\">'ad'</span><span class=\"p\">:</span> <span class=\"n\">ads</span><span class=\"p\">[</span><span class=\"n\">random</span><span class=\"p\">,</span><span class=\"n\">randrange</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">count</span><span class=\"p\">)]</span>\n\t\t<span class=\"p\">})</span>\n</code></pre>\n</div>\n\n<p>[미들웨어를 이용해 구현한 콘텍스트를 템플릿에 사용]</p>\n\n<div class=\"language-html highlighter-rouge\"><pre class=\"highlight\"><code>\n{% set ctx = request.context %}\n<span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"ice-cream-advertisement\"</span><span class=\"nt\">&gt;</span>\n\t<span class=\"nt\">&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">\"{{ ctx.ad.url }}\"</span><span class=\"nt\">&gt;</span>\n\t\t<span class=\"nt\">&lt;img</span> <span class=\"na\">src=</span><span class=\"s\">\"stx.ad.image.url\"</span> <span class=\"nt\">/&gt;</span>\n\t<span class=\"nt\">&lt;/a&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n\n</code></pre>\n</div>\n"
    } ,
  
    {
      "title"    : "자바스크립트에 미디어쿼리를 사용하는 법, matchMedia()",
      "category" : "JavaScriptjavascript",
      "tags"     : "JavaScript, CSS",
      "url"      : "/javascript/2017/08/29/matchMedia.html",
      "date"     : "2017-08-29 00:00:00 +0900",
      "content"   : "<blockquote>\n  <p>웹사이트를 반응형으로 만들기위해서 <strong>CSS 미디어쿼리</strong> 를 사용해야 하는데, CSS 미디어쿼리는 다양한 크기의 디바이스가 존재하는 상황에서도 모두 적절한 화면을 제공하게 해준다.</p>\n</blockquote>\n\n<ul>\n  <li>oo 사이즈에서는 A 자바스크립트가 적용돼야하지만 xx 사이즈에서도 동일한 자바스크립트가 적용될 경우, 화면이 굉장히 부자연스러워질 수 있다.</li>\n  <li>내 블로그를 예로 들자면, <code class=\"highlighter-rouge\">사이드바</code>가 화면(15인치 풀스크린)에 나타나면 그만큼 본문이 옆으로 밀리고, <code class=\"highlighter-rouge\">사이드바</code>가 사라지면 영역이 본래 크기로 돌아가게 하기 위해서 자바스크립트를 사용했다.</li>\n  <li>화면이 작아질 경우, <code class=\"highlighter-rouge\">사이드바</code>(좌우)가 <code class=\"highlighter-rouge\">드롭다운 형태</code>(상하)로 바뀌게 되는데, 위아래로 메뉴가 이동할 때마다 화면이 좌우로도 움직이는 문제가 발생,</li>\n  <li>그 까닭은 자바스크립트를 화면이 클 때, 작을 때의 분기처리를 하지않았기 때문이었다.</li>\n  <li>그렇다면 자바스크립트는 @media를 어떻게 쓰는걸까?</li>\n</ul>\n\n<h3 id=\"javascript에도-css-미디어쿼리를-처리할-수-있는-matchmedia-함수가-존재한다\">JavaScript에도 CSS 미디어쿼리를 처리할 수 있는 matchMedia 함수가 존재한다.</h3>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>var m = matchMedia(\"CSS 미디어쿼리\");\n</code></pre>\n</div>\n\n<p>위와 같이 CSS에서 사용하는 미디어쿼리문을 그대로 사용할 수 있다.</p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>m.media // \"CSS 미디어쿼리\"\nm.matches // true\n</code></pre>\n</div>\n\n<ul>\n  <li><code class=\"highlighter-rouge\">matchMedia()</code> 는 <strong>MediaQueryList</strong> 를 반환하는데 이 객체는 <code class=\"highlighter-rouge\">media</code> 와 <code class=\"highlighter-rouge\">metches</code> 라는 두 프로퍼티를 갖고있다.</li>\n  <li><code class=\"highlighter-rouge\">media</code> 는 미디어쿼리 문자열을 반환하고, <code class=\"highlighter-rouge\">matcheds</code> 는 현재 화면이 미디어쿼리 범위에 들어가면 <code class=\"highlighter-rouge\">true</code> 를 반환한다.</li>\n</ul>\n\n<p>[예제]</p>\n\n<div class=\"language-java highlighter-rouge\"><pre class=\"highlight\"><code>\n<span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">matchMedia</span><span class=\"o\">(</span><span class=\"s\">\"(max-width: 768px)\"</span><span class=\"o\">).</span><span class=\"na\">matches</span><span class=\"o\">){</span>\n  <span class=\"err\">$</span><span class=\"o\">(</span><span class=\"err\">'</span><span class=\"o\">.</span><span class=\"na\">fa</span><span class=\"o\">-</span><span class=\"n\">bars</span><span class=\"err\">'</span><span class=\"o\">).</span><span class=\"na\">click</span><span class=\"o\">(</span><span class=\"n\">function</span> <span class=\"o\">()</span> <span class=\"o\">{</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"err\">$</span><span class=\"o\">(</span><span class=\"err\">'#</span><span class=\"n\">sidebar</span> <span class=\"o\">&gt;</span> <span class=\"n\">ul</span><span class=\"err\">'</span><span class=\"o\">).</span><span class=\"na\">is</span><span class=\"o\">(</span><span class=\"s\">\":visible\"</span><span class=\"o\">)</span> <span class=\"o\">===</span> <span class=\"kc\">true</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"err\">$</span><span class=\"o\">(</span><span class=\"err\">'#</span><span class=\"n\">sidebar</span><span class=\"err\">'</span><span class=\"o\">).</span><span class=\"na\">css</span><span class=\"o\">({</span>\n      <span class=\"o\">});</span>\n      <span class=\"err\">$</span><span class=\"o\">(</span><span class=\"err\">'#</span><span class=\"n\">sidebar</span> <span class=\"o\">&gt;</span> <span class=\"n\">ul</span><span class=\"err\">'</span><span class=\"o\">).</span><span class=\"na\">hide</span><span class=\"o\">();</span>\n      <span class=\"err\">$</span><span class=\"o\">(</span><span class=\"s\">\"#container\"</span><span class=\"o\">).</span><span class=\"na\">addClass</span><span class=\"o\">(</span><span class=\"s\">\"sidebar-closed\"</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n      <span class=\"err\">$</span><span class=\"o\">(</span><span class=\"err\">'#</span><span class=\"n\">sidebar</span> <span class=\"o\">&gt;</span> <span class=\"n\">ul</span><span class=\"err\">'</span><span class=\"o\">).</span><span class=\"na\">show</span><span class=\"o\">();</span>\n      <span class=\"err\">$</span><span class=\"o\">(</span><span class=\"err\">'#</span><span class=\"n\">sidebar</span><span class=\"err\">'</span><span class=\"o\">).</span><span class=\"na\">css</span><span class=\"o\">({</span>\n      <span class=\"o\">});</span>\n      <span class=\"err\">$</span><span class=\"o\">(</span><span class=\"s\">\"#container\"</span><span class=\"o\">).</span><span class=\"na\">removeClass</span><span class=\"o\">(</span><span class=\"s\">\"sidebar-closed\"</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">});</span>\n<span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n  <span class=\"err\">$</span><span class=\"o\">(</span><span class=\"err\">'</span><span class=\"o\">.</span><span class=\"na\">fa</span><span class=\"o\">-</span><span class=\"n\">bars</span><span class=\"err\">'</span><span class=\"o\">).</span><span class=\"na\">click</span><span class=\"o\">(</span><span class=\"n\">function</span> <span class=\"o\">()</span> <span class=\"o\">{</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"err\">$</span><span class=\"o\">(</span><span class=\"err\">'#</span><span class=\"n\">sidebar</span> <span class=\"o\">&gt;</span> <span class=\"n\">ul</span><span class=\"err\">'</span><span class=\"o\">).</span><span class=\"na\">is</span><span class=\"o\">(</span><span class=\"s\">\":visible\"</span><span class=\"o\">)</span> <span class=\"o\">===</span> <span class=\"kc\">true</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"err\">$</span><span class=\"o\">(</span><span class=\"err\">'#</span><span class=\"n\">sidebar</span><span class=\"err\">'</span><span class=\"o\">).</span><span class=\"na\">css</span><span class=\"o\">({</span> <span class=\"c1\">// 사이드바가 없을 때</span>\n          <span class=\"err\">'</span><span class=\"n\">margin</span><span class=\"o\">-</span><span class=\"n\">left</span><span class=\"err\">'</span><span class=\"o\">:</span> <span class=\"err\">'</span><span class=\"o\">-</span><span class=\"mi\">210</span><span class=\"n\">px</span><span class=\"err\">'</span><span class=\"o\">,</span>\n          <span class=\"err\">'</span><span class=\"n\">transition</span><span class=\"err\">'</span><span class=\"o\">:</span> <span class=\"err\">'</span><span class=\"mf\">0.5</span><span class=\"n\">s</span><span class=\"err\">'</span>\n      <span class=\"o\">});</span>\n      <span class=\"err\">$</span><span class=\"o\">(</span><span class=\"err\">'#</span><span class=\"n\">content</span><span class=\"err\">'</span><span class=\"o\">).</span><span class=\"na\">css</span><span class=\"o\">({</span>\n        <span class=\"err\">'</span><span class=\"n\">margin</span><span class=\"o\">-</span><span class=\"n\">left</span><span class=\"err\">'</span><span class=\"o\">:</span> <span class=\"err\">'</span><span class=\"mi\">10</span><span class=\"n\">px</span><span class=\"err\">'</span><span class=\"o\">,</span>\n        <span class=\"err\">'</span><span class=\"n\">width</span><span class=\"err\">'</span><span class=\"o\">:</span> <span class=\"err\">'</span><span class=\"mf\">69.5</span><span class=\"o\">%</span><span class=\"err\">'</span><span class=\"o\">,</span>\n        <span class=\"err\">'</span><span class=\"n\">transition</span><span class=\"err\">'</span><span class=\"o\">:</span> <span class=\"err\">'</span><span class=\"mf\">0.5</span><span class=\"n\">s</span><span class=\"err\">'</span>\n      <span class=\"o\">});</span>\n      <span class=\"err\">$</span><span class=\"o\">(</span><span class=\"err\">'#</span><span class=\"n\">widget</span><span class=\"err\">'</span><span class=\"o\">).</span><span class=\"na\">css</span><span class=\"o\">({</span>\n        <span class=\"err\">'</span><span class=\"n\">width</span><span class=\"err\">'</span><span class=\"o\">:</span> <span class=\"err\">'</span><span class=\"mi\">29</span><span class=\"o\">%</span><span class=\"err\">'</span>\n      <span class=\"o\">});</span>\n      <span class=\"err\">$</span><span class=\"o\">(</span><span class=\"err\">'#</span><span class=\"n\">sidebar</span> <span class=\"o\">&gt;</span> <span class=\"n\">ul</span><span class=\"err\">'</span><span class=\"o\">).</span><span class=\"na\">hide</span><span class=\"o\">();</span>\n      <span class=\"err\">$</span><span class=\"o\">(</span><span class=\"s\">\"#container\"</span><span class=\"o\">).</span><span class=\"na\">addClass</span><span class=\"o\">(</span><span class=\"s\">\"sidebar-closed\"</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n      <span class=\"err\">$</span><span class=\"o\">(</span><span class=\"err\">'#</span><span class=\"n\">sidebar</span> <span class=\"o\">&gt;</span> <span class=\"n\">ul</span><span class=\"err\">'</span><span class=\"o\">).</span><span class=\"na\">show</span><span class=\"o\">();</span>\n      <span class=\"err\">$</span><span class=\"o\">(</span><span class=\"err\">'#</span><span class=\"n\">sidebar</span><span class=\"err\">'</span><span class=\"o\">).</span><span class=\"na\">css</span><span class=\"o\">({</span>\n          <span class=\"err\">'</span><span class=\"n\">margin</span><span class=\"o\">-</span><span class=\"n\">left</span><span class=\"err\">'</span><span class=\"o\">:</span> <span class=\"sc\">'0'</span><span class=\"o\">,</span>\n          <span class=\"err\">'</span><span class=\"n\">transition</span><span class=\"err\">'</span><span class=\"o\">:</span> <span class=\"err\">'</span><span class=\"mf\">0.5</span><span class=\"n\">s</span><span class=\"err\">'</span>\n      <span class=\"o\">});</span>\n      <span class=\"err\">$</span><span class=\"o\">(</span><span class=\"err\">'#</span><span class=\"n\">content</span><span class=\"err\">'</span><span class=\"o\">).</span><span class=\"na\">css</span><span class=\"o\">({</span>\n        <span class=\"err\">'</span><span class=\"n\">margin</span><span class=\"o\">-</span><span class=\"n\">left</span><span class=\"err\">'</span><span class=\"o\">:</span> <span class=\"err\">'</span><span class=\"mi\">220</span><span class=\"n\">px</span><span class=\"err\">'</span><span class=\"o\">,</span>\n        <span class=\"err\">'</span><span class=\"n\">width</span><span class=\"err\">'</span><span class=\"o\">:</span> <span class=\"err\">'</span><span class=\"mi\">59</span><span class=\"o\">%</span><span class=\"err\">'</span><span class=\"o\">,</span>\n        <span class=\"err\">'</span><span class=\"n\">transition</span><span class=\"err\">'</span><span class=\"o\">:</span> <span class=\"err\">'</span><span class=\"mf\">0.5</span><span class=\"n\">s</span><span class=\"err\">'</span>\n      <span class=\"o\">});</span>\n      <span class=\"err\">$</span><span class=\"o\">(</span><span class=\"err\">'#</span><span class=\"n\">widget</span><span class=\"err\">'</span><span class=\"o\">).</span><span class=\"na\">css</span><span class=\"o\">({</span>\n        <span class=\"err\">'</span><span class=\"n\">width</span><span class=\"err\">'</span><span class=\"o\">:</span> <span class=\"err\">'</span><span class=\"mi\">25</span><span class=\"o\">%</span><span class=\"err\">'</span>\n      <span class=\"o\">});</span>\n      <span class=\"err\">$</span><span class=\"o\">(</span><span class=\"s\">\"#container\"</span><span class=\"o\">).</span><span class=\"na\">removeClass</span><span class=\"o\">(</span><span class=\"s\">\"sidebar-closed\"</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">});</span>\n<span class=\"o\">}</span>\n\n</code></pre>\n</div>\n"
    } ,
  
    {
      "title"    : "[12장] 폼 패턴들",
      "category" : "두숟갈 스터디two-scoops",
      "tags"     : "Django",
      "url"      : "/%EB%91%90%EC%88%9F%EA%B0%88%20%EC%8A%A4%ED%84%B0%EB%94%94/two-scoops/2017/08/23/ch12-django-form-patterns.html",
      "date"     : "2017-08-23 00:00:00 +0900",
      "content"   : "<h2 id=\"패턴-1-간단한-모델폼과-기본-유효성-검사기\">패턴 1: 간단한 모델폼과 기본 유효성 검사기</h2>\n\n<h3 id=\"제네릭-뷰\">제네릭 뷰</h3>\n<ul>\n  <li>뷰에서 모델에 기반을 둔 ModelForm 을 자동 생성한다.</li>\n  <li>생성된 ModelForm 이 모델의 기본 필드 유효성 검사기를 이용하게 된다.</li>\n</ul>\n\n<h3 id=\"유효성-검사기\">유효성 검사기</h3>\n\n<p>[core/validators.py]</p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.core.exceptions</span> <span class=\"kn\">import</span> <span class=\"n\">ValidationError</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">validate_tasty</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">):</span>\n    <span class=\"s\">\"\"\" 단어가 'Tasty'로 시작되지 않으면 ValidationError 발생 \"\"\"</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s\">'Tasty'</span><span class=\"p\">):</span>\n        <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"s\">'Must start with Tasty'</span>\n        <span class=\"k\">raise</span> <span class=\"n\">ValidationError</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<h3 id=\"모델-상속model-inheritance\">모델 상속(Model Inheritance)</h3>\n<ul>\n  <li>Abstract Base Classes</li>\n  <li>Multi-table Inheritance</li>\n  <li>Proxy Model</li>\n</ul>\n\n<h3 id=\"abstract-base-classes\">Abstract Base Classes</h3>\n<ul>\n  <li>가장 특별하지 않은 상속 방법</li>\n</ul>\n\n<p>[config/models.py]</p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">.validators</span> <span class=\"kn\">import</span> <span class=\"n\">validate_tasty</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">TastyTitleAbstractModel</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span>\n        <span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">255</span><span class=\"p\">,</span>\n        <span class=\"n\">validators</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">validate_tasty</span><span class=\"p\">]</span>\n    <span class=\"p\">)</span>\n\n\t<span class=\"c\"># TastyTitleAbstractModel 을 추상화 모델로 만들어 준다.</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">abstract</span> <span class=\"o\">=</span> <span class=\"bp\">True</span>\n</code></pre>\n</div>\n\n<ul>\n  <li>부모 모델인 TastyTitleAbstractModel 이 실제로 또는 물리적으로 존재하지 않는 가상 클래스가 된다.</li>\n  <li>자식 모델들은 부모 모델의 필드와 속성 함수들을 다 물려받아 실체가 있는 DB 테이블이 된다.</li>\n  <li>즉, 자식 모델들이 부모 모델 없이 독립적인 DB 테이블로 존재하며, 자식과 부모의 상속 관계는 실재하지 않는 것이 된다.</li>\n  <li>공통된 필드가 많이 있는 모델 클래스들이 있을 때 유용하다.</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">core.models</span> <span class=\"kn\">import</span> <span class=\"n\">TastyTitleAbstractModel</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Cake</span><span class=\"p\">(</span><span class=\"n\">TastyTitleAbstractModel</span><span class=\"p\">):</span>\n    <span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">24</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<ul>\n  <li>TastyTitleAbstractModel 클래스를 상속받는 모델들은 <code class=\"highlighter-rouge\">title</code> 이 ‘Tasty’로 시작되지 않을 경우 유효성 검사 에러를 발생시킨다.</li>\n</ul>\n\n<p><img src=\"http://localhost:4000/assets/title_error.png\" alt=\"title-error\" class=\"center-image\" /></p>\n\n<hr />\n\n<h2 id=\"패턴-2-모델폼에서-커스텀-폼-필드-유효성-검사기-이용\">패턴 2: 모델폼에서 커스텀 폼 필드 유효성 검사기 이용</h2>\n\n<p>[flavors/forms.py]</p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">CakeForm</span><span class=\"p\">(</span><span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">ModelForm</span><span class=\"p\">):</span>\n    <span class=\"s\">\"\"\" 커스텀 폼 \"\"\"</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">CakeForm</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">__init__</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fields</span><span class=\"p\">[</span><span class=\"s\">\"title\"</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">vlidators</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">validate_tasty</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fields</span><span class=\"p\">[</span><span class=\"s\">\"color\"</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">vlidators</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">validate_tasty</span><span class=\"p\">)</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Cake</span>\n</code></pre>\n</div>\n\n<p>[flavors/views.py]</p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">CakeActionMixin</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Cake</span>\n    <span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n        <span class=\"s\">'title'</span><span class=\"p\">,</span>\n        <span class=\"s\">'color'</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">success_msg</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">NotImplemented</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">form_valid</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">form</span><span class=\"p\">):</span>\n        <span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">success_msg</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">CakeActionMixin</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">form_valid</span><span class=\"p\">(</span><span class=\"n\">form</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">CakeCreateView</span><span class=\"p\">(</span><span class=\"n\">LoginRequiredMixin</span><span class=\"p\">,</span> <span class=\"n\">CakeActionMixin</span><span class=\"p\">,</span> <span class=\"n\">CreateView</span><span class=\"p\">):</span>\n    <span class=\"n\">success_msg</span> <span class=\"o\">=</span> <span class=\"s\">'created'</span>\n    <span class=\"n\">form_class</span> <span class=\"o\">=</span> <span class=\"n\">CakeForm</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">CakeUpdateView</span><span class=\"p\">(</span><span class=\"n\">LoginRequiredMixin</span><span class=\"p\">,</span> <span class=\"n\">UpdateView</span><span class=\"p\">):</span>\n    <span class=\"n\">success_msg</span> <span class=\"o\">=</span> <span class=\"s\">'updated'</span>\n    <span class=\"n\">form_class</span> <span class=\"o\">=</span> <span class=\"n\">CakeForm</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">CakeDetailView</span><span class=\"p\">(</span><span class=\"n\">DetailView</span><span class=\"p\">):</span>\n    <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Cake</span>\n</code></pre>\n</div>\n\n<ul>\n  <li>CakeCreateView, CakeUpdateView 에서 입력된 데이터 유효성 검사를 위해 CakeForm 이용</li>\n  <li>패턴1, 2: validate_tasty() 코드를 변경하지 않고 이용할 수 있다. 해당 코드를 새로운 곳에 임포트하는 것만으로 바로 이용할 수 있다.</li>\n</ul>\n\n<hr />\n\n<h2 id=\"패턴-3-유효성-검사의-클린-상태-오버라이딩-하기\">패턴 3: 유효성 검사의 클린 상태 오버라이딩 하기</h2>\n<ul>\n  <li>다중 필드에 대한 유효성 검사</li>\n  <li>이미 유효성 검사가 끝난 데이터베이스의 데이터가 포함된 유효성검사</li>\n  <li>커스텀 로직으로 clean() 또는 clean_<field name=\"\">() 을 오버라이딩 할 수 있는 최적의 경우</field></li>\n</ul>\n\n<h4 id=\"어째서-유효성-검사에-또-한-번의-유효성-검사를-거치는가\">어째서 유효성 검사에 또 한 번의 유효성 검사를 거치는가?</h4>\n<ul>\n  <li>clean() 메서드는 두 개 혹은 그 이상의 필드들에 대해 서로 간의 유효성 검사가 가능하다.</li>\n  <li>이미 유효성 검사를 일부 마친 데이터에 대해 불필요한 데이터베이스 연동을 줄일 수 있다.</li>\n</ul>\n\n<hr />\n\n<h2 id=\"패턴-4-폼-필드-해킹하기두-개의-cbv-두-개의-폼-한-개의-모델\">패턴 4: 폼 필드 해킹하기(두 개의 CBV, 두 개의 폼, 한 개의 모델)</h2>\n<ul>\n  <li>나중에 입력할 데이터를 위해 <code class=\"highlighter-rouge\">blank=True</code>가 명시돼있는 필드를 포함하여 레코드를 생성하는 경우가 있다.</li>\n</ul>\n\n<h4 id=\"myuser-model\">MyUser Model</h4>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">MyUser</span><span class=\"p\">(</span><span class=\"n\">AbstractUser</span><span class=\"p\">):</span>\n\t<span class=\"n\">my_photo</span> <span class=\"o\">=</span> <span class=\"n\">CustomImageField</span><span class=\"p\">(</span>\n        <span class=\"n\">upload_to</span><span class=\"o\">=</span><span class=\"s\">'user/</span><span class=\"si\">%</span><span class=\"s\">Y/</span><span class=\"si\">%</span><span class=\"s\">m/</span><span class=\"si\">%</span><span class=\"s\">d'</span><span class=\"p\">,</span>\n        <span class=\"n\">blank</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n\t<span class=\"n\">email</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">EmailField</span><span class=\"p\">(</span>\n        <span class=\"n\">blank</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n\t<span class=\"n\">nickname</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span>\n        <span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">24</span><span class=\"p\">,</span>\n        <span class=\"n\">blank</span><span class=\"o\">=</span><span class=\"bp\">True</span>\n    <span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<ul>\n  <li>ModelForm 에서 사용자가 기본으로 username, password 필드를 입력해야하지만,</li>\n  <li>my_photo, email, nickname 필드는 입력하지 않아도 되도록 구성되어 있다.</li>\n  <li>사용자가 처음 username, password 필드만 입력한 상태로 이용하는 데 문제가 없지만,</li>\n  <li>나중에 사용자가 튜터 등록할 때, my_photo, email, nickname 필드를 추가적으로 업데이트하는 것이 가능하도록 구성한 것이다.</li>\n</ul>\n\n<h4 id=\"tutorregister-form\">TutorRegister Form</h4>\n\n<p>[나쁜 예제] - 따라하지 말 것! 모델 필드 정의를 반복해서 이용</p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">TutorRegisterForm</span><span class=\"p\">(</span><span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">ModelForm</span><span class=\"p\">):</span>\n\t<span class=\"n\">my_photo</span> <span class=\"o\">=</span> <span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">ImageField</span><span class=\"p\">(</span><span class=\"n\">required</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n\t<span class=\"n\">email</span> <span class=\"o\">=</span> <span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">required</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n\t<span class=\"n\">nickname</span> <span class=\"o\">=</span> <span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">required</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n\n\t<span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n\t\t<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">MyUser</span>\n</code></pre>\n</div>\n\n<p>[좋은 예제] - ModelForm __init__() 메서드에서 새로운 속성을 적용</p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">TutorRegisterForm</span><span class=\"p\">(</span><span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">ModelForm</span><span class=\"p\">):</span>\n\t<span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n\t\t<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">MyUser</span>\n\n\t<span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n\t\t<span class=\"c\"># 필드 오버로드 전 원래 __init__ 메서드 호출</span>\n\t\t<span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">TutorRegisterForm</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">__init__</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\t\t<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fields</span><span class=\"p\">[</span><span class=\"s\">\"my_photo\"</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">required</span> <span class=\"o\">=</span> <span class=\"bp\">True</span>\n\t\t<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fields</span><span class=\"p\">[</span><span class=\"s\">\"email\"</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">required</span> <span class=\"o\">=</span> <span class=\"bp\">True</span>\n\t\t<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fields</span><span class=\"p\">[</span><span class=\"s\">\"nickname\"</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">required</span> <span class=\"o\">=</span> <span class=\"bp\">True</span>\n</code></pre>\n</div>\n\n<h4 id=\"상속을-통해-코드-줄이기\">상속을 통해 코드 줄이기</h4>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">SignUpForm</span><span class=\"p\">(</span><span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">ModelForm</span><span class=\"p\">):</span>\n\t<span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n\t\t<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">MyUser</span>\n\t\t<span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s\">'username'</span><span class=\"p\">,</span> <span class=\"s\">'password'</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">TutorRegisterForm</span><span class=\"p\">(</span><span class=\"n\">SignUpForm</span><span class=\"p\">):</span>\n\t<span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n\t\t<span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">TutorRegisterForm</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">__init__</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\t\t<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fields</span><span class=\"p\">[</span><span class=\"s\">\"my_photo\"</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">required</span> <span class=\"o\">=</span> <span class=\"bp\">True</span>\n\t\t<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fields</span><span class=\"p\">[</span><span class=\"s\">\"email\"</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">required</span> <span class=\"o\">=</span> <span class=\"bp\">True</span>\n\t\t<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fields</span><span class=\"p\">[</span><span class=\"s\">\"nickname\"</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">required</span> <span class=\"o\">=</span> <span class=\"bp\">True</span>\n\n\t<span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">(</span><span class=\"n\">SignUpForm</span><span class=\"o\">.</span><span class=\"n\">Meta</span><span class=\"p\">):</span>\n\t\t<span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s\">'username'</span><span class=\"p\">,</span> <span class=\"s\">'password'</span><span class=\"p\">,</span> <span class=\"s\">'my_photo'</span><span class=\"p\">,</span> <span class=\"s\">'email'</span><span class=\"p\">,</span> <span class=\"s\">'nickname'</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<h4 id=\"폼-클래스를-이용한-뷰\">폼 클래스를 이용한 뷰</h4>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">SignUpView</span><span class=\"p\">(</span><span class=\"n\">CreateView</span><span class=\"p\">):</span>\n\t<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">MyUser</span>\n\t<span class=\"n\">form_class</span> <span class=\"o\">=</span> <span class=\"n\">SignUpForm</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">TutorRegisterView</span><span class=\"p\">(</span><span class=\"n\">UpdateView</span><span class=\"p\">):</span>\n\t<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">MyUser</span>\n\t<span class=\"n\">form_class</span> <span class=\"o\">=</span> <span class=\"n\">TutorRegisterForm</span>\n</code></pre>\n</div>\n"
    } ,
  
    {
      "title"    : "[10장] 클래스 기반 뷰",
      "category" : "두숟갈 스터디two-scoops",
      "tags"     : "Django",
      "url"      : "/%EB%91%90%EC%88%9F%EA%B0%88%20%EC%8A%A4%ED%84%B0%EB%94%94/two-scoops/2017/08/09/ch10-class-based-view.html",
      "date"     : "2017-08-09 00:00:00 +0900",
      "content"   : "<h2 id=\"장고의-뷰\">장고의 뷰</h2>\n<ul>\n  <li>장고의 뷰는 요청 객체를 받고 응답 객체를 반환하는 내장 함수이다.</li>\n  <li><code class=\"highlighter-rouge\">함수 기반 뷰</code>는 뷰 함수 자체가 내장 함수이고,</li>\n  <li><code class=\"highlighter-rouge\">클래스 기반 뷰</code>는 뷰 클래스가 내장 함수를 반환하는 as_view() 클래스 메서드를 제공한다.</li>\n  <li>요즘 대부분의 웹 프로젝트에서 제네릭 클래스 기반 뷰(GCBV)를 이용하여 장고의 장점을 최대한 살리고 있다.</li>\n</ul>\n\n<h3 id=\"클래스-기반-뷰를-이용할-때-가이드-라인\">클래스 기반 뷰를 이용할 때 가이드 라인</h3>\n<ul>\n  <li>뷰 코드 양은 적으면 적을수록 좋다. 즉, 뷰는 <code class=\"highlighter-rouge\">간단명료</code>해야 한다.</li>\n  <li>뷰 안에서 같은 코드를 반복적으로 이용하지 말자.</li>\n  <li><code class=\"highlighter-rouge\">뷰</code>는 <code class=\"highlighter-rouge\">프레젠테이션 로직</code>에서 관리하도록, <code class=\"highlighter-rouge\">비즈니스 로직</code>은 <code class=\"highlighter-rouge\">모델</code>에서 처리하자.</li>\n  <li>400, 404, 500 에러 핸들링에 클래스 기반 뷰는 이용하지 않는다.</li>\n</ul>\n\n<h4 id=\"프레젠테이션-로직과-비즈니스-로직\">프레젠테이션 로직과 비즈니스 로직</h4>\n<ul>\n  <li>프레젠테에션 로직: 말 그대로 보여주기 위한 로직, 화면상의 디자인 구성을 의한 로직을 일컫는다.</li>\n  <li>비즈니스 로직: 어떤 값을 얻기 위해 데이터의 처리를 수행하는 로직을 일컫는다.</li>\n</ul>\n\n<blockquote>\n  <p><strong>궁금한 점:</strong> 109p를 보면, 장고의 기본형에서 제네릭 클래스 기반 뷰를 위한 주요 믹스인이 빠져있다고 돼있습니다. 그 중에 LoginRequiredMixin이 있는데요, 하지만 장고 최신 버전에서는 장고 기본형에서 LoginRequiredMixin을 제공해줍니다. 이 책이 장고 구버전을 토대로 작성돼서 그런건지, 제네릭 클래스의 경우 장고 기본형에서 제공해주는 LoginRequiredMixin과 호환되지 않는 것인지 궁금합니다.</p>\n</blockquote>\n\n<blockquote>\n  <p><strong>➜</strong> 최신버전에서 제공해주는 장고 기본형 LoginRequiredMixin은 모듈 braces의 LoginRequiredMixin을 그대로 가져온 것입니다.</p>\n</blockquote>\n\n<hr />\n\n<h2 id=\"클래스-기반-뷰-ღෆ-믹스인\">클래스 기반 뷰 ღෆ 믹스인</h2>\n<ul>\n  <li>믹스인이란 실체화(인스턴스화)된 클래스가 아니라 상속해 줄 기능을 제공하는 클래스를 의미한다.</li>\n  <li>다중 상속을 해야 할 때, 믹스인을 쓰면 클래스에 더 나은 기능과 역할을 제공한다.</li>\n</ul>\n\n<h4 id=\"믹스인을-이용해서-뷰-클래스를-제작할-때-상속에-관한-규칙\">믹스인을 이용해서 뷰 클래스를 제작할 때, 상속에 관한 규칙</h4>\n<ol>\n  <li>장고가 제공하는 <code class=\"highlighter-rouge\">기본 뷰</code>는 항상 <code class=\"highlighter-rouge\">오른쪽</code>으로 진행한다</li>\n  <li><code class=\"highlighter-rouge\">믹스인</code>은 기본 뷰에서부터 <code class=\"highlighter-rouge\">왼쪽</code>으로 진행한다</li>\n  <li>믹스인은 파이썬의 <code class=\"highlighter-rouge\">기본 객체 타입을 상속</code>해야한다</li>\n</ol>\n\n<hr />\n\n<h2 id=\"gcbv를-언제-사용해야할까\">GCBV를 언제 사용해야할까?</h2>\n<p>- <strong>View :</strong> 어디에서든 이용 가능한 기본 뷰 <br />\n- <strong>RedirectView :</strong> 사용자를 다른 URL로 리다이렉트 <br />\n- <strong>TemplateView :</strong> 장고 HTML 템플릿을 보여줄 때 <br />\n- <strong>ListView :</strong> 객체 목록 <br />\n- <strong>DetailView :</strong> 객체를 보여줄 때 <br />\n- <strong>FormView :</strong> 폼 전송 <br />\n- <strong>CreateView :</strong> 객체를 만들 때 <br />\n- <strong>UpdatedView :</strong> 객체를 업데이트할 때 <br />\n- <strong>DeleteView :</strong> 객체를 삭제 <br /></p>\n\n<h3 id=\"인증된-사용자에게만-장고-cbv-혹은-gcbv-접근-가능하게-하기\">인증된 사용자에게만 장고 CBV 혹은 GCBV 접근 가능하게 하기</h3>\n<ul>\n  <li>django.contrib.auth.decorators.login_required <strong>데코레이터</strong>를 사용해도 되지만,</li>\n  <li>대부분의 예제들이 정형화된 틀에 박혀 있는 문제점이 있다.</li>\n  <li>데코레이터를 사용하지 않는 다른 방법으로는 <strong>django-brace</strong>에서 <strong>LoginRequiredMixin</strong>을 사용하는 것이다.</li>\n</ul>\n\n<p>[데코레이터 사용]</p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.views.generic</span> <span class=\"kn\">import</span> <span class=\"n\">CreateView</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.decorators</span> <span class=\"kn\">import</span> <span class=\"n\">method_decorator</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.contrib.auth.decorators</span> <span class=\"kn\">import</span> <span class=\"n\">login_required</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">.models</span> <span class=\"kn\">import</span> <span class=\"n\">Post</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">PostCreate</span><span class=\"p\">(</span><span class=\"n\">CreateView</span><span class=\"p\">):</span>\n\t<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Post</span>\n\n\t<span class=\"nd\">@method_decorator</span><span class=\"p\">(</span><span class=\"n\">login_required</span><span class=\"p\">(</span><span class=\"n\">login_url</span><span class=\"o\">=</span><span class=\"s\">'/member/login/'</span><span class=\"p\">))</span>\n\t<span class=\"k\">def</span> <span class=\"nf\">dispatch</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n\t\t<span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">PostCreate</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">dispatch</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>[믹스인 사용]</p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.views.generic</span> <span class=\"kn\">import</span> <span class=\"n\">CreateView</span>\n<span class=\"kn\">from</span> <span class=\"nn\">brace.views</span> <span class=\"kn\">import</span> <span class=\"n\">LoginRequiredMixin</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">.models</span> <span class=\"kn\">import</span> <span class=\"n\">Post</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">PostCreate</span><span class=\"p\">(</span><span class=\"n\">LoginRequiredMixin</span><span class=\"p\">,</span> <span class=\"n\">CreateView</span><span class=\"p\">):</span>\n\t<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Post</span>\n</code></pre>\n</div>\n\n<hr />\n\n<h3 id=\"뷰에서-폼을-이용하여-커스텀-액션-구현하기\">뷰에서 폼을 이용하여 커스텀 액션 구현하기</h3>\n<ul>\n  <li>클래스 기반 뷰에서도 중복되는 폼 코드 사용 시, 장고 폼을 활용할 수 있다. 해당 폼 유효성 검사를 하기 위해서 <code class=\"highlighter-rouge\">form_valid()</code>가 자리잡게 된다.</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.views.generic</span> <span class=\"kn\">import</span> <span class=\"n\">CreateView</span>\n<span class=\"kn\">from</span> <span class=\"nn\">brace.views</span> <span class=\"kn\">import</span> <span class=\"n\">LoginRequiredMixin</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">.models</span> <span class=\"kn\">import</span> <span class=\"n\">Post</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">PostCreate</span><span class=\"p\">(</span><span class=\"n\">LoginRequiredMixin</span><span class=\"p\">,</span> <span class=\"n\">CreateView</span><span class=\"p\">):</span>\n\t<span class=\"n\">form_class</span> <span class=\"o\">=</span> <span class=\"n\">PostForm</span>\n\t<span class=\"c\"># success_url = '/post/' + post_pk + '/'</span>\n\n\t<span class=\"k\">def</span> <span class=\"nf\">form_valid</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">form</span><span class=\"p\">):</span>\n\t\t<span class=\"c\"># 커스텀 로직</span>\n\t\t<span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">PostCrate</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">form_valid</span><span class=\"p\">(</span><span class=\"n\">form</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<ul>\n  <li>form_valid()는 유효한 폼 양식 데이터가 POST 요청일 때 호출된다.</li>\n  <li>반환형은 django.http.HttpResponseRedirect 가 된다.</li>\n</ul>\n\n<h3 id=\"뷰-객체-이용하기\">뷰 객체 이용하기</h3>\n<ul>\n  <li>콘텐츠를 렌더링하는 데 클래스 기반 뷰를 사용한다면, 렌더링용 메서드와 속성을 제공하는 뷰 객체를 호출하는 방법을 고려해 볼 수 있다.</li>\n</ul>\n\n<blockquote>\n  <p><strong>궁금한 점:</strong> 121p 예제 10.11에서 폼을 사용한 부분이 어딘가요?</p>\n</blockquote>\n\n<blockquote>\n  <p><strong>➜</strong> 책이 잘못된 듯;</p>\n</blockquote>\n"
    } ,
  
    {
      "title"    : "[9장] 함수 기반 뷰",
      "category" : "두숟갈 스터디two-scoops",
      "tags"     : "Django",
      "url"      : "/%EB%91%90%EC%88%9F%EA%B0%88%20%EC%8A%A4%ED%84%B0%EB%94%94/two-scoops/2017/08/02/ch9-func-based-view.html",
      "date"     : "2017-08-02 00:00:00 +0900",
      "content"   : "<blockquote>\n  <p>함수 기반 뷰는 클래스 기반 뷰처럼 슈퍼클래스로부터 상속하는 기능이 없다. 하지만 함수 기반 뷰는 그 태생에서 오는 함수적인 특징이 장점이다.</p>\n</blockquote>\n\n<h4 id=\"함수-기반-뷰-가이드-라인\">함수 기반 뷰 가이드 라인</h4>\n<ul>\n  <li>뷰 코드는 작을수록 좋다.</li>\n  <li>뷰에서 절대 코드를 반보해서 사용하지 말자.</li>\n  <li>뷰는 프레젠테이션 로직에서 처리해야한다. (모델은 비즈니스 로직에서 처리해야한다.)</li>\n  <li>403, 404, 500을 처리하는 커스텀 코드를 쓰는 데 이용하라.</li>\n  <li>복잡하게 중첩된 if문을 피하자.</li>\n</ul>\n\n<h3 id=\"httprequest-객체-전달하기\">HttpRequest 객체 전달하기</h3>\n<ul>\n  <li>뷰에서 코드를 재사용할 경우 미들웨어(Middleware)나 콘텍스트 프로세서(context processors) 같은 글로벌 액션을 연동하는 방법이 있다. 하지만 해당 방법을 사용하지 않을 경우 재사용에 문제가 발생할 수 있다.</li>\n  <li>django.http.HttpRequest 객체를 주된 인자로 삼는 메서드의 인자를 단순하게 해준다. 즉 메서드의 인자를 관리하는 데 있어 더 적은 부하를 가져다준다.</li>\n  <li>이 방법의 또 다른 장점은 클래스 기반 뷰로 통합하기 쉽다는 점이다.</li>\n</ul>\n\n<h3 id=\"데코레이터\">데코레이터</h3>\n<ul>\n  <li>간단 표기법이란? 포현이나 가독성을 좋게 하기 위해 프로그래밍 언어에 추가되는 문법을 나타낸다.</li>\n  <li><code class=\"highlighter-rouge\">함수가 주는 단순 명료함</code> + <code class=\"highlighter-rouge\">데코레이터의 간단 표기법</code> = 언제 어디서나 사용가능하고 동시에 재사용이 가능한 매우 유용하고 강력한 도구가 된다.</li>\n</ul>\n\n<h4 id=\"데코레이터-남용하지-않기\">데코레이터 남용하지 않기</h4>\n<p>너무 많은 데코레이터의 집합은 데코레이터 자체를 난해하게 만들어, 복잡하게 얽혀있는 상속 과정을 지닌 뷰가 단순해 보일 정도가 된다.</p>\n"
    } ,
  
    {
      "title"    : "[8장] 함수 기반 뷰와 클래스 기반 뷰",
      "category" : "두숟갈 스터디two-scoops",
      "tags"     : "Django",
      "url"      : "/%EB%91%90%EC%88%9F%EA%B0%88%20%EC%8A%A4%ED%84%B0%EB%94%94/two-scoops/2017/08/02/ch8-fbv-and-cbv.html",
      "date"     : "2017-08-02 00:00:00 +0900",
      "content"   : "<h2 id=\"함수-기반-뷰fbv와-클래스-기반-뷰cbv는-각각-언제-사용할까\">함수 기반 뷰(FBV)와 클래스 기반 뷰(CBV)는 각각 언제 사용할까?</h2>\n<p>뷰를 구현할 때 마다 <code class=\"highlighter-rouge\">함수 기반 뷰로 하는 게 나을지, 클래스 기반 뷰로 하는 게 더 나을지</code>를 고민하자</p>\n\n<h3 id=\"클래스-기반-뷰를-사용할-때\">클래스 기반 뷰를 사용할 때</h3>\n<ul>\n  <li>대부분의 경우 선호</li>\n  <li>널리 사용되는 클래스 뷰들 중 하나가 이미 머리에 떠올랐다.</li>\n  <li>속성을 <strong>오버라이딩</strong> 하는 것만으로 클래스 기반 뷰가 가능하다.</li>\n  <li>다른 뷰를 생성하기 위해 <strong>서브클래스</strong> 를 만들어야 한다.</li>\n</ul>\n\n<h3 id=\"함수-기반-뷰를-사용할-때\">함수 기반 뷰를 사용할 때</h3>\n<ul>\n  <li>클래스 기반 뷰로 구현하기 위해 장고 소스 코드까지 들여다볼 정도로 <strong>난해</strong> 하다.</li>\n  <li>클래스 기반 뷰로 처리할 경우 극단적으로 <strong>복잡</strong> 해진다. 예를 들어 뷰가 한 개 이상의 폼을 처리할 경우</li>\n</ul>\n\n<blockquote>\n  <p><strong>개인 프로젝트에 적용해보기</strong> - <a href=\"http://localhost:4000/django%20project/used%20book%20store/2017/10/02/facebook-login-of-django.html\">페이스북 소셜 로그인</a></p>\n</blockquote>\n\n<p><br /></p>\n<h4 id=\"fbv\">FBV</h4>\n<p>뷰 자체에서 페이스북 사용자 정보를 받고, 로그인까지 실행한다.</p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">facebook_login</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n\n    <span class=\"n\">code</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">GET</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">'code'</span><span class=\"p\">)</span>\n\n    <span class=\"c\"># code가 없으면 에러 메세지를 request에 추가하고 이전 페이지로 redirect</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">code</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">error_message_and_redirect_referer</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">access_token</span> <span class=\"o\">=</span> <span class=\"n\">get_facebook_access_token</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">code</span><span class=\"p\">)</span>\n        <span class=\"n\">debug_result</span> <span class=\"o\">=</span> <span class=\"n\">facebook_debug_token</span><span class=\"p\">(</span><span class=\"n\">access_token</span><span class=\"p\">)</span>\n        <span class=\"n\">user_info</span> <span class=\"o\">=</span> <span class=\"n\">facebook_get_user_info</span><span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"o\">=</span><span class=\"n\">debug_result</span><span class=\"p\">[</span><span class=\"s\">'data'</span><span class=\"p\">][</span><span class=\"s\">'user_id'</span><span class=\"p\">],</span> <span class=\"n\">access_token</span><span class=\"o\">=</span><span class=\"n\">access_token</span><span class=\"p\">)</span>\n        <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">MyUser</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get_or_create_facebook_user</span><span class=\"p\">(</span><span class=\"n\">user_info</span><span class=\"p\">)</span>\n\n        <span class=\"n\">django_login</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">user</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">redirect</span><span class=\"p\">(</span><span class=\"s\">'book:main'</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"n\">GetAccessTokenException</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">code</span><span class=\"p\">)</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">message</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">error_message_and_redirect_referer</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"n\">DebugTokenException</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">code</span><span class=\"p\">)</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">message</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">error_message_and_redirect_referer</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<h4 id=\"cbv\">CBV</h4>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">FaceBookLogin</span><span class=\"p\">(</span><span class=\"n\">View</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">):</span>\n        <span class=\"n\">code</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">GET</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">'code'</span><span class=\"p\">)</span>\n\n        <span class=\"c\"># code가 없으면 에러 메세지를 request에 추가하고 이전 페이지로 redirect</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">code</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">error_message_and_redirect_referer</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">access_token</span> <span class=\"o\">=</span> <span class=\"n\">get_facebook_access_token</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">code</span><span class=\"p\">)</span>\n            <span class=\"n\">debug_result</span> <span class=\"o\">=</span> <span class=\"n\">facebook_debug_token</span><span class=\"p\">(</span><span class=\"n\">access_token</span><span class=\"p\">)</span>\n            <span class=\"n\">user_info</span> <span class=\"o\">=</span> <span class=\"n\">facebook_get_user_info</span><span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"o\">=</span><span class=\"n\">debug_result</span><span class=\"p\">[</span><span class=\"s\">'data'</span><span class=\"p\">][</span><span class=\"s\">'user_id'</span><span class=\"p\">],</span> <span class=\"n\">access_token</span><span class=\"o\">=</span><span class=\"n\">access_token</span><span class=\"p\">)</span>\n            <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">MyUser</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get_or_create_facebook_user</span><span class=\"p\">(</span><span class=\"n\">user_info</span><span class=\"p\">)</span>\n\n            <span class=\"n\">django_login</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">user</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">redirect</span><span class=\"p\">(</span><span class=\"s\">'book:main'</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"n\">GetAccessTokenException</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n            <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">code</span><span class=\"p\">)</span>\n            <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">message</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">error_message_and_redirect_referer</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"n\">DebugTokenException</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n            <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">code</span><span class=\"p\">)</span>\n            <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">message</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">error_message_and_redirect_referer</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<ul>\n  <li>클래스 기반 뷰는 GET, POST 등 HTTP 메서드에 따른 처리를 if 함수 대신에 메서드 명으로 대체함으로써 코드 구조가 깔끔하다.</li>\n  <li>제네릭 뷰, 믹스인 클래스 등을 사용해 코드의 재사용성을 높였다.</li>\n</ul>\n\n<hr width=\"100%\" />\n\n<h3 id=\"urlconf로부터-뷰-로직-분리하기\">URLConf로부터 뷰 로직 분리하기</h3>\n<p><strong>URL</strong>은 최대한 유연하고 느슨하게 구성되어야 한다. 따라서 장고는 단순하고 명료하게 URL 라우트를 구성하는 방법을 제공한다.</p>\n\n<ul>\n  <li>뷰 모듈은 뷰 로직을 포함해야한다.</li>\n  <li>URL 모듈을 URL 로직을 포함해야한다.</li>\n</ul>\n\n<h3 id=\"느슨한-결합loose-coupling을-해야하는-이유\">느슨한 결합(loose coupling)을 해야하는 이유</h3>\n<ul>\n  <li>뷰와 url, 모델 사이에 상호 단단하게 종속적인 결합을 이뤘을 경우,</li>\n  <li>뷰에서 정의된 내용이 재사용되기 어렵다.</li>\n  <li>url의 무한 확장성을 파괴시킨다. 따라서 CBV의 최대 장점인 클래스 상속이 불가능해진다.</li>\n</ul>\n\n<h4 id=\"느슨한-결합-유지하기\">느슨한 결합 유지하기</h4>\n<p>[app-name/views.py]</p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"p\">[</span><span class=\"n\">import</span><span class=\"o\">...</span><span class=\"p\">]</span>\n<span class=\"k\">class</span> <span class=\"nc\">TasteListView</span><span class=\"p\">(</span><span class=\"n\">ListView</span><span class=\"p\">):</span>\n\t<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Tasting</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">TasteDetailView</span><span class=\"p\">(</span><span class=\"n\">DetailView</span><span class=\"p\">):</span>\n\t<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Tasting</span>\n\n<span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n\n<p>[app-name/urls.py]</p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"p\">[</span><span class=\"n\">import</span><span class=\"o\">...</span><span class=\"p\">]</span>\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">url</span><span class=\"p\">(</span>\n        <span class=\"n\">regex</span><span class=\"o\">=</span><span class=\"s\">r'^$'</span><span class=\"p\">,</span>\n        <span class=\"n\">view</span><span class=\"o\">=</span><span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">TasteListVeiw</span><span class=\"o\">.</span><span class=\"n\">as_view</span><span class=\"p\">(),</span>\n        <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s\">'list'</span><span class=\"p\">,</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">url</span><span class=\"p\">(</span>\n        <span class=\"n\">regex</span><span class=\"o\">=</span><span class=\"s\">r'^(?P&lt;pk&gt;</span><span class=\"err\">\\</span><span class=\"s\">d+)/$'</span><span class=\"p\">,</span>\n        <span class=\"n\">view</span><span class=\"o\">=</span><span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">TasteDetailVeiw</span><span class=\"o\">.</span><span class=\"n\">as_view</span><span class=\"p\">(),</span>\n        <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s\">'detail'</span><span class=\"p\">,</span>\n    <span class=\"p\">),</span>\n    <span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n</code></pre>\n</div>\n<ul>\n  <li>이로써 파일이 분리됐고, 오히려 코드는 더 늘어났다.</li>\n</ul>\n\n<h4 id=\"이-방식이-과연-괜찮은가\">이 방식이 과연 괜찮은가?</h4>\n<ul>\n  <li>뷰들 사이에서 인자나 속성이 <code class=\"highlighter-rouge\">중복 사용되지 않음</code>으로써 반복되는 작업을 줄일 수 있다.</li>\n  <li>URLConf로부터 모델과 템플릿 이름을 전부 제거했다. <code class=\"highlighter-rouge\">View는 View여야하고 URLConf는 URLConf</code>여야 하기 때문이다. 또한 하나 이상의 URLConf에서 뷰들이 호출될 수 있게 되었다.</li>\n  <li>다른 클래스에서 우리의 뷰를 얼마든지 상속해서 쓸 수 있게되어 클래스 기반이라는 것에 대한 장점을 살리게 된다.</li>\n  <li>URLConf는 한 번에 한 가지씩 업무를 명확하고 매끄럽게 처리해야 한다. 즉, URLConf는 URL 라우팅이라는 한 가지 명확한 작업만 처리해야하고 위 코드는 그것이 가능하다.</li>\n</ul>\n\n<blockquote>\n  <p>늘 URLConf로부터 로직을 분리 운영하도록 하자!</p>\n</blockquote>\n\n<hr />\n\n<h3 id=\"url-namespace\">URL namespace</h3>\n<ul>\n  <li>URL 이름공간은 앱 레벨 또는 인스턴스 레벨에서의 구분자를 제공한다.</li>\n  <li>‘appname_list, appname_detail 등’과 같이 뷰 이름을 따라서 URL 이름을 짓지만, namescape를 이용한 경우 ‘list’, ‘detail’과 같은 명확한 이름을 짓게된다.</li>\n  <li>또한 앱 이름을 입력하거나 부를 필요가 더 이상 없으니 시간이 절약되는 효과도 있다.</li>\n</ul>\n\n<h4 id=\"검색-업그레이드-리팩터링-쉽게-하기\">검색, 업그레이드, 리팩터링 쉽게 하기</h4>\n<ul>\n  <li>‘appname_list, appname_detail’ 같은 코드나 이름은 검색 결과가 나왔을 때 이것이 뷰 이름인지, URL 이름인지 알 수가 없다.</li>\n  <li>반면에 ‘appname:list, appname:detail’이라는 이름은 검색 결과를 좀 더 명확하게 해준다.</li>\n  <li>따라서 새로운 서드 파티 라이브러리와 상호 연동 시에 앱과 프로젝트를 좀 더 쉽게 업그레이드하고 리팩터링하게 만들어 준다.</li>\n</ul>\n\n<hr />\n\n<h3 id=\"장고의-뷰와-함수\">장고의 뷰와 함수</h3>\n<ul>\n  <li>기본적으로 장고의 뷰는 HTTP를 요청하는 객체를 받아서 HTTP를 응답하는 객체로 변경하는 함수다.</li>\n  <li>클래스 기반 뷰의 경우 함수 기반 뷰와 매우 다를 것으로 착각하기 쉽지만, URLConf에서 View.as_view()라는 클래스 메서드는 실제로 호출 가능한 뷰 인스턴스를 반환한다. 즉, 요청/응답 과정을 처리하는 콜백 함수 자체가 함수 기반 뷰와 동일하게 작동한다.</li>\n</ul>\n\n<h4 id=\"뷰의-기본-형태\">뷰의 기본 형태</h4>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"c\"># 함수 기반 뷰</span>\n<span class=\"k\">def</span> <span class=\"nf\">function_based_view</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">HttpResponse</span><span class=\"p\">(</span><span class=\"s\">\"FBV\"</span><span class=\"p\">)</span>\n\n<span class=\"c\"># 클래스 기반 뷰</span>\n<span class=\"k\">class</span> <span class=\"nc\">ClassBasedView</span><span class=\"p\">(</span><span class=\"n\">View</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"c\"># 비지니스 로직</span>\n        <span class=\"k\">return</span> <span class=\"n\">HttpResponse</span><span class=\"p\">(</span><span class=\"s\">\"CBV\"</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n<ul>\n  <li>클래스 기반 뷰를 이용할 때 객체 상속을 이용함으로써 코드를 재사용하기 쉬워지고 디자인을 좀 더 유연하게 할 수 있다.</li>\n</ul>\n"
    } ,
  
    {
      "title"    : "클라우드 서비스(Paas, Saas, Iaas)",
      "category" : "서버server",
      "tags"     : "Paas, Elastic Beanstalk",
      "url"      : "/%EC%84%9C%EB%B2%84/server/2017/07/22/cloud-service.html",
      "date"     : "2017-07-22 00:00:00 +0900",
      "content"   : "<h2 id=\"클라우드-서비스\">클라우드 서비스</h2>\n<p>클라우드 컴퓨팅 서비스를 크게 3가지 형태로 구분할 수 있으며, 그 기준은 <code class=\"highlighter-rouge\">어디까지가 직접 관리해야하는 영역인가</code> 로 나누어진다.</p>\n\n<p><img src=\"http://localhost:4000/assets/cloud-computing.jpg\" alt=\"cloud computing\" class=\"center-image\" /></p>\n\n<h3 id=\"iaasinfrastructure-as-a-service\">IaaS(Infrastructure as a Service)</h3>\n<ul>\n  <li>서버에서 머신영역인 <strong>가상화, 서버, 스토리지, 네트워크</strong> 를 제공한다. 예) EC2</li>\n</ul>\n\n<h3 id=\"saassoftware-as-a-servise\">SaaS(Software as a Servise)</h3>\n<ul>\n  <li>머신영역 + 운영체제 + 애플리케이션 ➜ 장고 애플리케이션만 만들어서 업로드시키면 된다.</li>\n  <li>가장 종속적이며 도커를 사용할 경우, 도커 자체를 돌려준다.</li>\n</ul>\n\n<h3 id=\"paasplatform-as-a-service\">PaaS(Platform as a Service)</h3>\n<ul>\n  <li>머신영역 + 운영체제 제공</li>\n  <li>운영체제 선택 불가능, 그 위에 장고와 같은 애플리케이션, 도커 등을 개발자가 업로드시켜야 한다.</li>\n  <li>Paas는 신속하게 프로젝트를 배포하는 데 최상의 도구다. 숙련된 운영 팀이 유지, 관리해 주는 시스템 리소스를 개발자들이 좀 더 손쉽게 이용하도록 도와준다.</li>\n  <li>특정 Paas 시스템에서 어플리케이션을 구동하려면 어쩔 수 없이 해당 PaaS에서 제시하는 아키텍쳐를 따라야 한다.</li>\n  <li>따라서 Paas 시스템에 맞게 우리 시스템을 변형시켜야 할 수도 있고 이를 위한 시간과 노력이 필요하다.</li>\n</ul>\n\n<p><img src=\"http://localhost:4000/assets/cloud-types.png\" alt=\"cloud types\" class=\"center-image\" /></p>\n\n<h4 id=\"법적-제약\">법적 제약</h4>\n<ul>\n  <li>Paas 시스템이 각 지역별, 국가별 법적 요구 조건을 충족하는지 확인해야 한다.</li>\n  <li>예를 들어 미국 내의 의료 정보 기반 프로젝트는 HIPAA 표준을 충족해야한다. 해당 프로젝트가 표준을 충족하지 않고 Paas에 배포되었다면 민형사상 고소를 당할 위험에 처하게 된다.</li>\n  <li>이 부분에 대해 확실하지 않다면 법률 자문이 필요하다.</li>\n</ul>\n\n<h4 id=\"가격\">가격</h4>\n<ul>\n  <li>대부분의 Paas는 무료 서비스 티어와 옵션을 제공한다. 이를 통해 추가적인 서비스를 합리적인 가격에 공급받을 수도 있는데, 서비스 관리를 소홀하게 했다가는 이런 ‘합리적인’ 가격이 어마어마한 월 사용 요금으로 커질 수도 있다. 따라서 비용과 요금 명세표에 늘 주의를 기울이자</li>\n  <li>사이트에 많은 트래픽이 발생한다면 해당 Paas 세팅을 기반으로 사이트에 얼마나 많은 요금이 발생하는지 미리 산정해 보는 것도 중요하다.</li>\n  <li>Paas 업체가 서비스 가격을 늘 똑같이 유지할 법적, 도덕적 책임이 없다는 것을 명심하자. (늘 언제든 달라질 수 있는 업체 제공 서비스 범위를 살펴보자.)</li>\n</ul>\n\n<h4 id=\"성능-저하\">성능 저하</h4>\n<p>문제 없이 잘 작동하던 프로젝트가 갑자기 느려지기 시작할 때가 있을 것이다. 이 경우 다음과 같은 절차대로 문제를 짚어본다.</p>\n\n<ul>\n  <li>성능이 저하될 만한 변경 사항에 대해 프로젝트의 커밋 이력을 확인해 본다</li>\n  <li>발견되지 않은 병목 현상을 조사해 본다.</li>\n  <li>Paas 지원 팀에 해당 문제에 대한 질문을 해 본다.</li>\n  <li>프로젝트가 구동되고 있는 물리적 하드웨어 자체의 문제일 수도 있다. 클라우드는 사실 하드웨어이고 하드웨어라는 것은 문제를 일으키거나 노후되는 것이다.</li>\n  <li>Paas 지원 팀에 좀 더 자세한 도움을 요청하자. 특히 유료 고객이라면 더욱 더 도움을 요청하는 데 주저해서는 안 된다.</li>\n</ul>\n\n<h3 id=\"솔루션-스택solution-stack\">솔루션 스택(Solution Stack)</h3>\n<ul>\n  <li>우리가 흔히 알고있는 선입후출(FILO), 스택 오버 플로우의 개념이 아니라, 큰 솔루션이 원활히 동작하기 위해서 쓰이는 각종 서브 시스템과 컴포넌트들의 묶음을 의미한다.</li>\n</ul>\n\n<p><strong>[내 프로젝트 서버를 구성할 스택]</strong></p>\n\n<ul>\n  <li>Elastic Beanstalk\n    <ul>\n      <li>Linux</li>\n      <li>Nginx</li>\n      <li>uWSGI</li>\n      <li>Python</li>\n    </ul>\n  </li>\n  <li>RDS(Amazon Relational Database Service)\n    <ul>\n      <li>PostgreSQL</li>\n    </ul>\n  </li>\n  <li>S3(Amazon Simple Storage Service)</li>\n</ul>\n\n<h3 id=\"elastic-beanstalk\">Elastic Beanstalk</h3>\n<ul>\n  <li><strong>Elastic Beanstalk</strong> 는 스택들을 묶어서 제공해주는 PaaS의 일종으로, EC2(Amazon Elastic Cloud Computing) 기반으로 동작하며 거기에 더해 손쉬운 확장과 배포가 장점이다.</li>\n  <li>내가 배포하려는 서버는 데이터베이스로 Amazon RDS, 업로드되는 데이터 관리하는 Amazon S3를 Elastic Beanstalk를 통해 제공한다.</li>\n</ul>\n"
    } ,
  
    {
      "title"    : "도커 명령어",
      "category" : "도커docker",
      "tags"     : "Docker",
      "url"      : "/%EB%8F%84%EC%BB%A4/docker/2017/07/21/docker-command.html",
      "date"     : "2017-07-21 00:00:00 +0900",
      "content"   : "<blockquote>\n  <p>Project Root Directory 바로 하위 Dockerfile 은 eb deploy 할 때, 자동으로 docker build 가 실행된다.</p>\n</blockquote>\n\n<h3 id=\"sudo-없이-명령어-사용하기\">sudo 없이 명령어 사용하기</h3>\n<ul>\n  <li>docker는 기본적으로 root 권한이 필요하다.</li>\n  <li>root가 아닌 사용자가 sudo 없이 명령어를 사용하려면 해당 사용자를 docker 그룹에 추가해야한다.</li>\n</ul>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>&gt;&gt;&gt; sudo usermod -aG docker $USER(현재 사용자) / bbungsang('bbungsang'이라는 사용자)\n</code></pre>\n</div>\n\n<h3 id=\"설치-확인하기\">설치 확인하기</h3>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>&gt;&gt;&gt; docker version\n</code></pre>\n</div>\n\n<ul>\n  <li><code class=\"highlighter-rouge\">Client</code>와 <code class=\"highlighter-rouge\">Server</code>가 각각 존재하고 있음을 확인할 수 있다.</li>\n  <li>도커 커맨드를 입력하면 도커 클라이언트가 도커 서버로 명령을 전송하고 결과를 받아서 터미널에 출력해주는 것이다.</li>\n</ul>\n\n<h3 id=\"컨테이너-실행하기\">컨테이너 실행하기</h3>\n\n<ul>\n  <li>docker 실행 명령어</li>\n</ul>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>&gt;&gt;&gt; docker run [OPTIONS] IMAGE[:TAG|@DIGEST] [COMMAND] [ARG...]\n</code></pre>\n</div>\n\n<ul>\n  <li>‘ubuntu:16.04 컨테이너를 생성하고 컨테이너 내부에 진입하기</li>\n</ul>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>&gt;&gt;&gt; docker run ubuntu:16.04\n# 정상적으로 실행됐지만 무엇을 하라고 명령어를 따로 전달하지 않았기 때문에 생성 혹은 (존재할 경우)실행되자마자 종료된다.\n\n&gt;&gt;&gt; docker run --rm -it ubuntu:16.04 /bin/bash\n# -rm : 프로세스 종료시 컨테이너 자동 제거\n# -it : -i와 -t를 동시에 사용한 것, 터미널에서 키보드 입력을 위한 옵션\n# /bin/bash : 컨테이너 내부에 들어가기 위해 bash 쉘 실행\n\n&gt;&gt;&gt; exit\n# bash 쉘 종료, 컨테이너도 같이 종료된다.\n</code></pre>\n</div>\n\n<h3 id=\"기본-명령어\">기본 명령어</h3>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>&gt;&gt;&gt; docker ps\n# 컨테이너 목록 확인\n\n&gt;&gt;&gt; docker stop [OPTIONS] CONTAINER [CONTAINER...]\n# 실행 중인 컨테이너 중지, 띄어쓰기로 구분하여 여러개 중지가 가능하다.\n\n&gt;&gt;&gt; docker rm [OPTIONS] CONTAINER [CONTAINER...]\n# 컨데이너 제거, 여러개 제거 가능\n\n&gt;&gt;&gt; docker images [OPTIONS] [REPOSITORY[:TAG]]\n# 이미지 목록 확인\n\n&gt;&gt;&gt; docker pull [OPTIONS] NAME[:TAG|@DIGEST]\n# 이미지 다운로드\n\n&gt;&gt;&gt; docker rmi [OPTIONS] IMAGE [IMAGE...]\n# 이미지 삭제\n</code></pre>\n</div>\n\n<h2 id=\"도커-실행-후-자동-서버-실행-스크립트\">도커 실행 후 자동 서버 실행 스크립트</h2>\n\n<h3 id=\"dockerfiledockerubuntu--변하지-않을-과정으로-확정된-부분을-미리-생성한-것이다\">[.dockerfile/Docker.ubuntu] : 변하지 않을 과정으로, 확정된 부분을 미리 생성한 것이다.</h3>\n\n<ul>\n  <li>해당 스크립트에서는 y/n 에 대해 대답할 수 없기 때문에 -y 옵션을 줘야한다.</li>\n</ul>\n\n<pre><code class=\"language-docker\"># ubuntu 에서 시작\nFROM            ubuntu:16.04\n# 관리자\nMAINTAINER      bbungsang@gmail.com\n\nRUN             apt-get -y update\nRUN             apt-get install -y python-pip\nRUN             apt install -y git vim\n</code></pre>\n\n<ul>\n  <li>의존성 패키지 설치 후, pyenv 설치</li>\n</ul>\n\n<pre><code class=\"language-docker\">RUN             apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev \\\nlibreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev xz-utils\nRUN             curl -L https://raw.githubusercontent.com/yyuu/pyenv-installer/master/bin/pyenv-installer | bash\n</code></pre>\n\n<ul>\n  <li>~/.bash_profile 파일 설정 추가 후, 파이썬 3.6.1 설치</li>\n</ul>\n\n<pre><code class=\"language-docker\">RUN             echo 'export PATH=\"/home/ubuntu/.pyenv/bin:$PATH\"' &gt;&gt; ~/.bash_profile\nRUN             echo 'eval \"$(pyenv init -)\"' &gt;&gt; ~/.bash_profile\nRUN             echo 'eval \"$(pyenv virtualenv-init -)\"' &gt;&gt; ~/.bash_profile\nRUN             . ~/.bash_profile\nENV             PATH /root/.pyenv/bin:$PATH\n\nRUN             pyenv install 3.6.1\n</code></pre>\n\n<ul>\n  <li>zhs 설치 후, pyenv를 ~/.zshrc 에 적용, 가상환경 생성</li>\n</ul>\n\n<pre><code class=\"language-docker\">RUN             apt-get -y install zsh\nRUN             wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | zsh || true\nRUN             chsh -s /usr/bin/zsh\n\nRUN             echo 'export PATH=\"/home/ubuntu/.pyenv/bin:$PATH\"' &gt;&gt; ~/.zshrc\nRUN             echo 'eval \"$(pyenv init -)\"' &gt;&gt; ~/.zshrc\nRUN             echo 'eval \"$(pyenv virtualenv-init -)\"' &gt;&gt; ~/.zshrc\n\n# 가상환경 'elass' 생성\nRUN             pyenv virtualenv 3.6.1 elass\n</code></pre>\n\n<ul>\n  <li>uWSGI, Nginx, supervisor 설치</li>\n</ul>\n\n<pre><code class=\"language-docker\">##\n# uWSGI install\n#   virtualenv 내부에서 pip isntall 을 해줘야한다.\n#   local 에서는 pyenv virtualenv elass 명령어를 실행하면 자동으로 가상환경이 적용되었지만,\n#   도커에서는 그럴 수 없으므로, 직접 찾아서 작업할 수 있도록 경로를 다 기입해야 한다.\n#   가상환경 내부 binary 의 pip 를 실행해서 install uwsgi\n##\nRUN             /root/.pyenv/versions/elass/bin/pip install uwsgi\nRUN             apt-get -y install nginx\nRUN             apt-get -y install supervisor\n</code></pre>\n\n<blockquote>\n  <p><strong>[dockerfile 작성후 이미지 빌드 명령어]</strong> <br />\n<code class=\"highlighter-rouge\">docker build -t eb_ubuntu . -f .dockerfiles/Dockerfile.ubuntu</code> <br /></p>\n  <ul>\n    <li>docker build -t <사용할 이미지=\"\" 이름=\"\"> &lt;프로젝트 경로( . : 커맨드라인을 실행하는 현재 위치)&gt; -f \\<Dockerfile이 존재하는=\"\" 경로=\"\"></Dockerfile이></사용할></li>\n  </ul>\n</blockquote>\n"
    } ,
  
    {
      "title"    : "WSGI와 uWSGI",
      "category" : "서버server",
      "tags"     : "Nginx, WSGI",
      "url"      : "/%EC%84%9C%EB%B2%84/server/2017/07/20/wsgi.html",
      "date"     : "2017-07-20 00:00:00 +0900",
      "content"   : "<h2 id=\"cgicommon-gateway-interface\">CGI(Common Gateway Interface)</h2>\n<ul>\n  <li><code class=\"highlighter-rouge\">웹 서버</code>는 Static Contents, 즉 내용에 변화가 없는 그대로의 정적인 것을 전달하는 역할을 한다.</li>\n  <li>만약 클라이언트로부터 요청을 전달받을 때마다 달라지는 현재 시간 혹은 예약 현황 등 (Dynamic Contents)을 응답해야한다면, 해당 요청에 맞게 데이터를 만들어주는 <code class=\"highlighter-rouge\">백엔드</code>에게 요청을 전달해야한다.</li>\n  <li>요청에 따라서 데이터를 만들어주는 것을 <code class=\"highlighter-rouge\">프로그램</code>(장고 어플리케이션)이라 부르며, <strong>CGI는 웹서버와 프로그램 사이에서 Interface(규칙)을 제공</strong> 한다.</li>\n</ul>\n\n<h2 id=\"wsgiweb-server-gateway-interface\">WSGI(Web Server Gateway Interface)</h2>\n<ul>\n  <li>CGI의 일종으로, 웹 서버와 <code class=\"highlighter-rouge\">파이썬으로 작성된</code> Web Application 또는 Framework의 인터페이스를 정의해놓은 규칙이다.</li>\n  <li>CGI가 느리고 제약 사항이 많았으며 Python App에서는 CGI, mod_python, Fast CGI 등 한정적인 인터페이스만을 사용하기 때문에 WSGI가 <code class=\"highlighter-rouge\">웹 서버와 파이썬 어플리케이션의 표준 인터페이스</code>로 개발되었다.</li>\n</ul>\n\n<h3 id=\"web-server-와-web-app\">Web Server 와 Web App</h3>\n<ul>\n  <li>Web Server : Apache, Nginx 등</li>\n  <li>Web App : Django, Flask 등</li>\n  <li>웹 서버는 웹 어플리케이션을 실행한다. Request는 App 단에서 실행되며, Response는 Callback 함수를 통해 서버로 되돌려보내진다.</li>\n</ul>\n\n<p><img src=\"http://localhost:4000/assets/wsgi.png\" alt=\"wsgi structure\" class=\"center-image\" /></p>\n\n<h3 id=\"wsgi-왜-필요할까\">WSGI, 왜 필요할까?</h3>\n<ul>\n  <li>WSGI는 많은 요청을 다룰 수 있도록 설계되어있다. 하지만 Framework는 스스로 그 많은 요청을 실행하고 처리하지 못하기 때문에 WSGI라는 중간 단계를 거칠 수 밖에 없다.</li>\n  <li>또한 WSGI는 Python Web의 개발 속도를 올려준다. 즉, Python Web은 불가피하게 CGI를 사용할 수 밖에 없는데, 그 중에서 WSGI는 기초적인 것들만 알아도 사용할 수 있기 때문에 별도로 사용법을 익혀야하는 시간을 줄일 수 있다.</li>\n</ul>\n\n<h2 id=\"uwsgi\">uWSGI</h2>\n<ul>\n  <li>Python WSGI의 종류(그 밖에 Bjoern, Mod_wsgi, Cunicorn가 있다.) 중 하나이며,</li>\n  <li>Hosting Server에서 Full Stack 개발이 가능하도록 개발이 되었기 때문에 확장성이 뛰어나며 강력하다.</li>\n  <li>Objective-C, C, C++ 등과 다양한 언어 위에서 작동하지만 너무 무거울 수 있다.</li>\n</ul>\n\n<h3 id=\"왜-nginx와-같이-사용하는가\">왜 Nginx와 같이 사용하는가?</h3>\n<ul>\n  <li>uWSGI만으로 서비스를 제공하는 것이 가능한가? 가능하다!</li>\n  <li>그렇다면 왜 Nginx와 같이 사용하는가? Nginx가 가진 향상된 Static Contents(CSS, JavaScript 등) 핸들링을 통해서 서버에 발생되는 부하를 줄일 수 있다.</li>\n</ul>\n\n<p><a href=\"http://localhost:4000/서버/server/2017/07/20/nginx-1.html\" class=\"a-tag-deco\">Nginx란?</a></p>\n"
    } ,
  
    {
      "title"    : "NGINX (1)",
      "category" : "서버server",
      "tags"     : "Nginx, WSGI",
      "url"      : "/%EC%84%9C%EB%B2%84/server/2017/07/20/nginx-1.html",
      "date"     : "2017-07-20 00:00:00 +0900",
      "content"   : "<h2 id=\"웹web이란\">웹(Web)이란?</h2>\n<ul>\n  <li><code class=\"highlighter-rouge\">www</code> 는 ‘World Wide Web’의 약자로 네트워크 체계 중 하나인 <code class=\"highlighter-rouge\">인터넷</code> 에서 동작하는 통신 규약 중 하나이다.</li>\n  <li>즉 인터넷은 네트워크 체계 중 하나이고, 웹은 인터넷에서 작동되는 하나의 개념인 것이다. (인터넷에서 작동되는 규약으로는 FTP, EMAIL 등이 있다.)</li>\n  <li><code class=\"highlighter-rouge\">인터넷 != 웹</code> 이지만 대부분 <code class=\"highlighter-rouge\">인터넷 == 웹</code> 으로 알고 있는 까닭은 웹이 가장 성공한 인터넷 서비스이기 때문이다.</li>\n</ul>\n\n<h2 id=\"http\">HTTP</h2>\n<ul>\n  <li>웹 서버(백엔드)와 웹 클라이언트(프론트엔드)가 서로 정보를 주고 받기 위한 약속(protocol)이다.</li>\n  <li>어떻게 요청을 해야하고, 응답은 어떻게 해야하는지에 대한 규칙을 정해둔 것이다.</li>\n</ul>\n\n<h2 id=\"web-serverhttp-server서버-어플리케이션\">Web Server(=Http Server)(!=서버 어플리케이션)</h2>\n<ul>\n  <li>웹 브라우저와 같은 클라이언트로부터 HTTP 요청을 받아들이고, HTML 문서와 같은 웹 페이지를 반환하는 프로그램이다.</li>\n  <li>대표적인 Web Server로 <code class=\"highlighter-rouge\">Apache</code> 가 있지만 <code class=\"highlighter-rouge\">Nginx</code> 가 Apache의 독주에 제동을 걸고 있다.</li>\n</ul>\n\n<h2 id=\"nginx\">NGINX</h2>\n<h3 id=\"서버인스턴스-nginx-uwsgi-django-동작-구조\">서버인스턴스-Nginx-<a href=\"http://localhost:4000/server/2017/07/20/wsgi.html\">uWSGI</a>-Django 동작 구조</h3>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>EC2 -(http)-&gt; Django\nEC2 -(http)-&gt; uwsgi -(WSGI)-&gt; Django\nEC2 -(http)-&gt; Nginx -(uWSGI's UnixSocket)-&gt; uWSGI -(WSGI)-&gt; Django\n</code></pre>\n</div>\n\n<p><img src=\"http://localhost:4000/assets/nginx_uwsgi.png\" alt=\"\" class=\"center-image\" /></p>\n\n<p><code class=\"highlighter-rouge\">Web Client</code>, 즉 웹 브라우저가 웹 서버에게 <code class=\"highlighter-rouge\">HTTP</code> 요청을 보낸다. <code class=\"highlighter-rouge\">Nginx</code>는 웹 서버로 <code class=\"highlighter-rouge\">HTTP</code> 요청을 받는다.</p>\n\n<p>하지만 <code class=\"highlighter-rouge\">Django</code>의 <code class=\"highlighter-rouge\">Python</code> 언어를 모르기 때문에 <code class=\"highlighter-rouge\">uWSGI</code>는 <code class=\"highlighter-rouge\">HTTP</code> 요청을 <code class=\"highlighter-rouge\">Python</code>으로, 혹은 <code class=\"highlighter-rouge\">Django</code>로 부터 받은 응답을 <code class=\"highlighter-rouge\">Nginx</code>가 알 수 있도록 변환해준다.</p>\n\n<p><img src=\"http://localhost:4000/assets/nginx.png\" alt=\"nginx logo\" class=\"center-image\" /></p>\n\n<p>Nginx는 아파치에 비해 <strong>더 적은 자원으로 더 빠르게</strong> 데이터를 서비스 할 수 있다.</p>\n\n<h3 id=\"nginx-support-플러그인-설치\">Nginx Support 플러그인 설치</h3>\n<ul>\n  <li><strong>ini(initialization)</strong> : 설정 파일에 대한 표준, 텍스트 파일로 이루어져 있고, .ini 라는 파일 확장자가 따라오지만 .cfg 또는 .conf 등의 다른 확장자를 사용하기도 한다.</li>\n</ul>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>매개변수 : 이름 = 값\n섹션 : [섹션] 매개 변수는 임의의 이름으로 지정된 여러 개의 섹션으로 구분할 수 있다.\n주석 : ;\n</code></pre>\n</div>\n\n<h3 id=\"서버에서-nginx-관련-설정하기\">서버에서 Nginx 관련 설정하기</h3>\n<ul>\n  <li>Nginx 설정은 Nginx가 어떻게 동작해야 하는가를 지정하는 기능이다.</li>\n  <li>설정 파일은 대부분 conf 디렉토리 아래에 위치한다.</li>\n</ul>\n\n<h4 id=\"설정-파일의-역할\">설정 파일의 역할</h4>\n<ul>\n  <li>nginx.conf : 메인 설정 파일</li>\n  <li>sites-available : 비활성화된 모든 사이트들의 설정 파일이 위치</li>\n  <li>sites-enable : Symbolic link로 서빙할 (활성화된)사이트만 위치</li>\n</ul>\n\n<h4 id=\"가상서버-설정-파일-작성\">가상서버 설정 파일 작성</h4>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"c\"># sudo vi /etc/nginx/sites-available/mysite</span>\n\n<span class=\"c\">##</span>\n<span class=\"c\"># server 블록</span>\n<span class=\"c\">#\t- 하나의 웹사이트를 선언하는데 사용된다.</span>\n<span class=\"c\">#\t- 가상 호스팅(Virtual Host)의 개념이다.</span>\n<span class=\"c\"># - 예를 들어 하나의 서버로 http://bbungsang.kr 과 http://bbungsang.net 을 동시에 운영하고 싶을 경우 사용할 수 있다.</span>\n<span class=\"c\">##</span>\n<span class=\"n\">server</span> <span class=\"p\">{</span>\n    <span class=\"n\">listen</span> <span class=\"mi\">80</span><span class=\"p\">;</span>\n    <span class=\"n\">server_name</span> <span class=\"n\">localhost</span><span class=\"p\">;</span>\n    <span class=\"n\">charset</span> <span class=\"n\">utf</span><span class=\"o\">-</span><span class=\"mi\">8</span><span class=\"p\">;</span>\n    <span class=\"n\">client_max_body_size</span> <span class=\"mi\">128</span><span class=\"n\">M</span><span class=\"p\">;</span>\n\n    <span class=\"c\">##</span>\n    <span class=\"c\"># location 블록</span>\n    <span class=\"c\">#\t- server 블록 안에 있으면서 특정 URL을 처리하는 방법을 정의한다.</span>\n    <span class=\"c\">##</span>\n    <span class=\"n\">location</span> <span class=\"o\">/</span> <span class=\"p\">{</span>\n        <span class=\"n\">uwsgi_pass</span>  <span class=\"n\">unix</span><span class=\"p\">:</span><span class=\"o\">///</span><span class=\"n\">tmp</span><span class=\"o\">/</span><span class=\"n\">ec2</span><span class=\"o\">.</span><span class=\"n\">sock</span><span class=\"p\">;</span>\n        <span class=\"n\">include</span>     <span class=\"n\">uwsgi_params</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div>\n\n<ul>\n  <li><code class=\"highlighter-rouge\">uwsgi_pass  unix:///tmp/ec2.sock</code> : socket 요청을 받겠다고 설정한 것, Nginx가 socket에 정보를 전달하고 해당 정보를 socket이 uWSGI에 전달</li>\n</ul>\n"
    } ,
  
    {
      "title"    : "[Programmers Summer Coding] 직사각형 만들기",
      "category" : "Solve Algorithm!",
      "tags"     : "Alogorithm",
      "url"      : "/solve%20algorithm!/2017/07/18/programmers-coding-test2.html",
      "date"     : "2017-07-18 00:00:00 +0900",
      "content"   : "<p>직사각형을 만드는 데 필요한 4개의 점 중 3개의 좌표가 주어질 때, 나머지 한 점의 좌표를 반환하는 solution 함수를 완성해 주세요.</p>\n\n<p>단, 직사각형의 각 변은 x축, 혹은 y축에 평행하며, 반드시 직사각형을 만들 수 있는 경우만 입력으로 주어집니다.</p>\n\n<p><strong>입출력 예</strong></p>\n\n<p>입력 : [[1, 4], [3, 4], [3, 10]]<br />\n출력 : [1, 10]\n<br /><br />\n입력 : [[1, 1], [2, 2], [1, 2]]<br />\n출력 : [2, 1]</p>\n\n<ul>\n  <li>내 풀이</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">make_rectangle</span><span class=\"p\">(</span><span class=\"n\">q_list</span><span class=\"o\">=</span><span class=\"p\">[]):</span>\n    <span class=\"n\">bowl</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">q_list</span><span class=\"p\">)):</span>\n        <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">q_list</span><span class=\"p\">)</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n            <span class=\"n\">bowl</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">q_list</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">])</span>\n\n    <span class=\"n\">x_value</span> <span class=\"o\">=</span> <span class=\"n\">bowl</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">::</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n    <span class=\"n\">y_value</span> <span class=\"o\">=</span> <span class=\"n\">bowl</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">::</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">k</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">x_value</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">(</span><span class=\"n\">x_value</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">])</span> <span class=\"o\">!=</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n            <span class=\"n\">result_x</span> <span class=\"o\">=</span> <span class=\"n\">x_value</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span>\n        <span class=\"k\">elif</span> <span class=\"n\">y_value</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">(</span><span class=\"n\">y_value</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">])</span> <span class=\"o\">!=</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n            <span class=\"n\">result_y</span> <span class=\"o\">=</span> <span class=\"n\">y_value</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span>\n\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">result_x</span><span class=\"p\">,</span> <span class=\"n\">result_y</span><span class=\"p\">]</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">result</span>\n\n<span class=\"n\">input_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">]</span>\n<span class=\"n\">make_rectangle</span><span class=\"p\">(</span><span class=\"n\">input_list</span><span class=\"p\">)</span>  \n</code></pre>\n</div>\n"
    } ,
  
    {
      "title"    : "[Programmers Summer Coding] 원형으로 연결되어 있는 n개의 스티커",
      "category" : "Solve Algorithm!",
      "tags"     : "Alogorithm",
      "url"      : "/solve%20algorithm!/2017/07/18/programmers-coding-test1.html",
      "date"     : "2017-07-18 00:00:00 +0900",
      "content"   : "<p>N개의 스티커가 원형으로 연결되어 있다. 다음 그림은 N = 8인 경우의 예시다.</p>\n\n<p><img src=\"http://localhost:4000/assets/circle-sticker.jpg\" alt=\"circle-sticker\" class=\"center-image\" /></p>\n\n<p>원형으로 연결된 스티커에서 몇 장의 스티커를 뜯어내어 뜯어낸 스티커에 적힌 숫자의 합이 최대가 되도록 한다.</p>\n\n<p>단 스티커 한 장을 뜯어내면 양쪽으로 인접해있는 스티커는 찢어져서 사용할 수 없다.</p>\n\n<p><strong>제한 사항</strong></p>\n<ul>\n  <li>sticker는 원형으로 연결된 스티커의 각 칸에 적힌 숫자가 순서대로 들어있는 배열로, 길이(N)는 1 이상 100,000 이하이다.</li>\n  <li>sticker의 각 원소는 스티커의 각 칸에 적힌 숫자이며, 각 칸에 적힌 숫자는 1이상 100이하의 자연수이다.</li>\n  <li>원형의 스티커 모양을 위해 sticker 배열의 첫 번째 원소와 마지막 원소가 서로 연결되어 있다.</li>\n</ul>\n\n<p><strong>입출력 예</strong></p>\n\n<table>\n  <thead>\n    <tr>\n      <th style=\"text-align: left\">sticker</th>\n      <th style=\"text-align: center\">answer</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td style=\"text-align: left\">[14, 6, 5, 11, 3, 9, 2, 10]</td>\n      <td style=\"text-align: center\">36</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: left\">[1, 3, 2, 5, 4]</td>\n      <td style=\"text-align: center\">8</td>\n    </tr>\n  </tbody>\n</table>\n\n<ul>\n  <li>6, 11, 9, 10이 적힌 스티커를 떼어 냈을 때 36으로 최대가 됨</li>\n  <li>3, 5가 적힌 스티커를 떼어 냈을 때 8로 최대가 됨</li>\n</ul>\n\n<h3 id=\"내-풀이\">내 풀이</h3>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">functools</span> <span class=\"kn\">import</span> <span class=\"nb\">reduce</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">solution</span><span class=\"p\">(</span><span class=\"n\">array_list</span><span class=\"p\">):</span>\n    <span class=\"n\">sum_value</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"n\">even_end</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">array_list</span><span class=\"p\">)</span><span class=\"o\">-</span><span class=\"mi\">2</span>\n    <span class=\"n\">sum_num</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">sum_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">array_list</span><span class=\"p\">)):</span>\n        <span class=\"k\">if</span> <span class=\"n\">array_list</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"n\">array_list</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]:</span>\n            <span class=\"n\">front_value</span> <span class=\"o\">=</span> <span class=\"n\">array_list</span><span class=\"p\">[:</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">:]</span>\n            <span class=\"k\">del</span> <span class=\"n\">array_list</span><span class=\"p\">[:</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">:]</span>\n            <span class=\"n\">array_list</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">front_value</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">array_list</span><span class=\"p\">)</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"n\">sum_num</span> <span class=\"o\">=</span> <span class=\"n\">array_list</span><span class=\"p\">[:</span><span class=\"n\">even_end</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n            <span class=\"n\">sum_value</span> <span class=\"o\">=</span> <span class=\"nb\">reduce</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">+</span><span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">sum_num</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">sum_num</span> <span class=\"o\">=</span> <span class=\"n\">array_list</span><span class=\"p\">[::</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n            <span class=\"n\">sum_value</span> <span class=\"o\">=</span> <span class=\"nb\">reduce</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">+</span><span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">sum_num</span><span class=\"p\">)</span>\n        <span class=\"n\">sum_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">sum_value</span><span class=\"p\">)</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">sum_list</span><span class=\"p\">)):</span>\n        <span class=\"k\">if</span> <span class=\"n\">result</span> <span class=\"o\">&lt;</span> <span class=\"n\">sum_list</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]:</span>\n            <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">sum_list</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span>\n\n    <span class=\"k\">return</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n\n<span class=\"n\">array_list1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"n\">array_list2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">solution</span><span class=\"p\">(</span><span class=\"n\">array_list1</span><span class=\"p\">),</span> <span class=\"n\">solution</span><span class=\"p\">(</span><span class=\"n\">array_list2</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<ul>\n  <li>코드가 굉장히 길고 if문과 for문 남용…</li>\n</ul>\n\n<h3 id=\"다른-사람-풀이\">다른 사람 풀이</h3>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">get_max_sum</span><span class=\"p\">(</span><span class=\"n\">num_list</span><span class=\"p\">):</span>    \n    <span class=\"k\">return</span> <span class=\"nb\">max</span><span class=\"p\">([</span><span class=\"n\">x</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">num_list</span><span class=\"p\">[:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"p\">]],</span> <span class=\"p\">[</span><span class=\"n\">x</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">num_list</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">::</span><span class=\"mi\">2</span><span class=\"p\">]],</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"nb\">sum</span><span class=\"p\">)</span>\n\n<span class=\"n\">num_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">]</span>\n<span class=\"n\">get_max_sum</span><span class=\"p\">(</span><span class=\"n\">num_list</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<ul>\n  <li>코드가 짧고 보기 좋다. 존경스럽다.</li>\n</ul>\n"
    } ,
  
    {
      "title"    : "도커(Docker)란?",
      "category" : "도커docker",
      "tags"     : "Docker",
      "url"      : "/%EB%8F%84%EC%BB%A4/docker/2017/07/03/what-is-docker.html",
      "date"     : "2017-07-03 00:00:00 +0900",
      "content"   : "<h4 id=\"도커는-리눅스-컨테이너-기반의-오픈소스-가상화-플랫폼이다\">도커는 리눅스 컨테이너 기반의 오픈소스 가상화 플랫폼이다.</h4>\n\n<h2 id=\"컨테이너\">컨테이너</h2>\n<ul>\n  <li>일반적으로 알고있는 컨테이너와 같이 다양한 프로그램 및 실행 환경을 <strong>컨테이너</strong> 로 <code class=\"highlighter-rouge\">추상화</code>하고, 각각 <strong>동일한 인터페이스</strong> 를 제공하여 프로그램의 배포 및 관리를 단순하게 해준다.</li>\n  <li>즉, <strong>격리된 공간</strong> 에서 프로세스가 동작하는 <code class=\"highlighter-rouge\">가상화</code> 기술이다.</li>\n</ul>\n\n<p><img src=\"http://localhost:4000/assets/docker-works.png\" alt=\"docker container\" class=\"center-image\" /></p>\n\n<h4 id=\"기존-가상화-기술\">[기존 가상화 기술]</h4>\n<ul>\n  <li><strong>OS</strong> 를 가상화, VMware, VirtualBox 등</li>\n  <li><em>전가상화(Full Virtualization)</em> : 호스트 OS 위에 게스트 OS 전체를 가상화하여 사용하는 방식, 무겁고 느리다.</li>\n</ul>\n\n<h4 id=\"클라우드-서비스-가상화-기술\">[클라우드 서비스 가상화 기술]</h4>\n<ul>\n  <li><strong>CPU</strong> 를 가상화, KVM, Xen 등</li>\n  <li><em>반가상화(Paravirtualization)</em> : 게스트 OS가 필요하지만 전체 OS를 가상화하는 방식은 아니다.</li>\n</ul>\n\n<blockquote>\n  <p>하지만 전가상화, 반가상화 모두 추가적인 OS를 설치하여 가상화하는 방법이기 때문에 성능적인 문제가 발생한다. ➜ <strong>프로세스 격리</strong> 방식 등장!</p>\n</blockquote>\n\n<h4 id=\"도커-가상화-기술\">[도커 가상화 기술]</h4>\n<ul>\n  <li><strong>프로세스 격리</strong>, CPU나 메모리는 딱 프로세스가 필요한 만큼만 추가로 사용하고 성능적으로 거의 손실이 없다.</li>\n  <li>서버 하나에 여러 개의 컨테이너를 실행할 경우, 서로 영향을 미치지 않고 독립적으로 실행되어 굉장히 가벼운 가상머신을 사용하는 듯한 느낌을 준다.</li>\n  <li>새로운 컨테이너를 만드는 데 걸리는 시간은 거의 1~2초 가량, 실행 중인 컨테이너에 접속하여 ‘apt-get’ 또는 ‘yum’ 으로 패키지를 설치할 수 있으며, 사용자 추가 및 여러 개의 프로세스를 백그라운드로 실행 가능하다.</li>\n</ul>\n\n<h2 id=\"이미지\">이미지</h2>\n<ul>\n  <li>컨테이너 실행에 필요한 파일과 설정 값 등을 포함하고 있는 것으로 상태값을 가지지 않으며 변하지 않는다.</li>\n  <li><code class=\"highlighter-rouge\">컨테이너 = 이미지를 실행한 상태</code>, 같은 이미지에서 여러 개의 컨테이너를 생성할 수 있고, 컨테이너의 상태가 바뀌거나 삭제되더라도 이미지는 변하지 않고 그대로 남아있다.</li>\n  <li>이미지는 컨테이너를 실행하기 위한 모든 정보를 가지고 있기 때문에 컴파일 및 여러 패키지 설치가 필요없다.</li>\n  <li>서버가 추가되더라도 만들어 놓은 이미지를 다운받고 컨테이너를 생성만하면 된다.</li>\n  <li>이미지는 ‘Docker hub’에 등록하거나 ‘Docker Registry 저장소’를 직접 만들어 관리할 수 있다.</li>\n</ul>\n\n<blockquote>\n  <p>물리적으로 서버를 줄이면 해당 서버의 데이터가 통째로 날아갈 수도 있기 때문에 서버 개수와 데이터를 저장하는 공간을 별도로 해야한다.</p>\n</blockquote>\n\n<h3 id=\"레이어-저장-방식\">레이어 저장 방식</h3>\n<ul>\n  <li>이미지는 컨테이너 실행을 위한 모든 정보를 가지고 있어서 용량이 엄청나다.</li>\n  <li>하지만 처음 이미지를 다운 받을 때에만 크게 부담이 작용할 뿐, <strong>레이어(Layer)</strong> 라는 개념을 사용함으로써 <strong>파일 추가/수정</strong> 시,  <strong>새로운 레이어만 다운</strong> 받고 이후의 레이어가 이전 레이어를 <strong>참조</strong> 하는 형태로 작용하기 때문에 굉장히 효율적으로 이미지 관리가 가능하다.</li>\n  <li>이미지는 <strong>URL 방식</strong>으로 관리되며 <strong>태그</strong>를 붙일 수 있다.</li>\n  <li>태그 기능을 잘 이용하면 테스트나 롤백도 쉽게 할 수 있다.</li>\n</ul>\n\n<blockquote>\n  <p>배포용 컨테이너의 경우, 이미지는 로컬에서 다 만들어서 넘겨주기  때문에 zsh, git 등과 같은 패키지가 필요하지 않다.</p>\n</blockquote>\n\n<h3 id=\"이미지-생성\">이미지 생성</h3>\n<ul>\n  <li>도커는 이미지를 만들기 위해 <code class=\"highlighter-rouge\">Dockerfile</code>이라는 파일 자체 <strong>DSL(Domain-Specific-Language)</strong> 를 이용하여 이미지 생성 과정을 적는다.</li>\n  <li>서버에 어떤 프로그램을 설치하기 위해 메모장에 따로 적어두고 각각 실행할 필요가 없다. <code class=\"highlighter-rouge\">Dockerfile</code>에 전부 기입하고 그 자체로 관리하면 된다.</li>\n  <li>해당 파일은 소스와 함께 버전 관리가 가능하며 원하면 누구나 이미지 생성 과정을 보고 수정할 수 있다.</li>\n</ul>\n\n<blockquote>\n  <p>로컬에서 도커로 서비스가 작동되면, 서버에서도 동일하게 작동한다.</p>\n</blockquote>\n\n<p>[도커 명령어]</p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code># 이미지 생성\n&gt;&gt;&gt; docker run ubuntu:16.04\n# 생성한 이미지 실행\n&gt;&gt;&gt; docker run --rm -it ubuntu:16.04 /bin/bash\n#\n&gt;&gt;&gt; docker ps\n&gt;&gt;&gt; docker cp . &lt;image-name&gt;:/srv/used-book-store\n&gt;&gt;&gt; docker stop &lt;imgae-name&gt;\n&gt;&gt;&gt; docker run --rm -it updated_ubuntu /bin/zsh\n&gt;&gt;&gt; docker build -t updated ubuntu . # Dockerfile 명령어가 순차적으로 실행, 그 결과가 &gt;&gt;&gt; updated_ubuntu 라는 이미지로 형성\n&gt;&gt;&gt; docker run --rm -it updated_ubuntu /bin/bash\n</code></pre>\n</div>\n\n<p><img src=\"http://localhost:4000/assets/docker-logo.png\" alt=\"docer logo\" class=\"center-image\" /></p>\n\n<blockquote>\n  <p>최근 도커 사용 경향 (≧ω≦)ゞ <br /></p>\n  <ul>\n    <li>서버 1개가 받아들이는 용량은 한정되어있다. 따라서 호스트 안 쪽에서 여러 컨테이너가 작동될 수 있지만, 최근 컨테이너 하나만 작동시키는 경향을 따르고 있다. 즉, <strong>서버 1개에 1개의 프로세서</strong>가 작동시키는 방식이 대세이다. <br /></li>\n    <li>클라이언트로부터 장고가 받는 요청, 장고가 백엔드 처리하는 것, 백엔드를 데이터베이스에 요청 처리하는 것 등 각각의 부하가 다른다. 도커는 이에 따라서 자동으로 스케일링이 되도록한다. <br /></li>\n    <li>스케일링이란? 서버 1개가 받아들이는 용량은 한정, 클라이언트의 요청은 갑자기 늘기도 줄기도 한다. 요청이 늘어나면 물리적인 서버를 늘려야하고, 어느 순간 줄어들면 줄여야한다. 하지만 이 작업은 몹시 어려운 일이다. AWS, Azure 와 같은 클라우드가 늘리고 줄이는 일을 자동으로 처리해주기 때문에 일반 어플리케이션 개발자도 쉽게 서버 관리에 접근할 수 있다.</li>\n  </ul>\n</blockquote>\n"
    } ,
  
    {
      "title"    : "[AWS] 4. AWS 서버 다루기",
      "category" : "AWSaws",
      "tags"     : "aws, django",
      "url"      : "/aws/2017/06/30/(4)Amazon-linux-server.html",
      "date"     : "2017-06-30 00:00:00 +0900",
      "content"   : "<h2 id=\"aws-서버-실행하기\">AWS 서버 실행하기</h2>\n\n<p>서버 실행 at 터미널</p>\n<blockquote>\n  <p>ssh -i ~/.ssh/bbungsang.pem ubuntu@ec2-11-111-111-11.ap-northeast-2.compute.amazonaws.com</p>\n</blockquote>\n\n<p><br /></p>\n\n<h5 id=\"--해당-서버에-처음-접속한-것이라면-마치-처음으로-우분투-리눅스-운영체제를-실행하는-것과-같은-것이므로-필요한-패키지를-설치해야한다\">- 해당 서버에 처음 접속한 것이라면 마치 처음으로 우분투 리눅스 운영체제를 실행하는 것과 같은 것이므로 필요한 패키지를 설치해야한다.</h5>\n\n<h4 id=\"python-pip-설치\">python-pip 설치</h4>\n<p>sudo apt-get install python-pip</p>\n\n<h4 id=\"zsh-설치\">zsh 설치</h4>\n<p>sudo apt-get install zsh</p>\n\n<h4 id=\"oh-my-zsh-설치\">oh-my-zsh 설치</h4>\n<p>sudo curl -l http://install.ohmyz.sh | sh</p>\n\n<h4 id=\"default-shell-변경\">Default shell 변경</h4>\n<p>sudo chsh ubuntu -s /usr/bin/zsh</p>\n\n<h4 id=\"pyenv-requirements-설치\">pyenv requirements 설치</h4>\n<p>sudo apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev \\\nlibreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev xz-utils</p>\n\n<h4 id=\"pyenv-설치\">pyenv 설치</h4>\n<p>curl -L https://raw.githubusercontent.com/yyuu/pyenv-installer/master/bin/pyenv-installer | bash</p>\n\n<h4 id=\"pyenv-설정을-zshrc-에-기록\">pyenv 설정을 .zshrc 에 기록</h4>\n<p>vi ~/.zshrc <br />\nexport PATH=”/home/ubuntu/.pyenv/bin:$PATH” <br />\neval “$(pyenv init -)” <br />\neval “$(pyenv virtualenv-init -)”</p>\n\n<h3 id=\"aws-cli-통해서-로컬에-인스턴스-파일-전송하기\">aws cli 통해서 로컬에 인스턴스 파일 전송하기</h3>\n<p>로컬 컴퓨터와 Linux 인스턴스 간에 파일을 전송하는 방법은 SCP(Secure Copy)를 사용하는 것이다.</p>\n\n<ol>\n  <li>\n    <p>(선택사항) <code class=\"highlighter-rouge\">aws ec2 get-console-output --instance-id &lt;해당 인터페이스의 아이디&gt;</code> 을 통해 얻은 SSH HOST KEY FINGERPRINTS 와 aws 페이지의 finger prints 와 비교한다.</p>\n  </li>\n  <li>\n    <p>명령 쉘에서 지정한 private key 파일의 위치로 이동한다.</p>\n  </li>\n  <li>\n    <p>chomod 를 사용하여 private key 파일을 공개적으로 볼 수 있는지 확인한다. <code class=\"highlighter-rouge\">chmod 400 my-key-pair.pem</code></p>\n  </li>\n  <li>\n    <p>인스턴스의 Public DNS 를 사용하여 인스턴스 파일을 전송한다.</p>\n    <ul>\n      <li><code class=\"highlighter-rouge\">scp -i ~/.ssh/bbungsang.pem -r /home/bbungsang/deploy-ec2 ubuntu@ec2-11-111-111-11.ap-northeast-2.compute.amazonaws.com:/srv/deploy_ec2</code></li>\n      <li>그 전에, AWS 서버의 root 위치의 /srv/ 의 사용자 권한을 살펴보고 권한자가 root 라면, <code class=\"highlighter-rouge\">sudo chown -R ubuntu:ubuntu /srv/</code> 를 통해서 권한을 바꿔준다. 이를 통해서 ubuntu 계정이 접근하면, 쓰기 권한을 받을 수 있다.</li>\n    </ul>\n  </li>\n</ol>\n\n<blockquote>\n  <p>명령어 살펴보기  (๑•̀ㅂ•́)و✧</p>\n  <ul>\n    <li>scp -i ~/.ssh/bbungsang.pem -r /home/bbungsang/deploy-ec2 ubuntu@ec2-11-111-111-11.ap-northeast-2.compute.amazonaws.com:/srv/deploy_ec2</li>\n    <li>scp 는 원래 파일 1개만 업로드한다. 하지만 폴더 자체를 업로드하고 싶다면, 옵션 사항을 주면 된다.</li>\n    <li><strong>-r .</strong> : <code class=\"highlighter-rouge\">r</code> 은 recursive <code class=\"highlighter-rouge\">.</code> 은 앞에 설정한 현재 폴더를 가리킨다.</li>\n    <li>현재 폴더의 모든 내용을 ubuntu server 의 deploy_ec2 라는 폴더 안에 업로드한다는 의미를 가지고 있다.</li>\n  </ul>\n</blockquote>\n\n<h3 id=\"간단한-명령어로-로컬-인스턴스-파일-전송하기\">간단한 명령어로 로컬 인스턴스 파일 전송하기</h3>\n<p>[~/.zshrc]</p>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">]</span>\n<span class=\"n\">alias</span> <span class=\"n\">con</span><span class=\"o\">-</span><span class=\"n\">ec2</span><span class=\"o\">=</span><span class=\"s\">\"ssh -i ~/.ssh/bbungsang.pem ubuntu@ec2-11-111-111-11.ap-northeast-2.compute.amazonaws.com\"</span>\n<span class=\"n\">alias</span> <span class=\"n\">delete</span><span class=\"o\">-</span><span class=\"n\">ec2</span><span class=\"o\">=</span><span class=\"s\">\"scp -i ~/.ssh/bbungsang.pem /home/bbungsang/deploy-ec2 ubuntu@ec2-11-111-111-11.ap-northeast-2.compute.amazonaws.com rm -rf /srv/deploy_ec2\"</span>\n<span class=\"n\">alias</span> <span class=\"n\">scp</span><span class=\"o\">-</span><span class=\"n\">ec2</span><span class=\"o\">-</span><span class=\"n\">ori</span><span class=\"o\">=</span><span class=\"s\">\"scp -i ~/.ssh/bbungsang.pem -r /home/bbungsang/deploy-ec2 ubuntu@ec2-11-111-111-11.ap-northeast-2.compute.amazonaws.com:/srv/deploy_ec2\"</span>\n<span class=\"n\">alias</span> <span class=\"n\">scp</span><span class=\"o\">-</span><span class=\"n\">ec2</span><span class=\"o\">=</span><span class=\"s\">\"delete-ec2 &amp;&amp; scp-ec2-ori\"</span>\n</code></pre>\n</div>\n<ul>\n  <li>‘con-ec2’, ‘scp-ec2’ 의 간단한 명령어를 통해서 서버 실행과 인스턴스 파일 업로드가 가능해진다.</li>\n</ul>\n"
    } ,
  
    {
      "title"    : "[AWS] 3. SSH을 이용하여 Linux 인스턴스에 연결하기",
      "category" : "AWSaws",
      "tags"     : "aws, django, ssh",
      "url"      : "/aws/2017/06/29/(3)SSH-Linux-%E1%84%8B%E1%85%B5%E1%86%AB%E1%84%89%E1%85%B3%E1%84%90%E1%85%A5%E1%86%AB%E1%84%89%E1%85%B3.html",
      "date"     : "2017-06-29 00:00:00 +0900",
      "content"   : "<h2 id=\"ssh-를-사용하여-linux-인스턴스에-연결하기\">SSH 를 사용하여 Linux 인스턴스에 연결하기</h2>\n<p>그 전에 SSH 클라이언트를 설치한다. Linux 의 경우 기본적으로 포함되어 있다.</p>\n<ol>\n  <li>private key(.pem) 와 <em>user_name@public_dns_name</em> 을 지정한다.</li>\n  <li>Amazon Linux 의 경우, 사용자 이름은 <code class=\"highlighter-rouge\">ec2_user</code> Ubuntu 의 경우, 사용자 이름은 <code class=\"highlighter-rouge\">ubuntu</code> 또는 <code class=\"highlighter-rouge\">root</code> 이다.</li>\n</ol>\n\n<blockquote>\n  <p>Ubuntu 기준</p>\n</blockquote>\n\n<p><code class=\"highlighter-rouge\">ssh -i /path/key_pair_name.pem ubuntu@ec2-198-51-100-1.compute-1.amazonaws.com(형태의 public_dns_name)</code>\n<br /><br />\n[UNPROTECTED PRIVATE KEY FILE ERROR]</p>\n<div class=\"language-text highlighter-rouge\"><pre class=\"highlight\"><code>WARNING: UNPROTECTED PRIVATE KEY FILE!\n\n[...]\n</code></pre>\n</div>\n<ul>\n  <li>이와 같은 에러를 뿜뿜할 경우, chmod 400 으로 소유주만 읽을 수 있도록 권한을 설정한다.</li>\n  <li><code class=\"highlighter-rouge\">chmod 400 bbungsang.pem</code></li>\n</ul>\n\n<p>다시 <code class=\"highlighter-rouge\">ssh -i /path/key_pair_name.pem ubuntu@ec2-198-51-100-1.compute-1.amazonaws.com</code> 을 입력하면, 아마존 웹 서버 구동 성공!!</p>\n\n<h2 id=\"aws-명령어-입력하기\">AWS 명령어 입력하기</h2>\n<ul>\n  <li>지금까지 UI 를 통해서 만든 인스턴스와 같이 AWS 에서 제공해주는 기능을 커맨드 라인을 통해서 실행할 수 있다.</li>\n  <li>이를 위해서는 <code class=\"highlighter-rouge\">aws cli</code> 를 설치해야 한다.  (cli = command line interface)</li>\n</ul>\n\n<blockquote>\n  <p>finger printer(지문)</p>\n  <ul>\n    <li>공개키로 만들어낸 특정 문자열, 본래 공개키의 길이는 엄청 길다. 이를 사람이 눈으로 보고 비교할 만큼 쉽게 쓰기 위해서 있는 것이다.</li>\n    <li>EC2 Key Pair 에 명시되어 있다.</li>\n  </ul>\n</blockquote>\n\n<ul>\n  <li>aws ec2 get-console-output –instance-id <해당 인터페이스의=\"\" 아이디=\"\"></해당></li>\n  <li>하지만 에러가 난다. UI 상에선 로그인 과정을 거쳐서 특정 유저에게 접근 권한을 부여하지만, 커맨드 라인에서는 이와 같은 과정이 없기 때문에 access key 가 필요하다.</li>\n</ul>\n\n<blockquote>\n  <p>access key 생성</p>\n  <ul>\n    <li>AWS 페이지의 I AM 에서 Add User 를 통해서 유저를 생성한다.</li>\n    <li>[Set permissions for EC2-User] : Attach existing policies directly 클릭</li>\n    <li>[Policy type] 목록 : AmazonEC2FullAccess 선택</li>\n    <li>secret key 는 생성 후 단 한 번만 제공해준다. 따라서 따로 저장해두는 것을 권장한다.</li>\n    <li>[커맨드 라인] : aws configure 을 입력 후,</li>\n  </ul>\n</blockquote>\n\n<blockquote>\n  <div class=\"language-text highlighter-rouge\"><pre class=\"highlight\"><code>AWS Access Key ID : 생성된 access key\nAWS Secret Access Key : 생성된 secret key\nDefault region name : ap-northeast-2\nDefault output format : json\n</code></pre>\n  </div>\n</blockquote>\n"
    } ,
  
    {
      "title"    : "[AWS] 2. EC2 인스턴스 생성하기",
      "category" : "AWSaws",
      "tags"     : "aws, django, key pair",
      "url"      : "/aws/2017/06/29/(2)EC2-%E1%84%8B%E1%85%B5%E1%86%AB%E1%84%89%E1%85%B3%E1%84%90%E1%85%A5%E1%86%AB%E1%84%89%E1%85%B3-%E1%84%89%E1%85%A2%E1%86%BC%E1%84%89%E1%85%A5%E1%86%BC%E1%84%92%E1%85%A1%E1%84%80%E1%85%B5.html",
      "date"     : "2017-06-29 00:00:00 +0900",
      "content"   : "<h2 id=\"개념-짚고가기\">개념 짚고가기</h2>\n<ul>\n  <li><strong>Ubuntu Linux</strong> : 서버의 <code class=\"highlighter-rouge\">OS</code></li>\n  <li><strong>Nginx</strong> : <code class=\"highlighter-rouge\">웹 서버</code>, 클라이언트로부터 HTTP 요청을 받아 정적인 페이지를 돌려준다.</li>\n  <li><strong>Django</strong> : <code class=\"highlighter-rouge\">웹 어플리케이션</code>, 웹 요청에 대해 동적데이터를 돌려준다.</li>\n  <li><strong>uWSGI</strong> : 웹 서버에서 받은 요청을 웹 어플리케이션에서 처리하도록 도와준다.</li>\n</ul>\n\n<h2 id=\"instance-생성하기\">Instance 생성하기</h2>\n<blockquote>\n  <h4 id=\"ec2elastic-compute-cloud\">EC2(Elastic Compute Cloud)</h4>\n  <p>아마존이 가지고 있는 컴퓨팅 자원 중에서 일부분만 사용자에게 제공하여 웹 규모의 작업을 할 수 있도록 한다.</p>\n</blockquote>\n\n<p><br /></p>\n<h4 id=\"key-pairs-생성\">Key Pairs 생성</h4>\n\n<ul>\n  <li>\n    <p>AWS services ➜ EC2 ➜ Launch Instance</p>\n  </li>\n  <li>Step1: Choose an Amazon Machine Image\n    <ul>\n      <li>Ubuntu Server 16.04 (HVM), SSD Volume Type 을 선택한다.</li>\n    </ul>\n  </li>\n  <li>Step2: Choose an Instance Type\n    <ul>\n      <li>t2.micro 을 선택을 끝으로 Review and Launch 클릭</li>\n    </ul>\n  </li>\n  <li>Step7에서 Launch 클릭: Select an existing key pair or create a new key pair\n    <ul>\n      <li>인스턴스에 접근하기 위해서 public key 와 private key(key pair) 가 필요하다. <br /></li>\n      <li>public key 의 경우 해당 서버에 이미 저장되어 있을 것이다. <br /></li>\n      <li>key pair 를 만든 순간 private 키를 단 한 번만 제공한다. 따라서 local에 저장해놓는 것을 권장한다. <br /></li>\n      <li>Create a new key pair ➜ Key pair name(아무거나) ➜ Download Key Pair(다운로드 폴더에 <code class=\"highlighter-rouge\">Key-pair-name.pem</code>의 형태로 저장될 것이다.)</li>\n    </ul>\n  </li>\n  <li>다운받은 .pem 파일을 ~/.ssh 폴더에 넣기\n    <ul>\n      <li>mv bbungsang.pem ~/.ssh</li>\n    </ul>\n  </li>\n  <li>Launch Instances 클릭하면, 생성되는 중인 인스턴스를 확인할 수 있다.</li>\n</ul>\n"
    } ,
  
    {
      "title"    : "[AWS] 1. 장고 settings 설정하기",
      "category" : "AWSaws",
      "tags"     : "aws, django, json",
      "url"      : "/aws/2017/06/29/(1)django-settings-%E1%84%89%E1%85%A5%E1%86%AF%E1%84%8C%E1%85%A5%E1%86%BC%E1%84%92%E1%85%A1%E1%84%80%E1%85%B5.html",
      "date"     : "2017-06-29 00:00:00 +0900",
      "content"   : "<h2 id=\"1-가상-환경-만든-후-장고-프로젝트-실행하기\">1. 가상 환경 만든 후, 장고 프로젝트 실행하기</h2>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"o\">&gt;</span> <span class=\"n\">pyenv</span> <span class=\"n\">virtualenv</span> <span class=\"mf\">3.4</span><span class=\"o\">.</span><span class=\"mi\">3</span> <span class=\"n\">deploy</span><span class=\"o\">-</span><span class=\"n\">ec2</span>\n<span class=\"c\"># 해당 디렉토리 이동 후 가상 환경 적용</span>\n<span class=\"o\">&gt;</span> <span class=\"n\">pyenv</span> <span class=\"n\">local</span> <span class=\"n\">deploy</span><span class=\"o\">-</span><span class=\"n\">ec2</span>\n<span class=\"c\"># 장고 설치 후 프로젝트 생성하기</span>\n<span class=\"o\">&gt;</span> <span class=\"n\">django</span><span class=\"o\">-</span><span class=\"n\">admin</span> <span class=\"n\">startproject</span> <span class=\"n\">deploy</span><span class=\"o\">-</span><span class=\"n\">ec2</span>\n</code></pre>\n</div>\n<p><br /></p>\n<h2 id=\"2-settings-설정하기\">2. settings 설정하기</h2>\n<h4 id=\"디렉토리-구조\">디렉토리 구조</h4>\n\n<pre><code class=\"language-txt\">project_folder/\n    .config_secret/\n        settings_common.json\n        settings_debug.json\n        settings_deploy.json\n    .config\n        # 기존 settings.py 는 제거한다.\n        settings\n            __init__\n            base.py\n            debug.py\n        [...]\n    django_app/\n    [...]\n</code></pre>\n<p><br /></p>\n<h4 id=\"config_secret-의-json-파일\">.config_secret 의 json 파일</h4>\n<ul>\n  <li><code class=\"highlighter-rouge\">배포 환경</code>과 <code class=\"highlighter-rouge\">로컬 환경</code>에서 사용할 시크릿 값 설정</li>\n  <li>\n    <주의> json 파일의 경우, 마지막 항목에 `,`를 붙이지 않는다.\n</주의>\n  </li>\n  <li><a href=\"\">settings_common.json/settings_debug.json/\nsettings_deploy.json</a></li>\n</ul>\n\n<p><br /></p>\n<h4 id=\"기존의-settingspy-를-가져오되-아래와-같이-설정을-추가\">기존의 settings.py 를 가져오되 아래와 같이 설정을 추가</h4>\n<p><strong>[base.py]</strong></p>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"c\"># Build paths inside the project like this: os.path.join(BASE_DIR, ...)</span>\n<span class=\"n\">BASE_DIR</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">abspath</span><span class=\"p\">(</span><span class=\"n\">__file__</span><span class=\"p\">))))</span>\n<span class=\"n\">ROOT_DIR</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"n\">BASE_DIR</span><span class=\"p\">)</span>\n\n<span class=\"c\"># .config_secret 디렉토리, 하위 파일 경로 설정</span>\n<span class=\"n\">CONFIG_SECRET_DIR</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">ROOT_DIR</span><span class=\"p\">,</span> <span class=\"s\">'.config_secret'</span><span class=\"p\">)</span>\n<span class=\"n\">CONFIG_SECRET_COMMON_FILE</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">CONFIG_SECRET_DIR</span><span class=\"p\">,</span> <span class=\"s\">'settings_common.json'</span><span class=\"p\">)</span>\n<span class=\"n\">CONFIG_SECRET_DEBUG_FILE</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">CONFIG_SECRET_DIR</span><span class=\"p\">,</span> <span class=\"s\">'settings_debug.json'</span><span class=\"p\">)</span>\n<span class=\"n\">CONFIG_SECRET_DEPLOY_FILE</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">CONFIG_SECRET_DIR</span><span class=\"p\">,</span> <span class=\"s\">'settings_deploy.json'</span><span class=\"p\">)</span>\n\n<span class=\"c\"># config_secret 변수에 CONFIG_SECRET_COMMON_FILE 경로의 파일을 읽은 값을 할당</span>\n<span class=\"n\">config_secret_common</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">CONFIG_SECRET_COMMON_FILE</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">())</span>\n\n<span class=\"c\"># SECURITY WARNING: keep the secret key used in production secret!</span>\n<span class=\"c\"># config_secret_common 내의 django 키값 안의 secret_key 값 할당</span>\n<span class=\"n\">SECRET_KEY</span> <span class=\"o\">=</span> <span class=\"n\">config_secret_common</span><span class=\"p\">[</span><span class=\"s\">'django'</span><span class=\"p\">][</span><span class=\"s\">'secret_key'</span><span class=\"p\">]</span>\n\n<span class=\"c\"># debug.py 에서 명시해주므로 아래 코드는 주석 처리한다.</span>\n<span class=\"c\"># DEBUG = True</span>\n<span class=\"c\"># ALLOWED_HOSTS = []</span>\n</code></pre>\n</div>\n<p><strong>[debug.py]</strong></p>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">.base</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"n\">config_secret_debug</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">CONFIG_SECRET_DEBUG_FILE</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">())</span>\n\n<span class=\"n\">DEBUG</span> <span class=\"o\">=</span> <span class=\"bp\">True</span>\n<span class=\"n\">ALLOWED_HOSTS</span> <span class=\"o\">=</span> <span class=\"n\">config_secret_debug</span><span class=\"p\">[</span><span class=\"s\">'django'</span><span class=\"p\">][</span><span class=\"s\">'allowed_hosts'</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n<ul>\n  <li><em>DEBUG</em> 와 <em>ALLOWED_HOSTS</em> 에 따라서 runserver 명령어가 달라진다.</li>\n  <li><code class=\"highlighter-rouge\">./manage.py runserver</code> ➜ <br />\n<code class=\"highlighter-rouge\">./manage.py runserver --settings=config.settings.base</code> ➜ <br />\n<code class=\"highlighter-rouge\">./manage.py runserver --settings=config.settings.debug</code></li>\n</ul>\n"
    } ,
  
    {
      "title"    : "장고 폼",
      "category" : "Do 장고걸스!djangogirls",
      "tags"     : "Django, Djangogirls, Form",
      "url"      : "/do%20%EC%9E%A5%EA%B3%A0%EA%B1%B8%EC%8A%A4!/djangogirls/2017/06/23/djangogirls-django-form.html",
      "date"     : "2017-06-23 00:00:00 +0900",
      "content"   : "<blockquote>\n  <p><a href=\"https://tutorial.djangogirls.org/ko/\">장고걸스 튜토리얼</a>을 토대로 작성한 것입니다. 이 장은 장고 폼에 대한 개념을 간략히 설명하고, 연관된 뷰, URL, 템플릿을 작성합니다.</p>\n</blockquote>\n\n<p>장고 폼은 HTML의 복잡한 태그 없이 아주 간단히 양식을 만들 수 있고, <code class=\"highlighter-rouge\">ModelForm</code>을 통하여 자동으로 모델에 결과물을 저장할 수 있다. 또한 장고 폼은 입력받은 데이터에 대한 유효성 검사를 하는 데 최상의 도구이다.</p>\n\n<h3 id=\"blog-디렉토리-안에-폼-파일-만들기\">blog 디렉토리 안에 폼 파일 만들기</h3>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>blog\n└── forms.py\n</code></pre>\n</div>\n\n<p>[blog/forms.py]</p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django</span> <span class=\"kn\">import</span> <span class=\"n\">forms</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">.models</span> <span class=\"kn\">import</span> <span class=\"n\">Post</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">PostForm</span><span class=\"p\">(</span><span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">ModelForm</span><span class=\"p\">):</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Post</span>\n        <span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s\">'title'</span><span class=\"p\">,</span> <span class=\"s\">'text'</span><span class=\"p\">,)</span>\n</code></pre>\n</div>\n\n<ul>\n  <li>PostForm은 만들 폼의 이름이고, ModelForm을 사용하기 위해 (forms.ModelForm)을 상속받는다.</li>\n  <li><code class=\"highlighter-rouge\">class Meta</code> 에서 model 변수를 통해 Post 모델을 사용할 것임을 명시하고, 폼에 쓰일 필드로 ‘title’과 ‘text’를 튜플 형태로 fields 변수에 할당한다.</li>\n</ul>\n\n<h3 id=\"템플릿에서-폼-사용하기\">템플릿에서 폼 사용하기</h3>\n"
    } ,
  
    {
      "title"    : "[Try Hello World] Level2 2016년",
      "category" : "Solve Algorithm!tryhelloworld",
      "tags"     : "Alogorithm, Level2",
      "url"      : "/solve%20algorithm!/tryhelloworld/2017/06/19/tryhelloworld-level2-1.html",
      "date"     : "2017-06-19 00:00:00 +0900",
      "content"   : "<h2 id=\"2016년\">2016년</h2>\n\n<p>2016년 1월 1일은 금요일입니다. 2016년 A월 B일은 무슨 요일일까요? 두 수 A,B를 입력받아 A월 B일이 무슨 요일인지 출력하는 getDayName 함수를 완성하세요.</p>\n\n<p>요일의 이름은 일요일부터 토요일까지 각각</p>\n\n<p><code class=\"highlighter-rouge\">SUN,MON,TUE,WED,THU,FRI,SAT</code></p>\n\n<p>를 출력해주면 됩니다. 예를 들어 A=5, B=24가 입력된다면 5월 24일은 화요일이므로 <code class=\"highlighter-rouge\">TUE</code> 를 반환하면 됩니다.</p>\n\n<ul>\n  <li>내 풀이</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">date</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">getDayName</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">):</span>\n    <span class=\"n\">week_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">'MON'</span><span class=\"p\">,</span> <span class=\"s\">'TUE'</span><span class=\"p\">,</span> <span class=\"s\">'WED'</span><span class=\"p\">,</span> <span class=\"s\">'THU'</span><span class=\"p\">,</span> <span class=\"s\">'FRI'</span><span class=\"p\">,</span> <span class=\"s\">'SAT'</span><span class=\"p\">,</span> <span class=\"s\">'SUN'</span><span class=\"p\">]</span>\n    <span class=\"n\">week_int</span> <span class=\"o\">=</span> <span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2016</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">weekday</span><span class=\"p\">()</span>\n    <span class=\"k\">return</span> <span class=\"n\">week_list</span><span class=\"p\">[</span><span class=\"n\">week_int</span><span class=\"p\">]</span>\n\n<span class=\"c\">#아래 코드는 테스트를 위한 출력 코드입니다.</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">getDayName</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<ul>\n  <li>다른 사람 풀이</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">getDayName</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">):</span>\n    <span class=\"n\">months</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">31</span><span class=\"p\">,</span> <span class=\"mi\">29</span><span class=\"p\">,</span> <span class=\"mi\">31</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">31</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">31</span><span class=\"p\">,</span> <span class=\"mi\">31</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">31</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">31</span><span class=\"p\">]</span>\n    <span class=\"n\">days</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">'FRI'</span><span class=\"p\">,</span> <span class=\"s\">'SAT'</span><span class=\"p\">,</span> <span class=\"s\">'SUN'</span><span class=\"p\">,</span> <span class=\"s\">'MON'</span><span class=\"p\">,</span> <span class=\"s\">'TUE'</span><span class=\"p\">,</span> <span class=\"s\">'WED'</span><span class=\"p\">,</span> <span class=\"s\">'THU'</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"n\">days</span><span class=\"p\">[(</span><span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">months</span><span class=\"p\">[:</span><span class=\"n\">a</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span><span class=\"o\">+</span><span class=\"n\">b</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">%</span><span class=\"mi\">7</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n\n<h2 id=\"소감\"><em>소감</em></h2>\n<ul>\n  <li>다른 사람의 경우 내장 함수 안 쓰고 푼 좋은 예인 것 같다.</li>\n</ul>\n"
    } ,
  
    {
      "title"    : "[인스타그램] 로그인 기능 구현하기",
      "category" : "인스타그램instargram",
      "tags"     : "django, instargram",
      "url"      : "/%EC%9D%B8%EC%8A%A4%ED%83%80%EA%B7%B8%EB%9E%A8/instargram/2017/06/16/instargram-memberapp-login.html",
      "date"     : "2017-06-16 00:00:00 +0900",
      "content"   : "<h1 id=\"로그인-기능-구현하기\">로그인 기능 구현하기</h1>\n<p>폼 -&gt; 뷰 -&gt; URL -&gt; 템플릿 순서로 구현하려고 한다.</p>\n\n<blockquote>\n  <p>고려해야할 부분</p>\n  <ol>\n    <li>아이디와 비밀번호를 입력할 폼 작성</li>\n    <li>POST 요청이 아닐 경우, 빈 로그인 폼을 받아서 로그인 페이지에 넘긴다.</li>\n    <li>사용자가 폼을 입력하지 않으면, 입력 요청 메세지를 띄우며 다음 페이지로 이동을 막는다.</li>\n    <li>입력한 아이디와 비밀번호가 데이터베이스의 데이터와 일치하지 않을 경우, 에러 메세지를 뿜뿜하며 다음 페이지로 이동을 막고, 일치할 경우, 장고 로그인 메서드를 실행하고 post_list 페이지로 이동.</li>\n    <li>이미 로그인한 상태에서 로그인 페이지로 이동한 것이라면 post_list 페이지로 되돌린다.</li>\n  </ol>\n</blockquote>\n\n<h3 id=\"1-장고-폼에서-위젯을-생성하고-데이터-유효성-및-하자-여부-검사하기\">1. 장고 폼에서 위젯을 생성하고, 데이터 유효성 및 하자 여부 검사하기</h3>\n<ul>\n  <li>LoginForm, SignupForm과 앞으로 더 필요할 수 있는 폼들을 파이썬 패키지를 생성하여 하위 항목으로 둔다. 왜? 하나의 파일에 모든 폼 클래스를 작성하면, 코드가 길어져서 보기에 불편함을 겪을 수 있기 때문이다.</li>\n  <li>member 앱 디렉토리에 forms 패키지를 생성하고 login.py를 생성하여 아래와 같이 작성한다.</li>\n</ul>\n\n<p>[forms/login.py] : 폼 위젯 만들기</p>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django</span> <span class=\"kn\">import</span> <span class=\"n\">forms</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">LoginForm</span><span class=\"p\">(</span><span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">Form</span><span class=\"p\">):</span>\n\n  <span class=\"c\"># 문자열을 받는 폼 필드에 최대 길이 30자, 문자열을 받는 위젯의 속성을 포함하여 username 에 할당</span>\n  <span class=\"c\"># 즉, username 이 곧 하나의 필드가 된다.</span>\n  <span class=\"n\">username</span> <span class=\"o\">=</span> <span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span>\n    <span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">,</span>\n    <span class=\"n\">widget</span><span class=\"o\">=</span><span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">TextInput</span><span class=\"p\">(</span>\n      <span class=\"n\">attrs</span><span class=\"o\">=</span><span class=\"p\">{</span>\n        <span class=\"s\">'placeholder'</span><span class=\"p\">:</span> <span class=\"s\">'아이디를 입력해주세요.'</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">)</span>\n  <span class=\"p\">)</span> <span class=\"c\"># 이 괄호 끝에 튜플이나 딕셔너리처럼 습관적으로 ','을 넣었었는데, 그 뒤 password 필드를 무시하게 되는 일이 발생했었다.</span>\n\n  <span class=\"c\"># username 과 같이 입력 받을 password 필드 정의, 위젯의 경우, 패스워드는 문자열이 드러나면 곤란하기 때문에 forms.PasswordInput() 을 통해 문자열을 가려준다.</span>\n  <span class=\"n\">password</span> <span class=\"o\">=</span> <span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span>\n      <span class=\"n\">widget</span><span class=\"o\">=</span><span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">PasswordInput</span><span class=\"p\">(</span>\n          <span class=\"n\">attrs</span><span class=\"o\">=</span><span class=\"p\">{</span>\n              <span class=\"s\">'placeholder'</span><span class=\"p\">:</span> <span class=\"s\">'비밀번호를 입력해주세요.'</span>\n          <span class=\"p\">}</span>\n      <span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<h4 id=\"장고가-제공하는-유효성-검사기\">장고가 제공하는 유효성 검사기</h4>\n<ul>\n  <li>clean() 메서드는 단일 인수를 사용하여 잘못된 입력에 대해 ValidationError를 발생시키는 간단한 함수이다.</li>\n  <li>일반적으로 <code class=\"highlighter-rouge\">is_valid()</code> 를 호출할 때 실행되고, <code class=\"highlighter-rouge\">cleaned_data</code> 에 딕셔너리 { ‘html-form-name’: ‘html-form-value’ } 의 형태로 할당된다.</li>\n  <li>양식을 처리하면서 세 가지 유형 to_python(), validate(), run_validators() 을 순차적으로 실행한다.</li>\n  <li>처리 중인 데이터에 문제가 있으면 ValidationError 생성자에 관련 정보를 전달하여 클리닝 메서드가 ValidationError 를 발생시킨다.</li>\n  <li>\n    <p>ValidationError 가 발생하지 않으면 정리된 데이터를 파이썬 객체로 반환해야 한다.</p>\n  </li>\n  <li><strong>clean() 메서드</strong>\n    <ul>\n      <li>to_python(), validate(), run_validators() 를 올바른 순서로 실행하고 오류 전파</li>\n      <li>ValidationError를 발생시키는 메서드가 있으면 유효성 검사가 중지되고 해당 오류가 발생, 깨끗한 데이터를 반환한 다음 폼의 cleaned_data 사전에 삽입</li>\n      <li>self.cleaned_data에서 필드 값을 찾고 이 시점에 파이썬 객체가 된다.</li>\n    </ul>\n  </li>\n  <li><strong>authenticate() 메서드</strong>\n    <ul>\n      <li>자격 증명이 유효한 경우, User 객체를 반환, 유효하지 않으면 None을 반환한다.</li>\n      <li>request 는 authenticate() 를 통과한 옵션 HttpRequest 다.</li>\n    </ul>\n  </li>\n  <li>authenticate() 를 통해 인증에 성공하면, cleaned_data 에 ‘user’ 를 키값으로 User 객체를 할당한다.</li>\n</ul>\n\n<p>[forms/login.py] : 데이터 유효성 및 하자 여부 검사하기</p>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"c\">#...</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.contrib.auth</span> <span class=\"kn\">import</span> <span class=\"n\">authenticate</span>\n\n<span class=\"c\">#...</span>\n<span class=\"k\">def</span> <span class=\"nf\">clean</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n\n    <span class=\"c\"># is_valid() 가 실행되면서 사용자로 부터 폼에서 입력 받은 {'username': '사용자가 입력한 값', 'password': '사용자가 입력한 값'}이 cleaned_data 사전에 삽입될 것이다.</span>\n    <span class=\"c\"># cleaned_data 사전으로 부터 username 과 password key 의 value 를 각각의 변수에 할당한다.  </span>\n    <span class=\"n\">username</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cleaned_data</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">\"username\"</span><span class=\"p\">)</span>\n    <span class=\"n\">password</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cleaned_data</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">\"password\"</span><span class=\"p\">)</span>\n\n    <span class=\"c\"># value 가 유효하면 User 객체를 user 에 할당하고 유효하지 않으면 None 이 할당된다.</span>\n    <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">authenticate</span><span class=\"p\">(</span>\n        <span class=\"n\">username</span><span class=\"o\">=</span><span class=\"n\">username</span><span class=\"p\">,</span>\n        <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"n\">password</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"c\"># None 이 아니면(무효하지 않으면), cleaned_data 사전에 'user' 를 key 로 User 객체를 value 로 삽입한다.</span>\n    <span class=\"k\">if</span> <span class=\"n\">user</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cleaned_data</span><span class=\"p\">[</span><span class=\"s\">'user'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">user</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">ValidationError</span><span class=\"p\">(</span>\n            <span class=\"s\">'Login credentials not valid!'</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"c\"># {'username': '사용자가 입력한 값', 'password': '사용자가 입력한 값', 'user': User 객체} 를 반환한다.    </span>\n    <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cleaned_data</span>\n</code></pre>\n</div>\n\n<h3 id=\"2-post-요청이-아닐-경우-빈-로그인-폼을-받아서-로그인-페이지로-넘기기\">2. POST 요청이 아닐 경우, 빈 로그인 폼을 받아서 로그인 페이지로 넘기기</h3>\n<ul>\n  <li>이 부분은 뷰가 처리한다.</li>\n</ul>\n\n<p>[member/views.py] 에서 로그인을 위해 사용된 모듈</p>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.shortcuts</span> <span class=\"kn\">import</span> <span class=\"n\">render</span><span class=\"p\">,</span> <span class=\"n\">redirect</span>\n<span class=\"kn\">from</span> <span class=\"nn\">member.forms.login</span> <span class=\"kn\">import</span> <span class=\"n\">LoginForm</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.contrib.auth</span> <span class=\"kn\">import</span> <span class=\"n\">login</span> <span class=\"k\">as</span> <span class=\"n\">django_login</span><span class=\"p\">,</span> <span class=\"n\">logout</span> <span class=\"k\">as</span> <span class=\"n\">django_logout</span><span class=\"p\">,</span>\n</code></pre>\n</div>\n\n<p>[member/views.py]</p>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">login</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n  <span class=\"k\">if</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">method</span> <span class=\"o\">==</span> <span class=\"s\">'POST'</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n  <span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"n\">form</span> <span class=\"o\">=</span> <span class=\"n\">LoginForm</span><span class=\"p\">()</span>\n    <span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n      <span class=\"s\">'form'</span><span class=\"p\">:</span> <span class=\"n\">form</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"s\">'member/login.html'</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<h3 id=\"3-사용자가-폼을-입력하지-않으면-입력-요청-메세지를-띄우며-다음-페이지-이동-막기\">3. 사용자가 폼을 입력하지 않으면, 입력 요청 메세지를 띄우며 다음 페이지 이동 막기</h3>\n<ul>\n  <li>이 부분은 장고에서 알아서 해준다. 친절한 장고씨♡</li>\n</ul>\n\n<h3 id=\"4-입력한-아이디와-비밀번호가-데이터베이스-데이터와-일치하지-않으면-에러-메세지-뿜뿜-하지만-일치하면-로그인-하기\">4. 입력한 아이디와 비밀번호가 데이터베이스 데이터와 일치하지 않으면, 에러 메세지 뿜뿜! 하지만 일치하면, 로그인 하기</h3>\n<ul>\n  <li>뷰에서 is_valid() 가 실행되면서 폼의 authenticate() 를 통해 데이터가 일치하면 User 객체를, 데이터가 없거나 일치하지 않으면 None 을 반환한다.</li>\n  <li>None 일 경우 ‘Login credentials not valid!’ 메세지를 띄우며 에러를 일으킨다.</li>\n</ul>\n\n<p>[member/views.py]</p>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">login</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n  <span class=\"k\">if</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">method</span> <span class=\"o\">==</span> <span class=\"s\">'POST'</span><span class=\"p\">:</span>\n    <span class=\"n\">form</span> <span class=\"o\">=</span> <span class=\"n\">LoginForm</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">form</span><span class=\"o\">.</span><span class=\"n\">is_valid</span><span class=\"p\">():</span>\n\n      <span class=\"c\"># User 객체를 얻어서</span>\n      <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">cleaned_data</span><span class=\"p\">[</span><span class=\"s\">'user'</span><span class=\"p\">]</span>\n\n      <span class=\"c\"># 장고 로그인 메서드의 인자로 전달하여 로그인을 실행한다.</span>\n      <span class=\"n\">django_login</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">user</span><span class=\"p\">)</span>\n      <span class=\"k\">return</span> <span class=\"n\">redirect</span><span class=\"p\">(</span><span class=\"s\">'post:post_list'</span><span class=\"p\">)</span>\n    <span class=\"c\">#...</span>\n</code></pre>\n</div>\n\n<h3 id=\"5-이미-로그인한-상태에서-로그인-페이지로-이동한-것이라면-post_list-페이지로-튕겨내기\">5. 이미 로그인한 상태에서 로그인 페이지로 이동한 것이라면 post_list 페이지로 튕겨내기</h3>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">login</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n  <span class=\"n\">form</span> <span class=\"o\">=</span> <span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">LoginForm</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"p\">)</span>\n  <span class=\"k\">if</span> <span class=\"n\">form</span><span class=\"o\">.</span><span class=\"n\">is_valid</span><span class=\"p\">():</span>\n    <span class=\"c\">#...</span>\n  <span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">is_authenticated</span><span class=\"p\">():</span>\n      <span class=\"k\">return</span> <span class=\"n\">redirect</span><span class=\"p\">(</span><span class=\"s\">'post:post_list'</span><span class=\"p\">)</span>\n    <span class=\"c\">#...</span>\n</code></pre>\n</div>\n"
    } ,
  
    {
      "title"    : "[인스타그램] post앱 뷰, URL, 템플릿(2) - post_detail",
      "category" : "인스타그램instargram",
      "tags"     : "django, instargram",
      "url"      : "/%EC%9D%B8%EC%8A%A4%ED%83%80%EA%B7%B8%EB%9E%A8/instargram/2017/06/15/instargram-postapp-view-url-template(2).html",
      "date"     : "2017-06-15 00:00:00 +0900",
      "content"   : "<h3 id=\"post_detail-뷰-구상하기\">post_detail 뷰 구상하기</h3>\n<ul>\n  <li>Post 모델에 해당 데이터가 존재하면, 인자로 받은 pk와 동일한 값이 포함된 Row 데이터를 post 변수에 할당한다.</li>\n  <li>데이터가 존재하지 않으면, post/post_list.html 로 돌아간다.</li>\n  <li>render() 를 통하여 post 의 값을 딕셔너리 형태로 post_detail.html 에 전달한다.</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">post_detail</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">post_pk</span><span class=\"p\">):</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">post</span> <span class=\"o\">=</span> <span class=\"n\">Post</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">pk</span><span class=\"o\">=</span><span class=\"n\">post_pk</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"n\">Post</span><span class=\"o\">.</span><span class=\"n\">DoseNotExist</span><span class=\"p\">:</span>\n\n        <span class=\"c\"># redirect('post:post_list') 과 같은 역할을 한다.</span>\n        <span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"n\">reverse</span><span class=\"p\">(</span><span class=\"s\">'post:post_list'</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">HttpResponseRedirect</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span>\n\n    <span class=\"c\"># 템플릿을 반환하는 방법은 간단하게 render() 를 사용하는 방식과, template_get() 을 사용하는 약간 복잡한 방법이 있다.</span>\n    <span class=\"c\">### 1. render()</span>\n    <span class=\"s\">'''\n    return render(\n        request,\n        'post/post_detail.html',\n        {\n            'post': post,\n        },\n    )\n    '''</span>\n\n    <span class=\"c\">### 2. template_get()</span>\n    <span class=\"s\">'''\n    template_get() 에 의해 반환된 템플릿 객체는 render(context=None, request=None) 를 제공해야한다.\n    context 는 반드시 딕셔너리 형태여야 한다.\n    render() 를 사용해서 template 을 string 으로 변환되면 HttpResponse 형태로 반환한다.\n    '''</span>\n\n    <span class=\"c\"># get_template() 를 통해 post/post_detail.html 템플릿을 로드한다.</span>\n    <span class=\"n\">template</span> <span class=\"o\">=</span> <span class=\"n\">loader</span><span class=\"o\">.</span><span class=\"n\">get_template</span><span class=\"p\">(</span><span class=\"s\">'post/post_detail.html'</span><span class=\"p\">)</span>\n    <span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s\">'post'</span><span class=\"p\">:</span> <span class=\"n\">post</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c\"># 템플릿 객체를 render() 를 통해서 string 으로 변환하고 render_to_string 변수에 할당한다.</span>\n    <span class=\"n\">render_to_string</span> <span class=\"o\">=</span> <span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"o\">=</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"o\">=</span><span class=\"n\">request</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">HttpResponse</span><span class=\"p\">(</span><span class=\"n\">render_to_string</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<h3 id=\"post_detail-url-구상하기\">post_detail URL 구상하기</h3>\n<ul>\n  <li>Post 모델로부터 불러온 pk 값을 매개로 정규표현식을 통해 post_detail URL 을 만든다.</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"o\">...</span>\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n  <span class=\"o\">...</span>\n  <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"s\">r'^(?P&lt;post_pk&gt;</span><span class=\"err\">\\</span><span class=\"s\">d+)/$'</span><span class=\"p\">,</span> <span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">post_detail</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s\">'post_detail'</span><span class=\"p\">)</span>\n<span class=\"p\">]</span>\n<span class=\"o\">...</span>\n</code></pre>\n</div>\n\n<h3 id=\"기본-골격이-되는-부모페이지-basehtml\">기본 골격이 되는 부모페이지 base.html</h3>\n<ul>\n  <li>templates 디렉토리 하위에 common 디렉토리 생성 후, base.html 을 생성한다.</li>\n</ul>\n\n<p>[common/base.html]</p>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code>\n<span class=\"o\">...</span> <span class=\"n\">html</span> <span class=\"err\">구성하는</span> <span class=\"err\">기본</span> <span class=\"err\">태그들</span>\n<span class=\"o\">&lt;</span><span class=\"n\">body</span><span class=\"o\">&gt;</span>\n  <span class=\"p\">{</span><span class=\"o\">%</span> <span class=\"n\">block</span> <span class=\"n\">content</span> <span class=\"o\">%</span><span class=\"p\">}</span>\n  <span class=\"p\">{</span><span class=\"o\">%</span> <span class=\"n\">endblock</span> <span class=\"o\">%</span><span class=\"p\">}</span>\n<span class=\"o\">&lt;/</span><span class=\"n\">body</span><span class=\"o\">&gt;</span>\n\n</code></pre>\n</div>\n<ul>\n  <li>base.html 을 상속 받을 페이지에 ‘extends’를 통해서 상속시킨다.</li>\n</ul>\n\n<p>[post_list.html], [post_detail] 등 자식 페이지들</p>\n<div class=\"language-html highlighter-rouge\"><pre class=\"highlight\"><code>\n{% extends 'common/base.html' %}\n{% block content %}\n  #... 깃 코드 참조\n{% endblock %}\n\n</code></pre>\n</div>\n\n<h3 id=\"post_list와-post_detail이-공통으로-사용할-페이지-posthtml\">post_list와 post_detail이 공통으로 사용할 페이지 post.html</h3>\n<ul>\n  <li>tempaltes 디렉토리 아래 include 디렉토리 생성 후, post.html 작성</li>\n</ul>\n\n<p>[include/post.html]</p>\n<div class=\"language-html highlighter-rouge\"><pre class=\"highlight\"><code>#... 템플릿 언어를 활용해서 작성, 깃 코드 참조\n</code></pre>\n</div>\n\n<p>[post_list.html], [post_detail] 에 include</p>\n<div class=\"language-html highlighter-rouge\"><pre class=\"highlight\"><code>\n...\n{% include 'include/post.html' %}\n\n</code></pre>\n</div>\n<ul>\n  <li>‘include’를 통해 post.html 을 포함시킨다.</li>\n</ul>\n\n<blockquote>\n  <p>Git Code Address ヾ(๑ㆁᗜㆁ๑)ﾉ</p>\n  <ul>\n    <li><a href=\"https://github.com/bbungsang/Instargram-project/blob/master/instargram/post/views.py\">post/veiws.py</a></li>\n    <li><a href=\"https://github.com/bbungsang/Instargram-project/blob/master/instargram/post/urls.py\">post/urls.py</a></li>\n    <li><a href=\"https://github.com/bbungsang/Instargram-project/tree/master/instargram/templates\">templates</a></li>\n  </ul>\n</blockquote>\n"
    } ,
  
    {
      "title"    : "[인스타그램] post앱 뷰, URL, 템플릿(1) - post_list",
      "category" : "인스타그램instargram",
      "tags"     : "django, instargram",
      "url"      : "/%EC%9D%B8%EC%8A%A4%ED%83%80%EA%B7%B8%EB%9E%A8/instargram/2017/06/15/instargram-postapp-view-url-template(1).html",
      "date"     : "2017-06-15 00:00:00 +0900",
      "content"   : "<h2 id=\"첫번째-뷰-url-템플릿-설정하기\">첫번째 뷰, URL, 템플릿 설정하기</h2>\n<h3 id=\"첫번째-뷰-구상하기\">첫번째 뷰 구상하기</h3>\n<ul>\n  <li>Post 모델의 데이터를 전부 불러와서 리스트 형태로 화면에 순차적으로 출력</li>\n</ul>\n\n<p>[post/views.py]</p>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.shortcuts</span> <span class=\"kn\">import</span> <span class=\"n\">render</span>\n\n<span class=\"c\"># 1. Post 모델을 호출할 것이므로 models.py 의 Post 를 임포트한다.</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.models</span> <span class=\"kn\">import</span> <span class=\"n\">Post</span>\n\n<span class=\"c\"># 2. url 로 부터 전달되어 실행할 함수를 작성한다.</span>\n<span class=\"k\">def</span> <span class=\"nf\">post_list</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n\n  <span class=\"c\"># 3. Post 모델의 모든 데이터를 이터레이터 형태로 받아와서 posts 변수에 할당</span>\n  <span class=\"n\">posts</span> <span class=\"o\">=</span> <span class=\"n\">Post</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"nb\">all</span><span class=\"p\">()</span>\n\n  <span class=\"c\"># 4. 함수 내부에서 정의된 값을 템플릿에 넘겨주기 위해 딕셔너리 형태의 context 정의.</span>\n  <span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">'posts'</span><span class=\"p\">:</span> <span class=\"n\">posts</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"c\"># 5. render() 의 첫번째 인자: 외부로 부터 요청된 값인 request, 두번째 인자: 값을 받아서 보여줄 템플릿, 세번째 인자: context</span>\n  <span class=\"k\">return</span> <span class=\"n\">render</span><span class=\"p\">(</span>\n    <span class=\"n\">request</span><span class=\"p\">,</span>\n    <span class=\"s\">'post/post_list.html'</span><span class=\"p\">,</span>\n    <span class=\"n\">context</span>\n  <span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<h3 id=\"첫번째-url-구상하기\">첫번째 URL 구상하기</h3>\n<ul>\n  <li>등록한 어플리케이션의 뷰를 사용하기 위해서는 프로젝트 urls.py 에 include 시켜줘야한다. 이 경우 어플리케이션을 생성할 때마다 1번만 해주면 된다.</li>\n</ul>\n\n<p>[config/urls.py]</p>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.conf.urls</span> <span class=\"kn\">import</span> <span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">include</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.contrib</span> <span class=\"kn\">import</span> <span class=\"n\">admin</span>\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"s\">r'^admin/'</span><span class=\"p\">,</span> <span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">site</span><span class=\"o\">.</span><span class=\"n\">urls</span><span class=\"p\">),</span>\n    <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"s\">r'^post/'</span><span class=\"p\">,</span> <span class=\"n\">include</span><span class=\"p\">(</span><span class=\"s\">'post.urls'</span><span class=\"p\">)),</span>\n<span class=\"p\">]</span>\n</code></pre>\n</div>\n<p>[post/urls.py]</p>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.conf.urls</span> <span class=\"kn\">import</span> <span class=\"n\">url</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.</span> <span class=\"kn\">import</span> <span class=\"n\">views</span>\n\n<span class=\"c\"># 뷰의 key로 앱 이름 'post'를 지정해준다.</span>\n<span class=\"n\">app</span><span class=\"o\">-</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s\">'post'</span>\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n\n  <span class=\"c\"># /post/의 URL로 post_list라는 이름의 뷰가 할당되고, 뷰를 식별하기 위해 이름을 붙임</span>\n  <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"s\">r'^$'</span><span class=\"p\">,</span> <span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">post_list</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">post_list</span><span class=\"p\">),</span>\n<span class=\"p\">]</span>\n</code></pre>\n</div>\n\n<h3 id=\"첫번째-템플릿-구상하기\">첫번째 템플릿 구상하기</h3>\n<ul>\n  <li>여러 어플리케이션이 공통으로 템플릿을 이용할 수 있도록 루트 폴더 아래 템플릿 폴더를 지정할 것이다. 이를 위해서 우선 settings.py에서 템플릿을 인식할 폴더의 위치를 아래와 같이 명시해줘야 한다.</li>\n</ul>\n\n<p>[config/settins.py]</p>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"o\">...</span>\n<span class=\"c\"># root-dir/templates</span>\n<span class=\"n\">TEMPLATE_DIR</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">BASE_DIR</span><span class=\"p\">,</span> <span class=\"s\">'templates'</span><span class=\"p\">)</span>\n\n<span class=\"n\">TEMPLATES</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n  <span class=\"p\">{</span>\n    <span class=\"c\">#...</span>\n    <span class=\"s\">'DIRS'</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"n\">TEMPLATE_DIR</span><span class=\"p\">,</span>\n    <span class=\"p\">],</span>\n    <span class=\"c\">#...</span>\n  <span class=\"p\">}</span>\n  <span class=\"c\">#...</span>\n</code></pre>\n</div>\n<ul>\n  <li>이제 /post/ 의 URL로 접속하면 화면이 잘 뜬다. 하지만 이미지를 못 불러온다. 이미지를 불러올 수 있도록 몇 가지 설정해야 할 부분이 있다.</li>\n</ul>\n\n<ol>\n  <li>Pillow 설치하기(Ubuntu 기준)</li>\n</ol>\n\n<ul>\n  <li>Pillow 를 설치하기 전에 설치해야 할 것</li>\n  <li>$sudo apt-get install libtiff5-dev libjpeg8-dev zlib1g-dev \\\nlibfreetype6-dev liblcms2-dev libwebp-dev tcl8.6-dev tk8.6-dev python-tk</li>\n  <li>사전 설치작업 완료 후, Pillow 설치하기\n    <ul>\n      <li>$ pip install Pillow</li>\n    </ul>\n  </li>\n</ul>\n\n<ol>\n  <li>루트 폴더 아래 <code class=\"highlighter-rouge\">media</code> 폴더 생성 후, settings.py 에서 경로 설정과 urls.py 에 media 의 파일을 읽어올 수 있도록 아래와 같이 지정해준다.</li>\n</ol>\n\n<p>[config/settings.py]</p>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"o\">...</span>\n<span class=\"c\"># root-dir/media</span>\n<span class=\"n\">MEDIA_ROOT</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">BASE_DIR</span><span class=\"p\">,</span> <span class=\"s\">'media'</span><span class=\"p\">)</span>\n\n<span class=\"n\">MEDIA_URL</span> <span class=\"o\">=</span> <span class=\"s\">'/media/'</span>\n<span class=\"o\">...</span>\n</code></pre>\n</div>\n<p>[config/urls.py]</p>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"o\">...</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.conf</span> <span class=\"kn\">import</span> <span class=\"n\">settings</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.conf.urls.static</span> <span class=\"kn\">import</span> <span class=\"n\">static</span>\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n  <span class=\"o\">...</span>\n<span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">static</span><span class=\"p\">(</span><span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">MEDIA_URL</span><span class=\"p\">,</span> <span class=\"n\">document_root</span><span class=\"o\">=</span><span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">MEDIA_ROOT</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n<ul>\n  <li>이미지 출력 성공!</li>\n</ul>\n"
    } ,
  
    {
      "title"    : "[인스타그램] post앱 모델",
      "category" : "인스타그램instargram",
      "tags"     : "django, instargram",
      "url"      : "/%EC%9D%B8%EC%8A%A4%ED%83%80%EA%B7%B8%EB%9E%A8/instargram/2017/06/14/instargram-postapp-models.html",
      "date"     : "2017-06-14 00:00:00 +0900",
      "content"   : "<h3 id=\"0-어플리케이션-post를-생성하고-settingspy에-등록\">0. 어플리케이션 ‘post’를 생성하고, settings.py에 등록</h3>\n\n<h3 id=\"1-모델-설계하기\">1. 모델 설계하기</h3>\n<ul>\n  <li><a href=\"https://github.com/bbungsang/Instargram-project/blob/master/database-structure.pdf\">Click!</a></li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">36</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__str__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Post</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">author</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"p\">)</span>\n    <span class=\"n\">photo</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ImageField</span><span class=\"p\">()</span>\n    <span class=\"n\">created_at</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">DateTimeField</span><span class=\"p\">(</span><span class=\"n\">auto_now_add</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">modified_at</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">DateTimeField</span><span class=\"p\">(</span><span class=\"n\">auto_now</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n\n    <span class=\"n\">like_user</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ManyToManyField</span><span class=\"p\">(</span>\n        <span class=\"n\">User</span><span class=\"p\">,</span>\n        <span class=\"n\">through</span><span class=\"o\">=</span><span class=\"s\">'PostLike'</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">PostLike</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"p\">)</span>\n    <span class=\"n\">post</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"n\">Post</span><span class=\"p\">)</span>\n    <span class=\"n\">created_at</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">DateTimeField</span><span class=\"p\">(</span><span class=\"n\">auto_now_add</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Comment</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">author</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"p\">)</span>\n    <span class=\"n\">post</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"n\">Post</span><span class=\"p\">)</span>\n    <span class=\"n\">content</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">TextField</span><span class=\"p\">()</span>\n    <span class=\"n\">created_at</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">DateTimeField</span><span class=\"p\">(</span><span class=\"n\">auto_now_add</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">modified_ad</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">DateTimeField</span><span class=\"p\">(</span><span class=\"n\">auto_now</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n\n    <span class=\"n\">like_user</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ManyToManyField</span><span class=\"p\">(</span>\n        <span class=\"n\">User</span><span class=\"p\">,</span>\n        <span class=\"n\">through</span><span class=\"o\">=</span><span class=\"s\">'CommentLike'</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">CommentLike</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"p\">)</span>\n    <span class=\"n\">comment</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"n\">Comment</span><span class=\"p\">)</span>\n    <span class=\"n\">created_at</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">DateTimeField</span><span class=\"p\">(</span><span class=\"n\">auto_now_add</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Tag</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre>\n</div>\n\n<h3 id=\"2-설계한-모델과-필드를-작성하고-마이그레이션-시도\">2. 설계한 모델과 필드를 작성하고 마이그레이션 시도</h3>\n<ul>\n  <li>아래와 같은 에러 발생</li>\n</ul>\n\n<div class=\"language-text highlighter-rouge\"><pre class=\"highlight\"><code>'Post.author' clashes with reverse accessor for 'Post.like_user'\n'Post.like_user' clashes with reverse accessor for 'Post.author'\n'Comment.author' clashes with reverse accessor for 'Comment.like_user'\n'Comment.like_user' clashes with reverse accessor for 'Comment.author'\n</code></pre>\n</div>\n<ul>\n  <li>이와 같은 에러는 지극히 개인적으로 해석한 바, Post/Comment 모델이 User 모델에 ForeignKey 와 ManyToMany 를 걸고 있고, 이로써 Post/Comment 모델과 User 모델에 생성된 <code class=\"highlighter-rouge\">reverse relation</code> 에 FK에 대한 post_set/comment_set 속성, MTM에 대한 post_set/comment_set 속성이 각각 생성될 것이다. 즉, reverse relation 의 중복된 속성명에 대한 충돌이 일어난 것.</li>\n  <li>따라서 둘 중 하나에 post_set/comment_set의 이름을 바꿔줘야한다. MTM을 건 각각의 like_user 에 related_name 을 줌으로써 이 충돌을 방지한다.</li>\n  <li><a href=\"https://github.com/bbungsang/Instargram-project/blob/master/clash-error.pdf\">Click!</a></li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"c\">#...</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Post</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">author</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"p\">)</span>\n    <span class=\"n\">photo</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ImageField</span><span class=\"p\">()</span>\n    <span class=\"n\">created_at</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">DateTimeField</span><span class=\"p\">(</span><span class=\"n\">auto_now_add</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">modified_at</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">DateTimeField</span><span class=\"p\">(</span><span class=\"n\">auto_now</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n\n    <span class=\"n\">like_user</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ManyToManyField</span><span class=\"p\">(</span>\n        <span class=\"n\">User</span><span class=\"p\">,</span>\n        <span class=\"n\">through</span><span class=\"o\">=</span><span class=\"s\">'PostLike'</span><span class=\"p\">,</span>\n        <span class=\"n\">related_name</span><span class=\"o\">=</span><span class=\"s\">'like_posts'</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n\n<span class=\"c\">#...</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Comment</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">author</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"p\">)</span>\n    <span class=\"n\">post</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"n\">Post</span><span class=\"p\">)</span>\n    <span class=\"n\">content</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">TextField</span><span class=\"p\">()</span>\n    <span class=\"n\">created_at</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">DateTimeField</span><span class=\"p\">(</span><span class=\"n\">auto_now_add</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">modified_ad</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">DateTimeField</span><span class=\"p\">(</span><span class=\"n\">auto_now</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n\n    <span class=\"n\">like_user</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ManyToManyField</span><span class=\"p\">(</span>\n        <span class=\"n\">User</span><span class=\"p\">,</span>\n        <span class=\"n\">through</span><span class=\"o\">=</span><span class=\"s\">'CommentLike'</span><span class=\"p\">,</span>\n        <span class=\"n\">related_name</span><span class=\"o\">=</span><span class=\"s\">'like_comments'</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n\n<span class=\"c\">#...</span>\n</code></pre>\n</div>\n<ul>\n  <li>마이그레이션 에러를 극복했다!</li>\n</ul>\n\n<h3 id=\"3-post에-comment를-추가할-수-있는-함수-구현\">3. Post에 Comment를 추가할 수 있는 함수 구현</h3>\n<ul>\n  <li>처음에 함수 인스턴스까지 생각하고 애초에 모델에 적용했어야 했던게 맞는 건지, 하다가 필요한 기능이 생기면 그 때 적용해도 되는 건지 아직은 감이 안 잡히지만,</li>\n  <li>댓글 추가할 수 있는 함수를 모델 첫 번째 마이그레이션을 마친 후 구현한다.</li>\n  <li>한 Post 에 Comment 를 추가하는 방식이므로, Post 모델에서 Comment 모델을 역참조하여 해당 데이터를 가져올 수 있도록 한다.</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">add_comment</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">user</span><span class=\"p\">,</span> <span class=\"n\">content</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">post_set</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">author</span><span class=\"o\">=</span><span class=\"n\">user</span><span class=\"p\">,</span> <span class=\"n\">content</span><span class=\"o\">=</span><span class=\"n\">content</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n<ul>\n  <li>외부에서 user 값과 content 값을 받아서 Comment 모델에 데이터를 삽입한다.</li>\n</ul>\n\n<h3 id=\"4-좋아요-개수를-세는-인스턴스를-프로퍼티로-표현\">4. 좋아요 개수를 세는 인스턴스를 프로퍼티로 표현</h3>\n<ul>\n  <li>그 전에 프로퍼티의 개념이 잘 안서서 개념을 우선 정리해보겠다.</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">Monster</span><span class=\"p\">():</span>\n    <span class=\"n\">angelmon</span> <span class=\"o\">=</span> <span class=\"s\">'엔젤몬'</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">digimon</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,):</span>\n        <span class=\"k\">return</span> <span class=\"s\">'{}은 디지몬입니다.'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">monster</span> <span class=\"o\">=</span> <span class=\"n\">Monster</span><span class=\"p\">(</span><span class=\"s\">'파닥몬'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">monster</span><span class=\"o\">.</span><span class=\"n\">digimon</span><span class=\"p\">()</span>\n<span class=\"c\"># out : '파닥몬은 디지몬입니다.'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">monster</span><span class=\"o\">.</span><span class=\"n\">name</span>\n<span class=\"c\"># out : '파닥몬'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">monster</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s\">'아구몬'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">monster</span><span class=\"o\">.</span><span class=\"n\">name</span>\n<span class=\"c\"># out : '아구몬'</span>\n</code></pre>\n</div>\n<ul>\n  <li>위와 같이 객체를 monster 변수에 할당하고 해당 객체가 갖고 있는 속성을 이용해서 바로 접근과 변경이 가능하다.</li>\n  <li>파이썬은 다른 객체 지향 언어와 달리 private, protected 개념이 구체적으로 없는 것으로 알고 있다.</li>\n  <li>접근 제한에 대한 개념이 뚜렷한 언어의 경우, getter와 setter를 통해 데이터에 접근하고, 변경이나 삭제를 할 수 있다.</li>\n  <li>하지만 파이썬은 그렇지 않은데 왜 굳이 property 를 사용하는지 이해가 안됐다. 알아본 결과,</li>\n  <li>첫째, 추후 추가적인 무엇인가 필요한 경우, property에 추가하면 기존 코드가 손상되지 않는다.</li>\n  <li>둘째, 데이터 바인딩하기 좋다. 는 까닭으로 사용한다고 한다.</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">Monster</span><span class=\"p\">():</span>\n    <span class=\"n\">angelmon</span> <span class=\"o\">=</span> <span class=\"s\">'엔젤몬'</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">digimon</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s\">'{}은 진화하면 {}이 됩니다.'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">angelmon</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">monster</span> <span class=\"o\">=</span> <span class=\"n\">Monster</span><span class=\"p\">(</span><span class=\"s\">'파닥몬'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">monster</span><span class=\"o\">.</span><span class=\"n\">digimon</span><span class=\"p\">()</span>\n<span class=\"c\"># out : can't set attribute</span>\n</code></pre>\n</div>\n<ul>\n  <li>name을 프로퍼티로 지정하고나니 일반적인 인스턴스 접근 방식으로는는 can’t set attribute 라는 에러를 뿜뿜하며 접근할 수 없었다.</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">monster</span><span class=\"o\">.</span><span class=\"n\">name</span>\n<span class=\"c\"># out : '파닥몬'</span>\n</code></pre>\n</div>\n<ul>\n  <li>이렇게 얻은 ‘파닥몬’의 문자열 데이터는 클래스 멤버인 self.name에 직접 접근한 것이 아니라 프로퍼티로 같은 데이터 값의 사본을 출력해준 것이다.</li>\n  <li>솔직히 기존 코드가 손상됨으로써 오는 피해가 얼마나 막대한지 실감은 안 난다. 하지만 그렇다고 하니 비로소 납득하고 property 로 좋아요 개수를 세는 데이터에 접근해보겠다.</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"c\"># Post 에 대한 좋아요 개수와 Comment 에 대한 좋아요 개수 둘 다 필요하므로 두 모델에 추가했다.</span>\n<span class=\"nd\">@property</span>\n<span class=\"k\">def</span> <span class=\"nf\">like_count</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">like_users</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n<ul>\n  <li><a href=\"\">프로퍼티 확장하기</a></li>\n</ul>\n"
    } ,
  
    {
      "title"    : "[인스타그램] 커스텀 유저 돌리기",
      "category" : "인스타그램instargram",
      "tags"     : "django, instargram",
      "url"      : "/%EC%9D%B8%EC%8A%A4%ED%83%80%EA%B7%B8%EB%9E%A8/instargram/2017/06/14/instargram-custom-user.html",
      "date"     : "2017-06-14 00:00:00 +0900",
      "content"   : "<h3 id=\"커스텀-유저로-돌리기\">커스텀 유저로 돌리기</h3>\n<ul>\n  <li>장고가 제공하는 User 모델을 활용하기 위해 기존 User 모델을 그대로 활용하는 방법, 커스텀 User를 활용하는 방법이 있다.</li>\n  <li><code class=\"highlighter-rouge\">기존 User 모델을 그대로 활용하는 방법</code> 중 User에 OneToOneField를 거는 방식은 유저 정보(필드)가 방대할 때, 인증에 필요한 최소한의 필수 정보만 사용하다가 필요한 시기에 필요한 정보만 활용할 수 있도록 다른 모델에 몰아넣거나(OneToOne기법),</li>\n  <li>기존 User 정보가 존재하며 해당 데이터를 보존해야 할 경우 사용한다.</li>\n  <li>데이터가 없는 경우 일반적으로 커스텀 유저를 권장하기 때문에 커스텀 유저의 개념을 짚고 활용해보겠다.</li>\n</ul>\n\n<h4 id=\"abstractuser-모델-상속한-사용자-정의-user-모델-사용하기\">AbstractUser 모델 상속한 사용자 정의 User 모델 사용하기</h4>\n<ul>\n  <li>이 기법의 사용 여부는 프로젝트 시작 전에 하는 것이 좋다. 추후에 settings.AUTH_USER_MODEL 변경시 데이터베이스 스키마를 알맞게 재수정해야 하는데 사용자 모델 필드에 추가나 수정으로 끝나지 않고 완전히 새로운 사용자 객체를 생성하는 일이 된다.</li>\n  <li>이 기법은 기존 장고의 User 모델을 그대로 사용하므로 기본 로그인 인증 처리 부분은 장고의 것을 이용하면서 사용자 정의 필드를 추가할 때 유용하다.</li>\n  <li><code class=\"highlighter-rouge\">member</code> 어플리케이션을 생성한다.</li>\n  <li>settings.py 에 등록 후, member/models.py 작성</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.contrib.auth.models</span> <span class=\"kn\">import</span> <span class=\"n\">AbstractUser</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">(</span><span class=\"n\">AbstractUser</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre>\n</div>\n\n<p>[config/settins.py]</p>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"c\"># Custom User</span>\n<span class=\"n\">AUTH_USER_MODEL</span> <span class=\"o\">=</span> <span class=\"s\">'member.User'</span>\n</code></pre>\n</div>\n\n<p>[post/models.py]</p>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.conf</span> <span class=\"kn\">import</span> <span class=\"n\">settings</span>\n\n<span class=\"n\">User</span> <span class=\"o\">-&gt;</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">AUTH_USER_MODEL</span>\n</code></pre>\n</div>\n<ul>\n  <li>post/models.py 에서 User 객체를 썻던 부분을 settings.AUTH_USER_MODEL로 바꿔준다.</li>\n</ul>\n"
    } ,
  
    {
      "title"    : "[Try Hello World] Level1 약수의 합",
      "category" : "Solve Algorithm!tryhelloworld",
      "tags"     : "Alogorithm, Level1",
      "url"      : "/solve%20algorithm!/tryhelloworld/2017/06/12/tryhelloworld-level1-7-2.html",
      "date"     : "2017-06-12 00:00:00 +0900",
      "content"   : "<h2 id=\"약수의-합\">약수의 합</h2>\n<p>어떤 수를 입력받아 그 수의 약수를 모두 더한 수 sumDivisor 함수를 완성해 보세요.</p>\n\n<p>예를 들어 12가 입력된다면 12의 약수는 [1, 2, 3, 4, 6, 12]가 되고, 총 합은 28이 되므로 28을 반환해 주면 됩니다.</p>\n\n<ul>\n  <li>내 풀이</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">functools</span> <span class=\"kn\">import</span> <span class=\"nb\">reduce</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">sumDivisor</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">):</span>\n    <span class=\"n\">divisor</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">num</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"n\">divisor</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"nb\">reduce</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">divisor</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<ul>\n  <li>다른 사람 풀이</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">sumDivisor</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"nb\">sum</span><span class=\"p\">([</span> <span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">num</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">num</span><span class=\"o\">%</span><span class=\"n\">i</span><span class=\"o\">==</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n</code></pre>\n</div>\n"
    } ,
  
    {
      "title"    : "[Try Hello World] Level1 피보나치 수",
      "category" : "Solve Algorithm!tryhelloworld",
      "tags"     : "Alogorithm, Level1",
      "url"      : "/solve%20algorithm!/tryhelloworld/2017/06/12/tryhelloworld-level1-7-1.html",
      "date"     : "2017-06-12 00:00:00 +0900",
      "content"   : "<h2 id=\"피보나치-수\">피보나치 수</h2>\n<p>피보나치 수는 F(0) = 0, F(1) = 1일 때, 2 이상의 n에 대하여 F(n) = F(n-1) + F(n-2) 가 적용되는 점화식입니다.</p>\n\n<p>2 이상의 n이 입력되었을 때, fibonacci 함수를 제작하여 n번째 피보나치 수를 반환해 주세요.</p>\n\n<p>예를 들어 n = 3이라면 2를 반환해주면 됩니다.</p>\n\n<ul>\n  <li>내 풀이</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">fibonacci</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">):</span>\n    <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\n    <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"o\">-</span><span class=\"n\">a</span>\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"n\">num</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"n\">result</span>\n        <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"o\">+</span><span class=\"n\">b</span>\n        <span class=\"n\">i</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">fibonacci</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<ul>\n  <li>다른 사람 풀이</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">fibonacci</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">):</span>\n    <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">):</span>\n        <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"o\">+</span><span class=\"n\">b</span>\n    <span class=\"k\">return</span> <span class=\"n\">a</span>\n</code></pre>\n</div>\n"
    } ,
  
    {
      "title"    : "[Try Hello World] Level1 행렬의 덧셈",
      "category" : "Solve Algorithm!tryhelloworld",
      "tags"     : "Alogorithm, Level1",
      "url"      : "/solve%20algorithm!/tryhelloworld/2017/06/11/tryhelloworld-level1-6-2.html",
      "date"     : "2017-06-11 00:00:00 +0900",
      "content"   : "<h2 id=\"행렬의-덧셈\">행렬의 덧셈</h2>\n<p>행렬의 덧셈은 행과 열의 크기가 같은 두 행렬의 같은 행, 같은 열의 값을 서로 더한 결과가 됩니다.<br />\n2개의 행렬을 입력받는 sumMatrix 함수를 완성하여 행렬 덧셈의 결과를 반환해 주세요.<br /></p>\n\n<p>예를 들어 2x2 행렬인 A = ((1, 2), (2, 3)), B = ((3, 4), (5, 6)) 가 주어지면, 같은 2x2 행렬인 ((4, 6), (7, 9))를 반환하면 됩니다.(어떠한 행렬에도 대응하는 함수를 완성해주세요.)</p>\n\n<ul>\n  <li>내 풀이</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">sumMatrix</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"n\">B</span><span class=\"p\">):</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"p\">[[]</span> <span class=\"k\">for</span> <span class=\"n\">k</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">))]</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">)):</span>\n    \t<span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])):</span>\n        \t<span class=\"n\">result</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">B</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">])</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">result</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">sumMatrix</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">]],</span> <span class=\"p\">[[</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">],[</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">],[</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">]]))</span>\n</code></pre>\n</div>\n\n<ul>\n  <li>다른 사람 풀이</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">sumMatrix</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"n\">B</span><span class=\"p\">):</span>\n  <span class=\"n\">answer</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"n\">A</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">B</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]))]</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">))]</span>\n\n  <span class=\"k\">return</span> <span class=\"n\">answer</span>\n</code></pre>\n</div>\n\n<h3 id=\"느낀점\"><em>느낀점</em></h3>\n<ul>\n  <li>최대공약수, 최소공배수 문제의 경우, 수학적 접근이 미숙해서 결국 검색으로 gcd 모듈이 있다는 것을 알게되어 사용하였다.</li>\n  <li>모듈에 의존하기보다는 코드가 길어지더라도 원리를 알고 직접 풀어보는 시간을 갖는 것이 중요한 것 같다.</li>\n</ul>\n"
    } ,
  
    {
      "title"    : "[Try Hello World] Level1 최대공약수와 최소공배수",
      "category" : "Solve Algorithm!tryhelloworld",
      "tags"     : "Alogorithm, Level1",
      "url"      : "/solve%20algorithm!/tryhelloworld/2017/06/11/tryhelloworld-level1-6-1.html",
      "date"     : "2017-06-11 00:00:00 +0900",
      "content"   : "<h2 id=\"최대공약수와-최소공배수\">최대공약수와 최소공배수</h2>\n<p>두 수를 입력받아 두 수의 최대공약수와 최소공배수를 반환해주는 gcdlcm 함수를 완성해 보세요.</p>\n\n<p>배열의 맨 앞에 최대공약수, 그 다음 최소공배수를 넣어 반환하면 됩니다.</p>\n\n<p>예를 들어 gcdlcm(3,12) 가 입력되면, [3, 12]를 반환해주면 됩니다.</p>\n\n<ul>\n  <li>내 풀이</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">fractions</span> <span class=\"kn\">import</span> <span class=\"n\">gcd</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">gcdlcm</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">gcd</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">),</span> <span class=\"n\">a</span><span class=\"o\">*</span><span class=\"n\">b</span><span class=\"o\">/</span><span class=\"n\">gcd</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">)]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">gcdlcm</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">12</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<ul>\n  <li>다른 사람 풀이</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">gcdlcm</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n    <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">),</span> <span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n    <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n    <span class=\"k\">while</span> <span class=\"n\">t</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">c</span> <span class=\"o\">%</span> <span class=\"n\">d</span>\n        <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">t</span>\n    <span class=\"n\">answer</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">*</span><span class=\"n\">b</span><span class=\"o\">/</span><span class=\"n\">c</span><span class=\"p\">)]</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">answer</span>\n</code></pre>\n</div>\n\n<h3 id=\"소감\"><em>소감</em></h3>\n<ul>\n  <li>최대공약수, 최소공배수 문제의 경우, 수학적 접근이 미숙해서 결국 검색으로 찾은 gcd 모듈을 사용하였다.</li>\n  <li>모듈에 의존하기보다는 코드가 길어지더라도 원리를 알고 직접 풀어보는 시간을 갖는 것이 중요한 것 같다.</li>\n</ul>\n"
    } ,
  
    {
      "title"    : "제너레이터(Generator)",
      "category" : "파이썬 문법basic",
      "tags"     : "Python, Iterator, Generator",
      "url"      : "/%ED%8C%8C%EC%9D%B4%EC%8D%AC%20%EB%AC%B8%EB%B2%95/basic/2017/06/09/python-basic-generator.html",
      "date"     : "2017-06-09 00:00:00 +0900",
      "content"   : "<blockquote>\n  <p>이 마크다운은 <strong>빌루바노빅</strong> 의 <strong>Introducing Python</strong> 을 토대로 작성되었습니다.\n제 기준 헷갈리는 개념을 위주로 다른 문서를 참고하여 이해하기 쉽도록 내용을 더하였습니다.</p>\n</blockquote>\n\n<h2 id=\"제너레이터\">제너레이터</h2>\n<ul>\n  <li>파이썬의 <code class=\"highlighter-rouge\">iterator</code>를 생성하는 객체로, 전체 시퀀스를 한 번에 메모리에 저장하고 정렬할 필요 없이 잠재적으로 아주 큰 시퀀스를 순회할 수 있다.</li>\n  <li><code class=\"highlighter-rouge\">iterator</code>는 next()를 이용해 데이터에 순차적으로 접근이 가능한 객체이다.</li>\n  <li>대표적인 제너레이터 중 하나로 <code class=\"highlighter-rouge\">range()</code> 가 있다.</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">))</span>\n<span class=\"mi\">5050</span>\n</code></pre>\n</div>\n<ul>\n  <li>순회할 때마다 호출된 항목을 기억하고 다음 값을 반환한다. 즉 제너레이터는 이전 호출에 대한 메모리가 없는 일반 함수와 달리 이전 호출에 대해 기억하고 이전 값을 적용하여 반환한다.</li>\n  <li>제너레이터 컴프리헨션에 대한 코드가 긴 경우에는 제너레이터 함수를 사용하면 된다. 제너레이터 함수는 일반 함수지만 return 으로 값을 반환하지 않고, yield 로 값을 반환한다.</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">def</span> <span class=\"nf\">my_range</span><span class=\"p\">(</span><span class=\"n\">first</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">last</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">step</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>   <span class=\"n\">number</span> <span class=\"o\">=</span> <span class=\"n\">first</span>\n<span class=\"o\">...</span>   <span class=\"k\">while</span> <span class=\"n\">number</span> <span class=\"o\">&lt;</span> <span class=\"n\">last</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"k\">yield</span> <span class=\"n\">number</span>\n<span class=\"o\">...</span>     <span class=\"n\">number</span> <span class=\"o\">+=</span> <span class=\"n\">step</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">my_range</span>\n<span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">my_range</span> <span class=\"n\">at</span> <span class=\"mh\">0x10193e268</span><span class=\"o\">&gt;</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ranger</span> <span class=\"o\">=</span> <span class=\"n\">my_range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ranger</span>\n<span class=\"o\">&lt;</span><span class=\"n\">generator</span> <span class=\"nb\">object</span> <span class=\"n\">my_range</span> <span class=\"n\">at</span> <span class=\"mh\">0x101a0a168</span><span class=\"o\">&gt;</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">ranger</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>   <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"mi\">1</span>\n<span class=\"mi\">2</span>\n<span class=\"mi\">3</span>\n<span class=\"mi\">4</span>\n</code></pre>\n</div>\n\n<h4 id=\"제너레이터-컴프리헨션\">제너레이터 컴프리헨션</h4>\n<ul>\n  <li>제너레이터 함수를 더 쉽게 사용할 수 있도록 한다. 리스트 컴프리헨션과 비슷하지만 [] 대신 () 를 사용한다.</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">[</span> <span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">xrange</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">(</span> <span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">xrange</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"n\">generator</span> <span class=\"nb\">object</span> <span class=\"o\">&lt;</span><span class=\"n\">genexpr</span><span class=\"o\">&gt;</span> <span class=\"n\">at</span> <span class=\"mh\">0x7f6105d90960</span><span class=\"o\">&gt;</span>\n</code></pre>\n</div>\n\n<h3 id=\"왜-제너레이터를-사용하는가\">왜 제너레이터를 사용하는가?</h3>\n<p>(참고 사이트: http://bluese05.tistory.com/56)</p>\n<h4 id=\"1-메모리를-효율적으로-사용할-수-있다\">1. 메모리를 효율적으로 사용할 수 있다.</h4>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">getsizeof</span><span class=\"p\">(</span> <span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">xrange</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">%</span> <span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"p\">)</span>    <span class=\"c\"># list</span>\n<span class=\"mi\">536</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">getsizeof</span><span class=\"p\">(</span> <span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">xrange</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">%</span> <span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"p\">)</span>\n<span class=\"mi\">4280</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">getsizeof</span><span class=\"p\">(</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">xrange</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">%</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"p\">)</span>    <span class=\"c\"># generator</span>\n<span class=\"mi\">80</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">getsizeof</span><span class=\"p\">(</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">xrange</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">%</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"p\">)</span>\n<span class=\"mi\">80</span>\n</code></pre>\n</div>\n<ul>\n  <li>리스트의 경우 사이즈가 커질수록 메모리 사용량이 늘어난다. 하지만 제너레이터의 경우 사이즈가 커져도 메모리 사용량이 동일하다.</li>\n  <li>리스트는 안에 속한 모든 데이터를 메모리에 적재하기 때문에 리스트의 크기 만큼 메모리 사이즈가 늘어나게 되고, 제너레이터는 데이터를 next()를 통해 차례로 값에 접근할 때마다 메모리에 적재하기 때문에 메모리 사이즈가 일정한 것이다.</li>\n</ul>\n\n<h4 id=\"2-lazy-evaluation-계산-결과가-필요할-때까지-계산을-늦추는-효과를-볼-수-있다\">2. <strong>Lazy evaluation 계산 결과가 필요할 때까지 계산을 늦추는 효과를 볼 수 있다.</strong></h4>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"c\">### 1초간 sleep을 수행한 후 x 값을 return ###</span>\n<span class=\"k\">def</span> <span class=\"nf\">sleep_func</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n  <span class=\"k\">print</span> <span class=\"s\">\"sleep...\"</span>\n  <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n  <span class=\"k\">return</span> <span class=\"n\">x</span>\n\n<span class=\"c\">### list 생성 ###</span>\n<span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">sleep_func</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">xrange</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)]</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">:</span>\n  <span class=\"k\">print</span> <span class=\"n\">i</span>\n<span class=\"c\">## result : ##</span>\n<span class=\"c\"># sleep...</span>\n<span class=\"c\"># sleep...</span>\n<span class=\"c\"># sleep...</span>\n<span class=\"c\"># 0</span>\n<span class=\"c\"># 1</span>\n<span class=\"c\"># 2</span>\n\n<span class=\"c\">### generator 생성 ###</span>\n<span class=\"n\">generator</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">sleep_function</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">xrange</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">generator</span><span class=\"p\">:</span>\n  <span class=\"k\">print</span> <span class=\"n\">i</span>\n<span class=\"c\">## result : ##</span>\n<span class=\"c\"># sleep...</span>\n<span class=\"c\"># 0</span>\n<span class=\"c\"># sleep...</span>\n<span class=\"c\"># 1</span>\n<span class=\"c\"># sleep...</span>\n<span class=\"c\"># 2</span>\n</code></pre>\n</div>\n<ul>\n  <li>리스트 컴프리헨션은 리스트의 모든 값을 먼저 수행하기 떄문에 리스트 값이 매우 큰 경우 그 만큼 부담으로 작용된다.</li>\n  <li>하지만 제너레이터 컴프리헨션은 실제 값을 로딩하지 않고 반복문이 수행 될 때마다 하나씩 sleep_func()을 수행하며 값을 불러온다. 즉, <strong>수행 시간이 긴 연산을 필요한 순간까지 늦출 수 있다</strong> 는 점이 있다.</li>\n</ul>\n\n<h4 id=\"이러한-특징을-이용하면-피보나치-수열을-간결한-문법과-더불어-효율적으로-작성할-수-있다\">이러한 특징을 이용하면 피보나치 수열을 간결한 문법과 더불어 효율적으로 작성할 수 있다.</h4>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">fibonacci</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\n    <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"n\">n</span><span class=\"p\">):</span>\n            <span class=\"k\">break</span>\n        <span class=\"k\">yield</span> <span class=\"n\">a</span>\n        <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"o\">+</span><span class=\"n\">b</span>\n        <span class=\"n\">i</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n\n<span class=\"n\">fib</span> <span class=\"o\">=</span> <span class=\"n\">fibonacci</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">fib</span><span class=\"p\">:</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n"
    } ,
  
    {
      "title"    : "컴프리헨션(Comprehension)",
      "category" : "파이썬 문법basic",
      "tags"     : "Python, List, Dictionary, Comprehension",
      "url"      : "/%ED%8C%8C%EC%9D%B4%EC%8D%AC%20%EB%AC%B8%EB%B2%95/basic/2017/06/09/python-basic-comprehension.html",
      "date"     : "2017-06-09 00:00:00 +0900",
      "content"   : "<blockquote>\n  <p>이 마크다운은 <strong>빌루바노빅</strong> 의 <strong>Introducing Python</strong> 을 토대로 작성되었습니다.\n제 기준 헷갈리는 개념을 위주로 다른 문서를 참고하여 이해하기 쉽도록 내용을 더하였습니다.</p>\n</blockquote>\n\n<h2 id=\"컴프리헨션\">컴프리헨션</h2>\n<ul>\n  <li>사전적 의미 : 이해력</li>\n  <li>컴퓨터적 의미 : 함축, 하나 이상의 이터레이터로 부터 코드를 절약한 자료구조를 만드는 방법</li>\n</ul>\n\n<h4 id=\"리스트-컴프리헨션\">리스트 컴프리헨션</h4>\n<blockquote>\n  <p>1부터 5까지 정수 리스트를 만드는 데에는 아래와 같은 방법들이 있다.</p>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"c\"># 1. 일반 루프 방식</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">num_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">for</span> <span class=\"n\">num</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>   <span class=\"n\">num_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">num_list</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n\n<span class=\"c\"># 2. 리스트 컴프리헨션 사용</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">num_list</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">num_list</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n<ul>\n  <li>이들 접근 방식은 동일한 결과를 생성한다. 하지만 <strong>리스트 컴프리헨션</strong> 을 사용해서 리스트를 만드는 것이 조금 더 파이써닉한 방법이라고 할 수 있다.</li>\n</ul>\n\n<blockquote>\n  <p>[표현식 for 항목 in 순회 가능한 객체]</p>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">num_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">num</span><span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"k\">for</span> <span class=\"n\">num</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">)]</span>\n</code></pre>\n</div>\n<ul>\n  <li>리스트에 대한 값을 생성하는 <code class=\"highlighter-rouge\">첫 번째 num</code> 변수(표현식)는 루프의 결과에 주어진 연산식을 적용하여 num_list 변수에 넣어준다.</li>\n  <li><code class=\"highlighter-rouge\">두 번째 num</code> 변수는 단순히 for문의 일부이다.</li>\n</ul>\n\n<blockquote>\n  <p>[표현식 for 항목 in 순회 가능한 객체 if 조건]</p>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">num_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">num</span> <span class=\"k\">for</span> <span class=\"n\">num</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">num</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">num_list</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n<ul>\n  <li><code class=\"highlighter-rouge\">num % 2 == 1</code> 은 홀수일 때 True 짝수일 때 False를 도출하여 True 값인 홀수를 생성한다.</li>\n</ul>\n\n<blockquote>\n  <p>하나 이상의 중첩 for문도 사용할 수 있다.</p>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">rows</span> <span class=\"o\">=</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cols</span> <span class=\"o\">=</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cells</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"n\">row</span><span class=\"p\">,</span> <span class=\"n\">col</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">rows</span> <span class=\"k\">for</span> <span class=\"n\">col</span> <span class=\"ow\">in</span> <span class=\"n\">cols</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">for</span> <span class=\"n\">cell</span> <span class=\"ow\">in</span> <span class=\"n\">cells</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>   <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">cell</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<h4 id=\"딕셔너리-컴프리헨션\">딕셔너리 컴프리헨션</h4>\n<ul>\n  <li>딕셔너리 형태로 값을 반환받는 것을 제외하고 리스트 컴프리헨션과 거의 흡사하다.</li>\n</ul>\n\n<blockquote>\n  <p>{키표현식 : 값표현식 for 항목 in 순회 가능한 객체}</p>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">word</span> <span class=\"o\">=</span> <span class=\"s\">'letters'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">letter_counts</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">letter</span><span class=\"p\">:</span> <span class=\"n\">word</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">(</span><span class=\"n\">letter</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">letter</span> <span class=\"ow\">in</span> <span class=\"n\">word</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">letter_counts</span>\n<span class=\"p\">{</span><span class=\"s\">'l'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s\">'e'</span> <span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s\">'t'</span> <span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s\">'r'</span> <span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s\">'s'</span> <span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">}</span>\n</code></pre>\n</div>\n<ul>\n  <li>첫 번째 letter 변수는 Key로서 for문으로부터 순차적으로 문자열을 받는다.</li>\n  <li>word.count(letter) 는 Value로서 첫 번째 letter 변수에서 받은 문자열을 세어 정수로 반환한다.</li>\n  <li>하지만 이 방식으로 문자열을 셀 경우, ‘e’와 ‘t’는 두 번씩 순회하며 세기 때문에 시간 낭비를 초래할 수 있다.</li>\n  <li><code class=\"highlighter-rouge\"><span class=\"p\">{</span><span class=\"err\">letter:</span><span class=\"w\"> </span><span class=\"err\">word.count(letter)</span><span class=\"w\"> </span><span class=\"err\">for</span><span class=\"w\"> </span><span class=\"err\">letter</span><span class=\"w\"> </span><span class=\"err\">in</span><span class=\"w\"> </span><span class=\"err\">set(word)</span><span class=\"p\">}</span></code> 면 시간 낭비를 줄이고 조금 더 파이써닉하게 처리할 수 있다.</li>\n</ul>\n\n<h4 id=\"결론\"><em>결론</em></h4>\n<ul>\n  <li>컴프리헨션은 이전 예제보다 간단하지 않지만, 더 많은 것을 간단한 원리로 표현할 수 있도록 해준다.</li>\n</ul>\n"
    } ,
  
    {
      "title"    : "[장고 기본편] 6. Migrations",
      "category" : "여행 블로그 만들기travel",
      "tags"     : "Django, AskDjango, Migrations, Fields",
      "url"      : "/%EC%97%AC%ED%96%89%20%EB%B8%94%EB%A1%9C%EA%B7%B8%20%EB%A7%8C%EB%93%A4%EA%B8%B0/travel/2017/06/08/askdjango-Migrations.html",
      "date"     : "2017-06-08 00:00:00 +0900",
      "content"   : "<blockquote>\n  <p>| ٩(๑òωó๑)۶ 아, 아, 마이크 테스트 |<br />\n이 마크다운은 이진석 선생님의 ‘Ask Django VOD 장고 기본편(Feat.여행 블로그 만들기)’를 토대로 작성되었습니다.</p>\n</blockquote>\n\n<p><br /></p>\n<h1 id=\"migrations\">Migrations</h1>\n<ul>\n  <li>초기에 테이블 최초 생성만 가능하고 변경된 내용은 반영하지 않는 <code class=\"highlighter-rouge\">syncdb</code> 명령어가 있었지만, django-south 프로젝트가 킥스타터 펀딩을 통해, Django 1.7에 마이그레이션을 포함하였다.</li>\n  <li>모델 변경내역 히스토리 관리가 가능</li>\n  <li>모델의 변경내열을 데이터베이스 스키마(데이터베이스 데이터 구조)로 반영시키는 효율적인 방법을 제공</li>\n</ul>\n\n<p><br /></p>\n<h4 id=\"관련-명령어\">관련 명령어</h4>\n<p># ‘python manage.py’ 는 공통이므로 생략하겠습니다.</p>\n<ul>\n  <li><code class=\"highlighter-rouge\">makemigrations &lt;app-name&gt;</code> : 마이그레이션 파일(초안) 생성</li>\n  <li><code class=\"highlighter-rouge\">migrate &lt;app-name&gt;</code> : 해당 마이그레이션 파일을 DB에 반영</li>\n</ul>\n\n<div class=\"language-text highlighter-rouge\"><pre class=\"highlight\"><code>[모델 내역 #4]            \n[모델 내역 #3]                        [DB Schema #3]\n[모델 내역 #2] ---&gt; [변경 내역 #2] ---&gt; [DB Schema #2]\n[모델 내역 #1]      [변경 내역 #1]      [DB Schema #1]\n&lt;Django 모델&gt;     &lt;마이그레이션파일&gt;       &lt;데이터베이스&gt;\n</code></pre>\n</div>\n<ul>\n  <li>내역이 하나 생기면 알아서 데이터베이스에 반영되면 좋겠지만, 장고는 2단계를 거친다.</li>\n  <li>1단계: makemigrations 명령으로 (어떤식으로 데이터베이스 내용을 변경시키겠다는)작업지시서 생성\n    <ul>\n      <li>이 작업 후에 개발자는 필히 해당 파일을 열어서 확인하는 과정이 필요하다.</li>\n      <li>반영이 안 된 마이그레이션은 제거해도 무관하다.</li>\n    </ul>\n  </li>\n  <li>2단계: migrate 명령으로 데이터베이스에 반영</li>\n  <li>왜 굳이 2단계인가?\n    <ul>\n      <li>모델 내역 그대로 데이터베이스 반영되는 것은 매우 위험한 일이 될 수 있다.</li>\n      <li>어떤 작업을 수행할 것인지에 대한 내역서를 만드는 것은 일종의 안정장치이다.</li>\n    </ul>\n  </li>\n  <li><code class=\"highlighter-rouge\">showmigrations &lt;app-name&gt;</code> : 마이그레이션 적용 현황</li>\n  <li><code class=\"highlighter-rouge\">sqlmigrate &lt;app-name&gt; &lt;migration-number&gt;</code> : 지정 마이그레이션에 대한 SQL을 볼 수 있다.</li>\n</ul>\n\n<p><br /></p>\n<h6 id=\"마이그레이션-되돌리기\">마이그레이션 되돌리기</h6>\n<ol>\n  <li><code class=\"highlighter-rouge\">./manage.py migrate &lt;app-name&gt; &lt;migration-number&gt;</code> 명령어 입력.</li>\n  <li>되돌린만큼의 마이그레이션을 삭제한다.</li>\n  <li><code class=\"highlighter-rouge\">./manage.py showmigrations</code>을 통해서 지워졌는지 확인</li>\n</ol>\n\n<p><br /></p>\n<h4 id=\"migrate-forwardbackward\"><strong>Migrate</strong> (Forward/Backward)</h4>\n<blockquote>\n  <p>Forward/Backward 명령어가 따로 있는 것이 아니라 <code class=\"highlighter-rouge\">migrate</code> 명령어 하나로 다 해결할 수 있다.</p>\n</blockquote>\n\n<ul>\n  <li><code class=\"highlighter-rouge\">./manage.py migrate &lt;app-name&gt;</code>\n    <ul>\n      <li>미적용 마이그레이션 파일부터 최근 마이그레이션 파일까지 “Forward 마이그레이션”이 순차적으로 수행</li>\n    </ul>\n  </li>\n  <li><code class=\"highlighter-rouge\">./manage.py migrate &lt;app-name&gt; &lt;migration-file-name&gt;</code>\n    <ul>\n      <li>지정된 마이그레이션 파일이 현재 적용된 마이그레이션보다 이전이라면 이후의 마이그레이션을 취소하고 마지막 상태의 마이그레이션을 지정된 마이그레이션으로 사용하겠다는 뜻(Backward)</li>\n      <li>그 반대로 이후의 마이그레이션이라면 해당 마이그레이션만 수행하겠다는 의미이다.(Forward)</li>\n    </ul>\n  </li>\n  <li><code class=\"highlighter-rouge\">./manage.py migrate zero</code>\n    <ul>\n      <li>모든 마이그레이션을 취소하겠다는 의미이다.</li>\n    </ul>\n  </li>\n</ul>\n\n<p><br /></p>\n<h3 id=\"id-필드\"><strong>id 필드</strong></h3>\n<ul>\n  <li>모든 데이터베이스 테이블에는 각 Row의 식별기준인 <code class=\"highlighter-rouge\">기본키(Primary Key)</code>가 필요하다.\n    <ul>\n      <li>즉, 중복되는 데이터가 없다.(데이터베이스의 무결성)</li>\n    </ul>\n  </li>\n  <li>Django 에서는 기본키로 id 필드(AutoField)가 디폴드로 지정되어 있다.</li>\n  <li>기본키는 줄여서 <code class=\"highlighter-rouge\">pk</code>로 접근 가능</li>\n</ul>\n\n<p><br /></p>\n<h3 id=\"기존에-없는-필수필드를-추가하고-마이그레이션-할-때\">기존에 없는 필수필드를 추가하고 마이그레이션 할 때</h3>\n<ul>\n  <li>여기에서 필수필드란? blank, null 옵션을 주지 않은 것</li>\n  <li>필수필드이기 때문에 이전 데이터가 해당 컬럼값을 가지고 있지 않다면, 반드시 넣어줘야한다.</li>\n  <li>따라서 마이그레이션을 할 때, 아래와 같은 질의를 던진다.\n    <ul>\n      <li>선택1) 지금 값을 입력</li>\n      <li>선택2) 모델 클래스를 수정하고 다시 명령어를 수행</li>\n    </ul>\n  </li>\n</ul>\n\n<div class=\"language-text highlighter-rouge\"><pre class=\"highlight\"><code>You are trying to add a non-nullable field 'author' to post without a default; we can't do that (the database needs something to populate existing rows).\nPlease select a fix:\n 1) Provide a one-off default now (will be set on all existing rows with a null value for this column)\n 2) Quit, and let me add a default in models.py\nSelect an option:\n\n# 추가한 필수 필드에 어떤 값을 채워넣어야할 지 모르겠으니\n1)장고 모델의 디폴트 값을 제공해주겠다.\n2)사용자가 임의로 값을 지정을 하든, 옵션 필드로 변경을 하든 하겠다.\n를 선택하시오\n</code></pre>\n</div>\n<h6 id=\"1번-선택-시--\">1번 선택 시 :-)</h6>\n<div class=\"language-text highlighter-rouge\"><pre class=\"highlight\"><code>Select an option: 1\nPlease enter the default value now, as valid Python\nThe datetime and django.utils.timezone modules are available, so you can do e.g. timezone.now\nType 'exit' to exit this prompt\n&gt;&gt;&gt; 'anonymous'\n</code></pre>\n</div>\n<ul>\n  <li>빈 컬럼에 대하여 ‘anonymous’ 값을 주겠다.</li>\n  <li>반드시 필드 타입에 맞춰서 줄 것</li>\n</ul>\n\n<p><br /></p>\n<h3 id=\"결론\"><em>결론</em></h3>\n<p>마이그레이션은 모든 테이블 Row에 대한 컬럼이 추가되므로 데이터 양이 방대하면 문제가 발생할 수 있다. 애초에 설계를 신중하게 하는 것을 지향할 것</p>\n"
    } ,
  
    {
      "title"    : "[장고 기본편] 5. Model",
      "category" : "여행 블로그 만들기travel",
      "tags"     : "Django, AskDjango, View, FBVCBV",
      "url"      : "/%EC%97%AC%ED%96%89%20%EB%B8%94%EB%A1%9C%EA%B7%B8%20%EB%A7%8C%EB%93%A4%EA%B8%B0/travel/2017/06/07/askdjango-Model-and-Model-Fields.html",
      "date"     : "2017-06-07 00:00:00 +0900",
      "content"   : "<blockquote>\n  <p>| ٩(๑òωó๑)۶ 아, 아, 마이크 테스트 |<br />\n이 마크다운은 이진석 선생님의 ‘Ask Django VOD 장고 기본편(Feat.여행 블로그 만들기)’를 토대로 작성되었습니다.</p>\n</blockquote>\n\n<h2 id=\"sqlstructured-query-language\">SQL(Structured Query Language)</h2>\n<ul>\n  <li>Query : 정보 수집 요청에 쓰이는 컴퓨터 언어</li>\n  <li>SQL : 관계형 데이터베이스 관리 시스템(RDBMS)의 데이터를 관리하기 위해 설계된 프로그래밍 언어</li>\n  <li>장고의 <code class=\"highlighter-rouge\">Model</code>은 RDBMS만을 지원한다.</li>\n  <li>장고는 <code class=\"highlighter-rouge\">Model</code>을 통해 SQL을 생성하고 실행한다.</li>\n</ul>\n\n<h2 id=\"django-model\">Django Model</h2>\n<ul>\n  <li>장고 모델은 장고의 내장 ORM(Object Relational Mapping)이다.\n    <ul>\n      <li>ORM이란? 데이터베이스와 객체 지향 프로그래밍 언어 간의 호환되지 않는 데이터를 변환하는 프로그래밍 기법</li>\n    </ul>\n  </li>\n  <li>SQL을 직접 작성하지 않아도 장고 모델을 통해 데이터베이스로의 접근이 가능하다.</li>\n  <li>즉, <code class=\"highlighter-rouge\">Model</code>은 <파이썬 클래스=\"\"> 와 <데이터베이스 테이블=\"\"> 을 매핑한다.\n</데이터베이스></파이썬>    <ul>\n      <li>Model Instance : DB 테이블의 Row</li>\n      <li>예를 들어 blog앱 Post모델이면, 데이터베이스의 blog_post테이블과 매핑하고, blog앱 Comment모델이면, blog_comment테이블과 매핑을 한다.</li>\n    </ul>\n  </li>\n  <li>데이터베이스 테이블의 구조 및 타입을 먼저 설계하고 모델을 정의한다. 이 때 모델 클래스명은 단수형</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Post</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span>\n      <span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span>\n      <span class=\"n\">verbose_name</span><span class=\"o\">=</span><span class=\"s\">'제목'</span><span class=\"p\">,</span>\n      <span class=\"n\">help_text</span><span class=\"o\">=</span><span class=\"s\">'포스팅 제목을 입력해주세요. 최대 100자 내외'</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span> <span class=\"c\"># 길이 제한이 있는 문자열</span>\n\n    <span class=\"n\">content</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">TextField</span><span class=\"p\">(</span>\n      <span class=\"n\">verbose_name</span><span class=\"o\">=</span><span class=\"s\">'내용'</span>\n    <span class=\"p\">)</span> <span class=\"c\"># 길이 제한이 없는 문자열</span>\n\n    <span class=\"n\">acreated_at</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">DateTimeField</span><span class=\"p\">(</span>\n      <span class=\"n\">auto_now_add</span><span class=\"o\">=</span><span class=\"bp\">True</span>\n    <span class=\"p\">)</span> <span class=\"c\"># 최초 저장될 때 최초 저장 일시</span>\n\n    <span class=\"n\">updated_at</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">DateTimeField</span><span class=\"p\">(</span>\n      <span class=\"n\">auto_now</span><span class=\"o\">=</span><span class=\"bp\">True</span>\n    <span class=\"p\">)</span> <span class=\"c\"># 갱신 시 저장 일시</span>\n\n</code></pre>\n</div>\n\n<h4 id=\"장고에서-지원하는-모델-필드-타입\">장고에서 지원하는 모델 필드 타입</h4>\n<ul>\n  <li>Field Tyeps : AutoField, BooleanField, CharField, DateTimeField, FileField, ImangeField, TextField…</li>\n  <li>Relation ship Types : ForeignKey, ManyToManyField, OneToOneField…</li>\n</ul>\n\n<h3 id=\"필드-옵션\">필드 옵션</h3>\n<ul>\n  <li>필드마다 고유 옵션이 있고,</li>\n  <li>모든 필드에 공통으로 쓸 수 있는 옵션이 있다.\n    <ul>\n      <li>null(DB Option) : DB 필드에 NULL 허용 여부(Default : False)</li>\n      <li>unique(DB Option) : 유일성 여부</li>\n      <li>blank : 입력값 유효성(validation) 검사 시 empty 값 허용 여부(Default : False)</li>\n      <li>choices(form widget용) : select box (‘저장될 값’, ‘UI에 보여질 레이블’)</li>\n      <li>validators : 입력값 유효성 검사를 수행할 함수를 여러 개 지정\n        <ul>\n          <li>이메일만 받기, 최대 길이 제한, 최소값 제한…</li>\n          <li>인자로 받는 값이 해당 함수 목적에 맞지 않으면, 목적에 맞지 않다는 안내 메세지와 함께 실행이 중단됨</li>\n        </ul>\n      </li>\n      <li>verbose_name : 필드 레이블. 지정되지 않으면 필드명이 쓰여짐</li>\n      <li>help_text(form widget 용) : 필드 입력 도움말</li>\n    </ul>\n  </li>\n</ul>\n"
    } ,
  
    {
      "title"    : "[Try Hello World] Level1 같은 숫자는 싫어",
      "category" : "Solve Algorithm!tryhelloworld",
      "tags"     : "Alogorithm, Level1",
      "url"      : "/solve%20algorithm!/tryhelloworld/2017/06/07/tryhelloworld-level1-5-2.html",
      "date"     : "2017-06-07 00:00:00 +0900",
      "content"   : "<h2 id=\"같은-숫자는-싫어\">같은 숫자는 싫어</h2>\n<p>no_continuous함수는 스트링 s를 매개변수로 입력받습니다.</p>\n\n<p>s의 글자들의 순서를 유지하면서, 글자들 중 연속적으로 나타나는 아이템은 제거된 배열(파이썬은 list)을 리턴하도록 함수를 완성하세요.\n예를들어 다음과 같이 동작하면 됩니다.<br /></p>\n\n<p>s가 ‘133303’이라면 [‘1’, ‘3’, ‘0’, ‘3’]를 리턴</p>\n\n<p>s가 ‘47330’이라면 [4, 7, 3, 0]을 리턴</p>\n\n<ul>\n  <li>내가 푼 것</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">no_continuous</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n    <span class=\"n\">bowl</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">s</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]]</span>\n    <span class=\"n\">num_value</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)):</span>\n        <span class=\"k\">if</span> <span class=\"n\">num_value</span> <span class=\"o\">!=</span> <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]:</span>\n            <span class=\"n\">num_value</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n            <span class=\"n\">bowl</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">num_value</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">bowl</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span> <span class=\"n\">no_continuous</span><span class=\"p\">(</span> <span class=\"s\">\"133303\"</span> <span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<ul>\n  <li>다른 사람 풀이</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">no_continuous</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">))</span> <span class=\"k\">if</span> <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"p\">]]</span>\n</code></pre>\n</div>\n"
    } ,
  
    {
      "title"    : "[Try Hello World] Level1 딕셔너리 정렬",
      "category" : "Solve Algorithm!tryhelloworld",
      "tags"     : "Alogorithm, Level1",
      "url"      : "/solve%20algorithm!/tryhelloworld/2017/06/07/tryhelloworld-level1-5-1.html",
      "date"     : "2017-06-07 00:00:00 +0900",
      "content"   : "<h2 id=\"딕셔너리-정렬\">딕셔너리 정렬</h2>\n<p>딕셔너리는 들어있는 값에 순서가 없지만, 키를 기준으로 정렬하고 싶습니다. 그래서 키와 값을 튜플로 구성하고, 이를 순서대로 리스트에 넣으려고 합니다.</p>\n\n<p>예를 들어 {“김철수”:78, “이하나”:97, “정진원”:88}이 있다면, 각각의 키와 값을</p>\n\n<ul>\n  <li>(“김철수”, 78)</li>\n  <li>(“이하나”, 97)</li>\n  <li>(“정진원”, 88)</li>\n</ul>\n\n<p>과 같이 튜플로 분리하고 키를 기준으로 정렬해서 다음과 같은 리스트를 만들면 됩니다.</p>\n\n<p>예: [ (“김철수”, 78), (“이하나”, 97), (“정진원”, 88) ]</p>\n\n<p>다음 sort_dictionary 함수를 완성해 보세요.</p>\n\n<ul>\n  <li>내가 푼 것</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">sort_dictionary</span><span class=\"p\">(</span><span class=\"n\">dic</span><span class=\"p\">):</span>\n    <span class=\"n\">re_arrange</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">sort_name</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"nb\">tuple</span><span class=\"p\">(</span><span class=\"n\">dic</span><span class=\"p\">))</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">sort_name</span><span class=\"p\">)):</span>\n    \t<span class=\"n\">re_arrange</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">sort_name</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">dic</span><span class=\"p\">[</span><span class=\"n\">sort_name</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]]))</span>\n    <span class=\"k\">return</span> <span class=\"n\">re_arrange</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span> <span class=\"n\">sort_dictionary</span><span class=\"p\">(</span> <span class=\"p\">{</span><span class=\"s\">\"김철수\"</span><span class=\"p\">:</span><span class=\"mi\">78</span><span class=\"p\">,</span> <span class=\"s\">\"이하나\"</span><span class=\"p\">:</span><span class=\"mi\">97</span><span class=\"p\">,</span> <span class=\"s\">\"정진원\"</span><span class=\"p\">:</span><span class=\"mi\">88</span><span class=\"p\">}</span> <span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<ul>\n  <li>다른 사람 풀이</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">sort_dictionary</span><span class=\"p\">(</span><span class=\"n\">dic</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">dic</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">(),</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n</code></pre>\n</div>\n"
    } ,
  
    {
      "title"    : "[지킬 블로그] Disqus 댓글 기능 달기",
      "category" : "지킬 블로그 꾸미기jekyll",
      "tags"     : "Jekyll",
      "url"      : "/%EC%A7%80%ED%82%AC%20%EB%B8%94%EB%A1%9C%EA%B7%B8%20%EA%BE%B8%EB%AF%B8%EA%B8%B0/jekyll/2017/06/06/jekyll-blog-comment.html",
      "date"     : "2017-06-06 00:00:00 +0900",
      "content"   : "<h3 id=\"지킬-블로그-댓글-기능-달기\">지킬 블로그 댓글 기능 달기</h3>\n<p>Disqus는 정적인 Jekyll에서 동적 기능인 댓글을 사용할 수 있게 한다.</p>\n\n<h3 id=\"step1-disqus-가입하기\">Step1) Disqus 가입하기</h3>\n<p><a href=\"https://disqus.com/\">Disqus</a> 에서 회원가입 하고, 이메일로 verify를 한다.</p>\n\n<h3 id=\"step2-사이트-등록하기\">Step2) 사이트 등록하기</h3>\n<ul>\n  <li>\n    <p>오른편 톱니바퀴 모양 아이콘을 클릭하고, 드롭다운 메뉴의 <code class=\"highlighter-rouge\">Add Disqus To Site</code> 페이지에서 <code class=\"highlighter-rouge\">GET STARTED</code>를 클릭한다.</p>\n  </li>\n  <li>\n    <p>2번 째 항목인 <code class=\"highlighter-rouge\">I want to install Disqus on my site</code>를 클릭한다.</p>\n  </li>\n  <li>\n    <p>웹사이트 이름과 카테고리를 임의로 지정해주고, 웹사이트 URL은 댓글 기능을 붙일 내 블로그 주소를 기입한다.</p>\n  </li>\n</ul>\n\n<h3 id=\"step3-installation과-jekyll에-적용\">Step3) Installation과 Jekyll에 적용</h3>\n<ul>\n  <li>\n    <p>Jekyll 항목을 선택하고, 아래와 같은 Universal Code를 얻는다.</p>\n  </li>\n  <li>\n    <p><code class=\"highlighter-rouge\">_includes</code> 디렉토리에 comments.html 을 생성하고 얻은 코드를\n<code class=\"highlighter-rouge\"><span class=\"p\">{</span><span class=\"err\">%</span><span class=\"w\"> </span><span class=\"err\">if</span><span class=\"w\"> </span><span class=\"err\">page.comments</span><span class=\"w\"> </span><span class=\"err\">%</span><span class=\"p\">}</span></code> 와 <code class=\"highlighter-rouge\"><span class=\"p\">{</span><span class=\"err\">%</span><span class=\"w\"> </span><span class=\"err\">endif</span><span class=\"w\"> </span><span class=\"err\">%</span><span class=\"p\">}</span></code> 사이에 붙여넣는다.</p>\n  </li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code>\n<span class=\"p\">{</span><span class=\"o\">%</span> <span class=\"k\">if</span> <span class=\"n\">page</span><span class=\"o\">.</span><span class=\"n\">comments</span> <span class=\"o\">%</span><span class=\"p\">}</span>\n  <span class=\"o\">&lt;</span><span class=\"n\">div</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s\">\"disqus_thread\"</span><span class=\"o\">&gt;&lt;/</span><span class=\"n\">div</span><span class=\"o\">&gt;</span>\n  <span class=\"o\">&lt;</span><span class=\"n\">script</span><span class=\"o\">&gt;</span>\n\n  <span class=\"o\">/**</span>\n  <span class=\"o\">*</span>  <span class=\"n\">RECOMMENDED</span> <span class=\"n\">CONFIGURATION</span> <span class=\"n\">VARIABLES</span><span class=\"p\">:</span> <span class=\"n\">EDIT</span> <span class=\"n\">AND</span> <span class=\"n\">UNCOMMENT</span> <span class=\"n\">THE</span> <span class=\"n\">SECTION</span> <span class=\"n\">BELOW</span> <span class=\"n\">TO</span> <span class=\"n\">INSERT</span> <span class=\"n\">DYNAMIC</span> <span class=\"n\">VALUES</span> <span class=\"n\">FROM</span> <span class=\"n\">YOUR</span> <span class=\"n\">PLATFORM</span> <span class=\"n\">OR</span> <span class=\"n\">CMS</span><span class=\"o\">.</span>\n  <span class=\"o\">*</span>  <span class=\"n\">LEARN</span> <span class=\"n\">WHY</span> <span class=\"n\">DEFINING</span> <span class=\"n\">THESE</span> <span class=\"n\">VARIABLES</span> <span class=\"n\">IS</span> <span class=\"n\">IMPORTANT</span><span class=\"p\">:</span> <span class=\"n\">https</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">disqus</span><span class=\"o\">.</span><span class=\"n\">com</span><span class=\"o\">/</span><span class=\"n\">admin</span><span class=\"o\">/</span><span class=\"n\">universalcode</span><span class=\"o\">/</span><span class=\"c\">#configuration-variables*/</span>\n  <span class=\"o\">/*</span>\n  <span class=\"n\">var</span> <span class=\"n\">disqus_config</span> <span class=\"o\">=</span> <span class=\"n\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"n\">this</span><span class=\"o\">.</span><span class=\"n\">page</span><span class=\"o\">.</span><span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"n\">PAGE_URL</span><span class=\"p\">;</span>  <span class=\"o\">//</span> <span class=\"n\">Replace</span> <span class=\"n\">PAGE_URL</span> <span class=\"k\">with</span> <span class=\"n\">your</span> <span class=\"n\">page</span><span class=\"s\">'s canonical URL variable</span><span class=\"err\">\n</span><span class=\"s\">  this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page'</span><span class=\"n\">s</span> <span class=\"n\">unique</span> <span class=\"n\">identifier</span> <span class=\"n\">variable</span>\n  <span class=\"p\">};</span>\n  <span class=\"o\">*/</span>\n  <span class=\"p\">(</span><span class=\"n\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"o\">//</span> <span class=\"n\">DON</span><span class=\"s\">'T EDIT BELOW THIS LINE</span><span class=\"err\">\n</span><span class=\"s\">  var d = document, s = d.createElement('</span><span class=\"n\">script</span><span class=\"s\">');</span><span class=\"err\">\n</span><span class=\"s\">  s.src =</span><span class=\"err\">\n\n</span><span class=\"s\">  ...</span><span class=\"err\">\n\n</span><span class=\"s\">{</span><span class=\"si\">% </span><span class=\"s\">endif </span><span class=\"si\">%</span><span class=\"s\">}</span><span class=\"err\">\n\n</span></code></pre>\n</div>\n\n<ul>\n  <li><code class=\"highlighter-rouge\">_layouts</code> 디렉토리의 <code class=\"highlighter-rouge\">post.html</code> 에서 댓글 기능을 붙일 위치에 다음과 같이 include를 한다.</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code>\n<span class=\"o\">&lt;</span><span class=\"n\">div</span><span class=\"o\">&gt;</span>\n  <span class=\"p\">{{</span> <span class=\"n\">content</span> <span class=\"p\">}}</span>\n  <span class=\"p\">{</span><span class=\"o\">%</span> <span class=\"n\">include</span> <span class=\"n\">comments</span><span class=\"o\">.</span><span class=\"n\">html</span> <span class=\"o\">%</span><span class=\"p\">}</span>\n<span class=\"o\">&lt;/</span><span class=\"n\">div</span><span class=\"o\">&gt;</span>\n\n</code></pre>\n</div>\n\n<h3 id=\"step4-포스트에-disqus-사용하기\">Step4) 포스트에 Disqus 사용하기</h3>\n<p>Disqus를 사용하려면, YAML frontmatter에 아래와 같이 comments: true를 삽입하면 된다. comments: false나 comments: 자체를 넣지 않으면 Disqus가 나타나지 않는다.</p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code>\n<span class=\"o\">---</span>\n<span class=\"n\">layout</span><span class=\"p\">:</span> <span class=\"n\">default</span>\n<span class=\"n\">comments</span><span class=\"p\">:</span> <span class=\"n\">true</span>\n<span class=\"c\"># other options</span>\n<span class=\"o\">---</span>\n\n</code></pre>\n</div>\n"
    } ,
  
    {
      "title"    : "[Try Hello World] Level1 문자열 내 p와 y의 개수",
      "category" : "Solve Algorithm!tryhelloworld",
      "tags"     : "Alogorithm, Level1",
      "url"      : "/solve%20algorithm!/tryhelloworld/2017/06/06/tryhelloworld-level1-4-2.html",
      "date"     : "2017-06-06 00:00:00 +0900",
      "content"   : "<h2 id=\"문자열-내-p와-y의-개수\">문자열 내 p와 y의 개수</h2>\n<p>numPY함수는 대문자와 소문자가 섞여있는 문자열 s를 매개변수로 입력받습니다.</p>\n\n<p>s에 ‘p’의 개수와 ‘y’의 개수를 비교해 같으면 True, 다르면 False를 리턴하도록 함수를 완성하세요. ‘p’, ‘y’ 모두 하나도 없는 경우는 항상 True를 리턴합니다.</p>\n\n<p>예를들어 s가 “pPoooyY”면 True를 리턴하고 “Pyy”라면 False를 리턴합니다.</p>\n\n<ul>\n  <li>내가 푼 것</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">numPY</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n\t<span class=\"n\">p_count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\t<span class=\"n\">y_count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n\t<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">s</span><span class=\"p\">:</span>\n\t\t<span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"s\">\"p\"</span> <span class=\"ow\">or</span> <span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"s\">\"P\"</span><span class=\"p\">:</span>\n\t\t\t<span class=\"n\">p_count</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n\t\t<span class=\"k\">elif</span> <span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"s\">\"y\"</span> <span class=\"ow\">or</span> <span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"s\">\"Y\"</span><span class=\"p\">:</span>\n\t\t\t<span class=\"n\">y_count</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n\t<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">p_count</span><span class=\"p\">,</span> <span class=\"n\">y_count</span><span class=\"p\">)</span>\n\n\t<span class=\"k\">if</span> <span class=\"n\">p_count</span> <span class=\"o\">==</span> <span class=\"n\">y_count</span><span class=\"p\">:</span>\n\t\t<span class=\"k\">return</span> <span class=\"bp\">True</span>\n\t<span class=\"k\">return</span> <span class=\"bp\">False</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span> <span class=\"n\">numPY</span><span class=\"p\">(</span><span class=\"s\">\"YbYYYpppEPRm\"</span><span class=\"p\">)</span> <span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span> <span class=\"n\">numPY</span><span class=\"p\">(</span><span class=\"s\">\"Pyy\"</span><span class=\"p\">)</span> <span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<ul>\n  <li>다른 사람 풀이</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">numPY</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">(</span><span class=\"s\">'p'</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">(</span><span class=\"s\">'y'</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<h4 id=\"소감\"><em>소감</em></h4>\n<ul>\n  <li>이번 알고리즘은 내 기준에서 매우 어려웠다. 코드 엄청 긴 것 보소&gt;.0 그에 비해 다른 사람이 한 줄로 풀어낸 것을 보노라면 어김없이 현타가 찾아온다.</li>\n</ul>\n"
    } ,
  
    {
      "title"    : "[Try Hello World] Level1 문자열 다루기 기본",
      "category" : "Solve Algorithm!tryhelloworld",
      "tags"     : "Alogorithm, Level1",
      "url"      : "/solve%20algorithm!/tryhelloworld/2017/06/06/tryhelloworld-level1-4-1.html",
      "date"     : "2017-06-06 00:00:00 +0900",
      "content"   : "<h2 id=\"문자열-다루기-기본\">문자열 다루기 기본</h2>\n<p>alpha_string46함수는 문자열 s를 매개변수로 입력받습니다.</p>\n\n<p>s의 길이가 4혹은 6이고, 숫자로만 구성되있는지 확인해주는 함수를 완성하세요.</p>\n\n<p>예를들어 s가 “a234”이면 False를 리턴하고 “1234”라면 True를 리턴하면 됩니다.</p>\n\n<ul>\n  <li>내가 푼 것</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">alpha_string46</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n    <span class=\"n\">num_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">):</span>\n        <span class=\"n\">num_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">))</span>\n\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"mi\">4</span> <span class=\"ow\">and</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"mi\">6</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"bp\">False</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)):</span>\n        <span class=\"k\">if</span> <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">num_list</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">False</span>\n    <span class=\"k\">return</span> <span class=\"bp\">True</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span> <span class=\"n\">alpha_string46</span><span class=\"p\">(</span><span class=\"s\">\"a23415\"</span><span class=\"p\">)</span> <span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span> <span class=\"n\">alpha_string46</span><span class=\"p\">(</span><span class=\"s\">\"031779\"</span><span class=\"p\">)</span> <span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<ul>\n  <li>다른 사람 풀이</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">alpha_string46</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">isdigit</span><span class=\"p\">()</span> <span class=\"ow\">and</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n"
    } ,
  
    {
      "title"    : "[장고 기본편] 4. View",
      "category" : "여행 블로그 만들기travel",
      "tags"     : "Django, AskDjango, View, FBVCBV",
      "url"      : "/%EC%97%AC%ED%96%89%20%EB%B8%94%EB%A1%9C%EA%B7%B8%20%EB%A7%8C%EB%93%A4%EA%B8%B0/travel/2017/06/04/askdjango-View-OverView.html",
      "date"     : "2017-06-04 00:00:00 +0900",
      "content"   : "<blockquote>\n  <p>| ٩(๑òωó๑)۶ 아, 아, 마이크 테스트 |<br />\n이 마크다운은 이진석 선생님의 ‘Ask Django VOD 장고 기본편(Feat.여행 블로그 만들기)’를 토대로 작성되었습니다.</p>\n</blockquote>\n\n<h2 id=\"view\">View</h2>\n<ul>\n  <li>URLConf로부터 받은 객체\n    <ul>\n      <li>첫번째 인자로 <code class=\"highlighter-rouge\">HttpRequest</code> 인스턴스를 받는다.</li>\n      <li>또한 반드시 <code class=\"highlighter-rouge\">HttpRequest</code> 인스턴스를 리턴해야한다.</li>\n    </ul>\n  </li>\n  <li>뷰는 크게 <code class=\"highlighter-rouge\">함수기반 뷰</code>와 <code class=\"highlighter-rouge\">클래스기반 뷰</code>로 구분된다.</li>\n</ul>\n\n<blockquote>\n  <p><em>Function Based View</em> 예시</p>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.http</span> <span class=\"kn\">import</span> <span class=\"n\">HttpResponse</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">post_list</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n  <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s\">'Hello'</span>\n  <span class=\"k\">return</span> <span class=\"n\">HttpResponse</span><span class=\"p\">(</span><span class=\"s\">'''\n    &lt;h1&gt;{}, World!&lt;/h1&gt;\n  '''</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<blockquote>\n  <p><em>Class Based View</em> 예시</p>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.http</span> <span class=\"kn\">import</span> <span class=\"n\">HttpResponse</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.views.generic</span> <span class=\"kn\">import</span> <span class=\"n\">View</span>\n<span class=\"c\"># 뷰 사용패턴을 일반화시켜놓은 뷰의 모음</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">SampleTemplateView</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n  <span class=\"nd\">@classmethod</span>\n  <span class=\"k\">def</span> <span class=\"nf\">as_view</span><span class=\"p\">(</span><span class=\"n\">cls</span><span class=\"p\">,</span> <span class=\"n\">template_name</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">view_fn</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n      <span class=\"k\">return</span> <span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">template_name</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">view_fn</span>\n\n<span class=\"n\">fbv_view</span> <span class=\"o\">=</span> <span class=\"n\">SampleTemplateView</span><span class=\"o\">.</span><span class=\"n\">as_view</span><span class=\"p\">(</span><span class=\"s\">'myapp/sample_template.html'</span><span class=\"p\">)</span>\n<span class=\"c\"># as_view() 클래스 함수를 통해 함수기반 뷰에 입각한 객체 생성, 즉 클래스를 통해 함수를 호출</span>\n</code></pre>\n</div>\n<p><br /></p>\n\n<h3 id=\"template-공통\">Template 공통</h3>\n<p>[myapp/templates/myapp/post_form.html]<br /></p>\n<ul>\n  <li>table 태그 위에 <code class=\"highlighter-rouge\">csrf_token</code> 가 와야하는데 지킬 서버에서 오류를 일으키기 때문에 따로 기재합니다.</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"o\">&lt;</span><span class=\"n\">form</span> <span class=\"n\">action</span><span class=\"o\">=</span><span class=\"s\">\"\"</span> <span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s\">\"post\"</span><span class=\"o\">&gt;</span>\n  <span class=\"o\">&lt;</span><span class=\"n\">table</span><span class=\"o\">&gt;</span>\n        \n  <span class=\"o\">&lt;/</span><span class=\"n\">table</span><span class=\"o\">&gt;</span>\n  <span class=\"o\">&lt;</span><span class=\"nb\">input</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s\">\"submit\"</span> <span class=\"o\">/&gt;</span>\n<span class=\"o\">&lt;/</span><span class=\"n\">form</span><span class=\"o\">&gt;</span>\n</code></pre>\n</div>\n<p><br />\n뷰에 대한 더 자세한 내용이 궁금하다면 <a href=\"https://bbungsang.github.io/tutorial/2017/06/03/django-tutorial-part3-2.html\">Click!</a></p>\n"
    } ,
  
    {
      "title"    : "[장고 기본편] 3. URLConf와 정규표현식",
      "category" : "여행 블로그 만들기travel",
      "tags"     : "Django, AskDjango, URLConf, 정규표현식",
      "url"      : "/%EC%97%AC%ED%96%89%20%EB%B8%94%EB%A1%9C%EA%B7%B8%20%EB%A7%8C%EB%93%A4%EA%B8%B0/travel/2017/06/04/askdjango-URLConf-RegularExpression.html",
      "date"     : "2017-06-04 00:00:00 +0900",
      "content"   : "<blockquote>\n  <p>| ٩(๑òωó๑)۶ 아, 아, 마이크 테스트 |<br />\n이 마크다운은 이진석 선생님의 ‘Ask Django VOD 장고 기본편(Feat.여행 블로그 만들기)’를 토대로 작성되었습니다.</p>\n</blockquote>\n\n<ul>\n  <li>프로젝트/settings.py 최상위 URLConf 모듈을 지정한다.</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"n\">ROOT_URLCONF</span> <span class=\"o\">=</span> <span class=\"s\">'mysite/urls'</span> <span class=\"c\"># mysite/urls.py</span>\n</code></pre>\n</div>\n<ul>\n  <li>장고서버로 HTTP 요청이 들어올 때마다, URL 매핑 리스트를 처음부터 끝까지 순차적으로 검색한다.</li>\n  <li>적합한 URL 을 찾지 못 하면, 404 Page Not Found 페이지를 보여준다.</li>\n</ul>\n\n<p>[어플리케이션/urls.py]</p>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.conf.urls</span> <span class=\"kn\">import</span> <span class=\"n\">url</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.</span> <span class=\"kn\">import</span> <span class=\"n\">views</span> <span class=\"c\"># 현재 디렉토리 어플리케이션/ 에서 views 파일 임포트</span>\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"s\">r'^$'</span><span class=\"p\">,</span> <span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">post_list</span><span class=\"p\">),</span> <span class=\"c\"># 포스팅 목록, views 에서 post_list 라는 함수 자체를 호출</span>\n    <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"s\">r'^new/$'</span><span class=\"p\">,</span> <span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">post_new</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s\">'post_new'</span><span class=\"p\">),</span> <span class=\"c\"># 새 포스팅</span>\n    <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"s\">r'^(?P&lt;id&gt;</span><span class=\"err\">\\</span><span class=\"s\">d+)/$'</span><span class=\"p\">,</span> <span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">post_detail</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s\">'post_detail'</span><span class=\"p\">),</span> <span class=\"c\"># 포스팅 보기</span>\n    <span class=\"o\">...</span>\n<span class=\"p\">]</span>\n</code></pre>\n</div>\n<h3 id=\"정규표현식-풀이\">정규표현식 풀이</h3>\n<p>***r’^(?P<id>\\d+)/$'***</id></p>\n<ul>\n  <li><code class=\"highlighter-rouge\">^</code>와 <code class=\"highlighter-rouge\">$</code> : 시작과 끝을 표현한다.</li>\n  <li><code class=\"highlighter-rouge\">(?P)</code> : 이 영역의 문자열에 정규표현식을 적용해서</li>\n  <li><code class=\"highlighter-rouge\">\\d+</code> : 1이상의 숫자인 패턴에 부합된다면,</li>\n  <li><code class=\"highlighter-rouge\">&lt;id&gt;</code> : ‘id’라는 변수명으로 인자를 넘기겠다.</li>\n  <li><em>id 변수명으로 넘어간 인자의 모든 값들은 모두 문자열 타입이다.</em></li>\n</ul>\n\n<p>[Example]</p>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"c\"># [어플리케이션/urls.py]</span>\n\n<span class=\"n\">url</span><span class=\"p\">(</span><span class=\"s\">r'^sum/(?P&lt;x&gt;</span><span class=\"err\">\\</span><span class=\"s\">d+)/(?P&lt;y&gt;</span><span class=\"err\">\\</span><span class=\"s\">d+)/$'</span><span class=\"p\">,</span> <span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">mysum</span><span class=\"p\">)</span>\n<span class=\"c\"># url 주소는 sum/ 으로 시작, 그 다음 들어갈 경로는 x 를 인자로 받으며 숫자 패턴이고, 그 다음 들어갈 경로는 y 를 인자로 받으며 숫자 패턴이다.</span>\n<span class=\"c\"># 뷰의 mysum 함수로 x, y값의 파라미터가 전달되어 함수를 실행하게 된다.</span>\n\n<span class=\"c\"># [어플리케이션/views.py]</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">mysum</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n  <span class=\"k\">return</span> <span class=\"n\">HttpResponse</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">))</span>\n<span class=\"c\"># request와 url 경로를 통해 전달받은 x, y값을 인자를 받아서 x + y의 값으로 응답한다.</span>\n</code></pre>\n</div>\n<p><br /><br /></p>\n<h2 id=\"정리--프로젝트와-앱을-생성하기까지\"><em>정리 : 프로젝트와 앱을 생성하기까지</em></h2>\n<ol>\n  <li>프로젝트 생성 : <code class=\"highlighter-rouge\">django-admin startproject &lt;프로젝트명&gt;</code></li>\n  <li>프로젝트 디렉토리의 settings.py 설정</li>\n  <li>앱 생성 : <code class=\"highlighter-rouge\">python manage.py startapp &lt;앱이름&gt;</code></li>\n  <li>프로젝트/settings.py의 INSTALLED_APPS에 어플리케이션 등록</li>\n  <li>앱/urls.py 파일 생성 후, 프로젝트/urls.py 에서 앱 URLConf 설정 include</li>\n</ol>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.conf.urls</span> <span class=\"kn\">import</span> <span class=\"n\">include</span><span class=\"p\">,</span> <span class=\"n\">urls</span>\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n  <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"s\">r'^앱이름/'</span><span class=\"p\">,</span> <span class=\"n\">include</span><span class=\"p\">(</span><span class=\"s\">'앱이름.urls'</span><span class=\"p\">,</span> <span class=\"n\">namespace</span><span class=\"o\">=</span><span class=\"s\">'앱이름'</span><span class=\"p\">)),</span>\n<span class=\"p\">]</span>\n</code></pre>\n</div>\n"
    } ,
  
    {
      "title"    : "[장고 기본편] 2. DjangoApp, URLConf, Template",
      "category" : "여행 블로그 만들기travel",
      "tags"     : "Django, AskDjango, URLConf, 템플릿",
      "url"      : "/%EC%97%AC%ED%96%89%20%EB%B8%94%EB%A1%9C%EA%B7%B8%20%EB%A7%8C%EB%93%A4%EA%B8%B0/travel/2017/06/04/aksdjango-DjangoApp-URLConf-Template.html",
      "date"     : "2017-06-04 00:00:00 +0900",
      "content"   : "<blockquote>\n  <p>| ٩(๑òωó๑)۶ 아, 아, 마이크 테스트 |<br />\n이 마크다운은 이진석 선생님의 ‘Ask Django VOD 장고 기본편(Feat.여행 블로그 만들기)’를 토대로 작성되었습니다.</p>\n</blockquote>\n\n<h2 id=\"프로젝트-시작\">프로젝트 시작!</h2>\n<h4 id=\"-항상-managepy-가-있는-디렉토리상에서-장고-커맨드를-입력할-것\">&gt; 항상 manage.py 가 있는 디렉토리상에서 장고 커맨드를 입력할 것</h4>\n\n<p>0) 프로젝트 생성 : <code class=\"highlighter-rouge\">django-admin startapp &lt;app-name&gt;</code><br />\n1) 앱 디렉토리 생성 : <code class=\"highlighter-rouge\">python manage.py startapp blog</code><br />\n2) 앱을 프로젝트에 등록 : <프로젝트명>/settings.py *콤파에 유의할 것*</프로젝트명></p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s\">'django.contrib.admin'</span><span class=\"p\">,</span>\n    <span class=\"s\">'django.contrib.auth'</span><span class=\"p\">,</span>\n    <span class=\"s\">'django.contrib.contenttypes'</span><span class=\"p\">,</span>\n    <span class=\"s\">'django.contrib.sessions'</span><span class=\"p\">,</span>\n    <span class=\"s\">'django.contrib.messages'</span><span class=\"p\">,</span>\n    <span class=\"s\">'django.contrib.staticfiles'</span><span class=\"p\">,</span>\n    <span class=\"s\">'blog'</span><span class=\"p\">,</span> <span class=\"c\"># 'blog' 앱 등록</span>\n<span class=\"p\">]</span>\n<span class=\"c\"># 현재 장고 앱으로 위 6개가 등록되어 있음.</span>\n<span class=\"c\"># django.contrib : 단순한 디렉토리 경로 장고에서 기본으로 제공되는 앱들이 이 contrib 안에 있다.</span>\n</code></pre>\n</div>\n<p>3) 첫 뷰 생성\n[앱이름/views.py]</p>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.shortcuts</span> <span class=\"kn\">import</span> <span class=\"n\">render</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">post_list</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"s\">'blog/post_list.html'</span><span class=\"p\">)</span> <span class=\"c\"># 반드시 앱 이름을 쓰고 그 뒤에 파일명 쓰기</span>\n</code></pre>\n</div>\n<p>4) 어플리케이션 디렉토리에 urls.py 생성 후 경로 설정<br />\n[앱이름/urls.py]</p>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.conf.urls</span> <span class=\"kn\">import</span> <span class=\"n\">url</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.</span> <span class=\"kn\">import</span> <span class=\"n\">views</span>\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n  <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"s\">r'^$'</span><span class=\"p\">,</span> <span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">post_list</span><span class=\"p\">)</span>\n<span class=\"p\">]</span>\n</code></pre>\n</div>\n<ul>\n  <li>기본 경로에 대한 url 을 지정해주지 않았기 때문에 page not found를 응답한다.</li>\n</ul>\n\n<p>5) 프로젝트 디렉토리의 urls.py 변경 include\n[프로젝트명/urls.py]</p>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.conf.urls</span> <span class=\"kn\">import</span> <span class=\"n\">include</span><span class=\"p\">,</span> <span class=\"n\">url</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.contrib</span> <span class=\"kn\">import</span> <span class=\"n\">admin</span>\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n  <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"s\">r'^admin/'</span><span class=\"p\">,</span> <span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">site</span><span class=\"p\">,</span><span class=\"n\">urls</span><span class=\"p\">),</span>\n  <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"s\">r'^blog/'</span><span class=\"p\">,</span> <span class=\"n\">include</span><span class=\"p\">(</span><span class=\"s\">'blog.urls'</span><span class=\"p\">)),</span>\n<span class=\"p\">]</span>\n</code></pre>\n</div>\n<ul>\n  <li>서버를 구동시킨 후, 해당 주소 끝에 <code class=\"highlighter-rouge\">/blog/</code> 를 붙이면 템플릿이 없어서 생기는 오류창이 뜬다.</li>\n</ul>\n\n<p>6) <code class=\"highlighter-rouge\">앱이름/templates/앱이름/post_list.html</code> 생성하고 <code class=\"highlighter-rouge\">http:lobcalhost:8000/blog/</code>로 접속해본다.</p>\n"
    } ,
  
    {
      "title"    : "Django Tutorial Part3 2",
      "category" : "",
      "tags"     : "",
      "url"      : "/2017/06/03/django-tutorial-part3-2.html",
      "date"     : "2017-06-03 00:00:00 +0900",
      "content"   : "<h4 id=\"-vote\"># vote</h4>\n<p><strong>[polls/views.py]</strong></p>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.shortcuts</span> <span class=\"kn\">import</span> <span class=\"n\">get_object_or_404</span><span class=\"p\">,</span> <span class=\"n\">render</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.http</span> <span class=\"kn\">import</span> <span class=\"n\">HttpResponseRedirect</span><span class=\"p\">,</span> <span class=\"n\">HttpResponse</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.urls</span> <span class=\"kn\">import</span> <span class=\"n\">reverse</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">.models</span> <span class=\"kn\">import</span> <span class=\"n\">Choice</span><span class=\"p\">,</span> <span class=\"n\">Question</span>\n\n<span class=\"o\">...</span>\n\n  <span class=\"k\">def</span> <span class=\"nf\">vote</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">question_id</span><span class=\"p\">):</span>\n      <span class=\"n\">question</span> <span class=\"o\">=</span> <span class=\"n\">get_object_or_404</span><span class=\"p\">(</span><span class=\"n\">Question</span><span class=\"p\">,</span> <span class=\"n\">pk</span><span class=\"o\">=</span><span class=\"n\">question_id</span><span class=\"p\">)</span>\n      <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">'hi'</span><span class=\"p\">)</span>\n      <span class=\"k\">try</span><span class=\"p\">:</span>\n          <span class=\"n\">selected_choice</span> <span class=\"o\">=</span> <span class=\"n\">question</span><span class=\"o\">.</span><span class=\"n\">choice_set</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">pk</span><span class=\"o\">=</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">POST</span><span class=\"p\">[</span><span class=\"s\">'choice'</span><span class=\"p\">])</span>\n\n      <span class=\"k\">except</span> <span class=\"p\">(</span><span class=\"nb\">KeyError</span><span class=\"p\">,</span> <span class=\"n\">Choice</span><span class=\"o\">.</span><span class=\"n\">DoesNotExist</span><span class=\"p\">):</span>\n          <span class=\"k\">return</span> <span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"s\">'polls/detail.html'</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n              <span class=\"s\">'question'</span><span class=\"p\">:</span> <span class=\"n\">question</span><span class=\"p\">,</span>\n              <span class=\"s\">'error_message'</span><span class=\"p\">:</span> <span class=\"s\">\"You didn't select a choice\"</span><span class=\"p\">,</span>\n          <span class=\"p\">})</span>\n      <span class=\"k\">else</span><span class=\"p\">:</span>\n          <span class=\"n\">selected_choice</span><span class=\"o\">.</span><span class=\"n\">votes</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n          <span class=\"n\">selected_choice</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n\n          <span class=\"k\">return</span> <span class=\"n\">HttpResponseRedirect</span><span class=\"p\">(</span><span class=\"n\">reverse</span><span class=\"p\">(</span><span class=\"s\">'results'</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">question</span><span class=\"o\">.</span><span class=\"nb\">id</span><span class=\"p\">,)))</span>\n</code></pre>\n</div>\n<ul>\n  <li>requst.POST[‘choice’] 는 선택된 choice의 ID 값을 string 으로  반환한다. request.POST value는 항상 string 형이다.</li>\n  <li>choice count 를 증가시킨 후에 코드는 HttpResponseRedirect 를 반환한다.</li>\n  <li>HttpResponseRedirect 는 한 개의 인자(사용자에게 재반응하여 보여주는 URL)만 취한다.</li>\n  <li>POST 형식으로 전달한 뒤에 항상 HttpResponseRedirect 로 반환되어야한다. 장고라서가 아니라 웹 개발의 좋은 관행이다.</li>\n  <li>reverse() 는 이 예제에서 HttpResponseRedirect 생성자에 대해 사용된 것이다.</li>\n  <li>이 함수는 view 함수에 대응한 URL이 hardcode 하는 것을 피하도록 해준다.</li>\n  <li>우리가 제어를 통과하고 URL pattern의 다양한 부분에 대한 뷰 함수의 이름을 고려한다.</li>\n</ul>\n\n<p><strong>[polls/urls.py]</strong></p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.conf.urls</span> <span class=\"kn\">import</span> <span class=\"n\">url</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.</span> <span class=\"kn\">import</span> <span class=\"n\">views</span> <span class=\"c\"># from polls import views</span>\n\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n<span class=\"o\">...</span>\n\n  <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"s\">r'^(?P&lt;question_id&gt;</span><span class=\"err\">\\</span><span class=\"s\">d+)/vote/$'</span><span class=\"p\">,</span> <span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">vote</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s\">'vote'</span><span class=\"p\">),</span>\n<span class=\"p\">]</span>\n</code></pre>\n</div>\n<p><br /><br /></p>\n<h4 id=\"-results\"># results</h4>\n<p><strong>[polls/views.py]</strong></p>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">results</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">question_id</span><span class=\"p\">):</span>\n    <span class=\"n\">question</span> <span class=\"o\">=</span> <span class=\"n\">get_object_or_404</span><span class=\"p\">(</span><span class=\"n\">Question</span><span class=\"p\">,</span> <span class=\"n\">pk</span><span class=\"o\">=</span><span class=\"n\">question_id</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"s\">'polls/results.html'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s\">'question'</span><span class=\"p\">:</span> <span class=\"n\">question</span><span class=\"p\">})</span>\n</code></pre>\n</div>\n<p><strong>[polls/urls.py]</strong></p>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.conf.urls</span> <span class=\"kn\">import</span> <span class=\"n\">url</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.</span> <span class=\"kn\">import</span> <span class=\"n\">views</span> <span class=\"c\"># from polls import views</span>\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n<span class=\"o\">...</span>\n  <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"s\">r'^(?P&lt;question_id&gt;</span><span class=\"err\">\\</span><span class=\"s\">d+)/results/$'</span><span class=\"p\">,</span> <span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s\">'results'</span><span class=\"p\">),</span>\n<span class=\"p\">]</span>\n</code></pre>\n</div>\n<p><strong>[polls/results.html]</strong></p>\n"
    } ,
  
    {
      "title"    : "Django Tutorial Part3 1",
      "category" : "",
      "tags"     : "",
      "url"      : "/2017/06/03/django-tutorial-part3-1.html",
      "date"     : "2017-06-03 00:00:00 +0900",
      "content"   : "<h2 id=\"overview\">Overview</h2>\n<ul>\n  <li>\n    <p><code class=\"highlighter-rouge\">view</code>는 장고 어플리케이션에서 특정한 함수와 특정한 템플릿을 가지는 웹 페이지의 형태이다.</p>\n  </li>\n  <li>이번 투표 어플리케이션에서는 4개의 <code class=\"highlighter-rouge\">view</code>가 있다.\n    <ul>\n      <li>Question 에 대한 <code class=\"highlighter-rouge\">index(메인페이지)</code> 구현 함수: 최근 기재된 순서로 질문 목록들을 나타낸다.</li>\n      <li>Question 에 대한 <code class=\"highlighter-rouge\">detail</code> 페이지 구현 함수: 투표에 대한 양식만 있는, 즉 질문과 선택지를 나타낸다.</li>\n      <li>Question 에 대한 <code class=\"highlighter-rouge\">result</code> 페이지 구현 함수: 질문에 대한 결과를 나타낸다.</li>\n      <li>투표를 할 수 있는 함수: 투표를 처리한다.</li>\n    </ul>\n  </li>\n  <li>\n    <p>장고에서 웹 페이지와 기타 내용을 <code class=\"highlighter-rouge\">view</code>를 통해 구현한다. 각각의 <code class=\"highlighter-rouge\">view</code>는 간단한 파이썬 함수로 표현된다.</p>\n  </li>\n  <li>\n    <p>장고는 요청된 URL을 검사함으로써 <code class=\"highlighter-rouge\">view</code>를 선택하며, URL 패턴은 대략 <code class=\"highlighter-rouge\">/polls(앱명)/detail(기능을 지칭)/26(페이지 번호)/...</code> 이러한 형태를 띈다.</p>\n  </li>\n  <li>URL 에서 <code class=\"highlighter-rouge\">view</code> 를 얻기 위해 장고는 ‘URLconfs’를 사용한다. 이는 <code class=\"highlighter-rouge\">view</code>에 대한 URL 패턴을 매핑한다.\n<br /><br /></li>\n</ul>\n\n<h3 id=\"index\">index</h3>\n<p><strong>[polls/views.py]</strong></p>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.shortcuts</span> <span class=\"kn\">import</span> <span class=\"n\">render</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">index</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"n\">latest_question_list</span> <span class=\"o\">=</span> <span class=\"n\">Question</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s\">'-pub_date'</span><span class=\"p\">)[:</span><span class=\"mi\">5</span><span class=\"p\">]</span>\n    <span class=\"c\"># 발행일 기준으로 순서대로 정렬되어 있는 Question 테이블의 리스트를 5개 발췌</span>\n    <span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s\">'latest_question_list'</span><span class=\"p\">:</span> <span class=\"n\">latest_question_list</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"s\">'polls/index.html'</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n<ul>\n  <li><code class=\"highlighter-rouge\">render()</code> 은 첫번째 인자로서 request 객체를 취한다. 두번째 인자는 template 의 이름, 세번째 인자는 딕셔너리이다.</li>\n  <li>context 와 함께 걸러진 template 의 HttpResponse 객체를 반환한다.</li>\n</ul>\n\n<p><strong>[polls/urls.py]</strong></p>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.conf.urls</span> <span class=\"kn\">import</span> <span class=\"n\">url</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.</span> <span class=\"kn\">import</span> <span class=\"n\">views</span> <span class=\"c\"># from polls import views</span>\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n  <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"s\">r'^$'</span><span class=\"p\">,</span> <span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s\">'index'</span><span class=\"p\">),</span>\n</code></pre>\n</div>\n<ul>\n  <li>name 의 value(index) 는  {% url %} 로 템플릿의 태그에 쓰인다.</li>\n</ul>\n\n<p><strong>[polls/index.html]</strong></p>\n<div class=\"language-html highlighter-rouge\"><pre class=\"highlight\"><code>\n{% if latest_question_list %}\n    <span class=\"nt\">&lt;ul&gt;</span>\n    {% for question in latest_question_list %}\n        <span class=\"nt\">&lt;li&gt;&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">\"{% url 'detail' question.id %}\"</span><span class=\"nt\">&gt;</span>{{ question.question_text }}<span class=\"nt\">&lt;/a&gt;&lt;/li&gt;</span>\n    {% endfor %}\n    <span class=\"nt\">&lt;/ul&gt;</span>\n{% else %}\n    <span class=\"nt\">&lt;p&gt;</span>No polls are available.<span class=\"nt\">&lt;/p&gt;</span>\n{% endif %}\n\n</code></pre>\n</div>\n\n<h3 id=\"detail\">detail</h3>\n<p><strong>[polls/views.py]</strong></p>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.shortcuts</span> <span class=\"kn\">import</span> <span class=\"n\">get_object_or_404</span><span class=\"p\">,</span> <span class=\"n\">render</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">.models</span> <span class=\"kn\">import</span> <span class=\"n\">Choice</span><span class=\"p\">,</span> <span class=\"n\">Question</span>\n\n<span class=\"o\">...</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">detail</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">question_id</span><span class=\"p\">):</span>\n    <span class=\"c\"># try:</span>\n    <span class=\"c\">#     question = Question.objects.get(pk=question_id)</span>\n    <span class=\"c\"># except Question.DoesNotExist:</span>\n    <span class=\"c\">#     raise Http404(\"Question does not exist\")</span>\n    <span class=\"c\"># 만약에 요청된 ID에 대한 question 이 존재하지 않으면 view 는 Http404 예외를 일으킨다.</span>\n\n    <span class=\"n\">question</span> <span class=\"o\">=</span> <span class=\"n\">get_object_or_404</span><span class=\"p\">(</span><span class=\"n\">Question</span><span class=\"p\">,</span> <span class=\"n\">pk</span><span class=\"o\">=</span><span class=\"n\">question_id</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"s\">'polls/detail.html'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s\">'question'</span><span class=\"p\">:</span> <span class=\"n\">question</span><span class=\"p\">})</span>\n</code></pre>\n</div>\n<ul>\n  <li>모델의 관리자인 get_object_or_404()의 인자는 만약 객자가 존재하지 않으면 Http404를 일으킨다.</li>\n  <li>왜 DoesNotExist 예외처리를 안 하고 get_object_or_404()를 쓸까? 그 까닭은 장고 중요한 목표의 하나는 느슨한 결합을 유지하는 것이다.</li>\n  <li>몇 몇의 제어된 결합은 django.shortcuts 모듈에서 도입된다.</li>\n</ul>\n\n<p><strong>[polls/urls.py]</strong></p>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.conf.urls</span> <span class=\"kn\">import</span> <span class=\"n\">url</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.</span> <span class=\"kn\">import</span> <span class=\"n\">views</span> <span class=\"c\"># from polls import views</span>\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n<span class=\"o\">...</span>\n  <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"s\">r'^(?P&lt;question_id&gt;[0-9]+)/$'</span><span class=\"p\">,</span> <span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">detail</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s\">'detail'</span><span class=\"p\">),</span>\n<span class=\"p\">]</span>\n</code></pre>\n</div>\n\n<p><strong>[detail.html]</strong></p>\n<div class=\"language-html highlighter-rouge\"><pre class=\"highlight\"><code>\n<span class=\"nt\">&lt;h1&gt;</span>{{ question.question_text }}<span class=\"nt\">&lt;/h1&gt;</span>\n{% if error_message %}\n    <span class=\"nt\">&lt;p&gt;&lt;strong&gt;</span>{{ error_message }}<span class=\"nt\">&lt;/strong&gt;&lt;/p&gt;</span>\n{% endif %}\n<span class=\"nt\">&lt;form</span> <span class=\"na\">action=</span><span class=\"s\">\"{% url 'vote' question.id %}\"</span> <span class=\"na\">method=</span><span class=\"s\">\"post\"</span><span class=\"nt\">&gt;</span>\n{% csrf_token %}\n{% for choice in question.choice_set.all %}\n    <span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">\"radio\"</span> <span class=\"na\">name=</span><span class=\"s\">\"choice\"</span> <span class=\"na\">id=</span><span class=\"s\">\"choice{{ forloop.counter }}\"</span> <span class=\"na\">value=</span><span class=\"s\">\"{{ choice.id }}\"</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;label</span> <span class=\"na\">for=</span><span class=\"s\">\"choice{{ forloop.counter }}\"</span><span class=\"nt\">&gt;</span>{{ choice.choice_text }}<span class=\"nt\">&lt;/label&gt;&lt;br</span> <span class=\"nt\">/&gt;</span>\n{% endfor %}\n<span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">\"submit\"</span> <span class=\"na\">value=</span><span class=\"s\">\"Vote\"</span> <span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;/form&gt;</span>\n\n</code></pre>\n</div>\n<ul>\n  <li>이름 인자를 polls.urls.py 에서 정의했기 떄문에, {%  url %} 템플릿 태그를 사용함으로써 url 설정에 정의된 URL 경로에 대한 의존을 제거할 수 있다.</li>\n</ul>\n"
    } ,
  
    {
      "title"    : "Django Tutorial Part1 2",
      "category" : "",
      "tags"     : "",
      "url"      : "/2017/06/02/django-tutorial-part1-2.html",
      "date"     : "2017-06-02 00:00:00 +0900",
      "content"   : "<h3 id=\"the-development-server\">The development server</h3>\n<ul>\n  <li>바깥의 <code class=\"highlighter-rouge\">mysite</code> 디렉토리로 이동하세요. 만약 이미 그 지점에 있다면 아래와 같이 명령어를 입력해주세요.<br />\n    <blockquote>\n      <p><code class=\"highlighter-rouge\">python manage.py runserver</code></p>\n    </blockquote>\n  </li>\n  <li>입력후, <code class=\"highlighter-rouge\">http://127.0.0.1:8000</code>의 주소를 당신의 브라우저에 입력해보세요. <code class=\"highlighter-rouge\">\"Welcome to Django” page, in pleasant, light-blue pastel. It worked!</code>라는 페이지를 보게될 것입니다.</li>\n  <li>지금 당신은 작업을 할 프로젝트 환경을 설정한 것 입니다.</li>\n  <li>장고는 어플리케이션의 기본 디렉토리 구조를 자동으로 만드는 유틸리티를 제공합니다. 따라서 당신이 디렉토리들을 만드는 것보다는 코드를 작성하는 것에 초점을 맞추고 있습니다.</li>\n  <li>어플리케이션을 생성하기 위해서 당신은 <code class=\"highlighter-rouge\">manage.py</code>와 같은 디렉토리의 명령어 입력창에 다음과 같이 입력합니다.<br /></li>\n</ul>\n\n<blockquote>\n  <p><code class=\"highlighter-rouge\">python manage.py startapp polls</code></p>\n</blockquote>\n\n<ul>\n  <li>이러한 레이아웃과 같은 <code class=\"highlighter-rouge\">polls</code> 디렉토리를 생성할 것입니다.\n<code class=\"highlighter-rouge\">python\npolls/\n__init__.py\nadmin.py\napps.py\nmigrations/\n    __init__.py\nmodels.py\ntests.py\nviews.py\n</code><br /><br /></li>\n</ul>\n\n<h4 id=\"첫번-째-view-작성하기\">첫번 째 View 작성하기</h4>\n<p>[polls.views.py]</p>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.http</span> <span class=\"kn\">import</span> <span class=\"n\">HttpResponse</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">index</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n  <span class=\"k\">return</span> <span class=\"n\">HttpResponse</span><span class=\"p\">(</span><span class=\"s\">\"Hello, world. You're at the polls index\"</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n<ul>\n  <li>이것은 장고에서 가장 간단한 뷰 입니다. 뷰를 호출하기 위해서 URL을 매핑해야하는데 여기에서 우리는 URLconf가 필요합니다.</li>\n  <li>polls 디렉토리에서 URLconf를 생성하기 위해서 어플리케이션 디렉토리에서 urls.py를 생성하고 다음과 같이 코드를 작성합니다.</li>\n</ul>\n\n<p>[polls/urls.py]</p>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.conf.urls</span> <span class=\"kn\">import</span> <span class=\"n\">urls</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">.</span> <span class=\"kn\">import</span> <span class=\"n\">views</span>\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n  <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"s\">r'^$'</span><span class=\"p\">,</span> <span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s\">'index'</span><span class=\"p\">)</span>\n<span class=\"p\">]</span>\n</code></pre>\n</div>\n<ul>\n  <li>polls.urls 모듈을 root URLconf 로 지정하기 위해 mysite/urls.py 에서 다음과 같이 include()를 삽입해야합니다.</li>\n</ul>\n\n<p>[mysite/urls.py]</p>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.conf.urls</span> <span class=\"kn\">import</span> <span class=\"n\">include</span><span class=\"p\">,</span> <span class=\"n\">url</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.contrib</span> <span class=\"kn\">import</span> <span class=\"n\">admin</span>\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n  <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"s\">r'^polls/'</span><span class=\"p\">,</span> <span class=\"n\">include</span><span class=\"p\">(</span><span class=\"s\">'polls.urls'</span><span class=\"p\">)),</span>\n  <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"s\">r'^admin/'</span><span class=\"p\">,</span> <span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">site</span><span class=\"o\">.</span><span class=\"n\">urls</span><span class=\"p\">),</span>\n<span class=\"p\">]</span>\n</code></pre>\n</div>\n<ul>\n  <li><code class=\"highlighter-rouge\">include()</code> 함수는 다른 URLconf를 참조하도록 허용합니다. include()를 사용한 url 패턴에서 ‘/’ 다음에 정규표현식 ‘$’를 사용하지 않았다는 점을 주의하세요.</li>\n  <li>당신이 다른 URL 패턴을 포함시키고자 할 때 항상 include()를 사용하지만 admin.site.urls 는 이에 예외 사항입니다.</li>\n</ul>\n"
    } ,
  
    {
      "title"    : "Django Tutorial Part1 1",
      "category" : "",
      "tags"     : "",
      "url"      : "/2017/06/02/django-tutorial-part1-1.html",
      "date"     : "2017-06-02 00:00:00 +0900",
      "content"   : "<h2 id=\"장고-튜토리얼-어플리케이션-만들기-part1\">[장고 튜토리얼] 어플리케이션 만들기 part1</h2>\n<ul>\n  <li>이번 튜토리얼을 통해서 우리는 당신에게 기본 투표어플리케이션 만들기를 보여줄거에요.</li>\n  <li>이 어플리케이션은 사람들이 투표를 하고, 투표 결과를 볼 수 있는 사이트와 당신이 추가, 변경 그리고 삭제를 할 수 있는 관리자 사이트의 2개 파트로 구성되어있습니다.</li>\n  <li>우리는 당신이 장고를 이미 설치했다고 가정하고, 또한 당신은 장고가 설치되었으며, 아래의 명령 프롬프트를 따라함으로써 장고 버전을 말할 수 있을겁니다.<br /></li>\n</ul>\n\n<blockquote>\n  <p><code class=\"highlighter-rouge\">python -m django --version</code></p>\n</blockquote>\n\n<ul>\n  <li>만약 장고가 설치되어있다면, 당신은 장고 버전이 보여야만합니다. 그렇지 않다면, ‘No module named django’라는 에러 사항을 얻게될거에요.</li>\n  <li>이 튜토리얼은 장고 1.11 그리고 파이썬 3.4 혹은 최신버전으로 쓰여졌고, 장고 버전이 적절하지 않다면, 이 페이지의 오른쪽 아래에 버전 전환기를 사용함으로써 장고의 버전에 대한 튜토리얼을 참고하실 수 있습니다. 원하지 않다면 장고 최신버전을 업데이트하세요. <br /></li>\n</ul>\n\n<h3 id=\"creating-a-project\">Creating a project</h3>\n<ul>\n  <li>이 어플리케이션 만들기가 당신의 첫 장고 프로젝트라면, 당신은 초기 설정에 주의해야합니다. 당신은 장고 프로젝트를 설계하는 몇 몇의 코드를 자동 생성해야 할 것입니다.</li>\n  <li>데이터베이스, 컨피그레이션, 장고 특정 옵션들, 그리고 어플리케이션 설정들을 포함하는 장고 인스턴스에 대한 설정 모음이 바로 이에 해당하는 것입니다.</li>\n  <li>커맨드란에 당신이 코드를 저장하고자 하는 디렉토리로 이동하여 아래와 같이 명령어를 입력하세요.<br /></li>\n</ul>\n\n<blockquote>\n  <p><code class=\"highlighter-rouge\">django-admin startproject mysite</code></p>\n</blockquote>\n\n<ul>\n  <li>당신의 현재 디렉토리에 mysite 디렉토리가 생성될 것입니다.</li>\n  <li>생성된 startproject 로 무엇이 있는지 한 번 봐보세요.\n    <div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"n\">mysite</span><span class=\"o\">/</span>\n  <span class=\"n\">manage</span><span class=\"o\">.</span><span class=\"n\">py</span>\n  <span class=\"n\">mysite</span><span class=\"o\">/</span>\n      <span class=\"n\">__init__</span><span class=\"o\">.</span><span class=\"n\">py</span>\n      <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">py</span>\n      <span class=\"n\">urls</span><span class=\"o\">.</span><span class=\"n\">py</span>\n      <span class=\"n\">wsgi</span><span class=\"o\">.</span><span class=\"n\">py</span>\n</code></pre>\n    </div>\n  </li>\n  <li>바깥에 위치한 <code class=\"highlighter-rouge\">mysite(루트디렉토리)</code>는 단지 당신의 프로젝트에 대한 상자일 뿐입니다. 이 디렉토리의 이름은 장고에게 전혀 영향이 없습니다. 따라서 당신은 언제든 이 디렉토리의 이름을 다시 지을 수 있습니다.</li>\n  <li><code class=\"highlighter-rouge\">manage.py</code> : 장고 프로젝트와 상호작용하는 커맨드라인 유틸리티입니다.</li>\n  <li>내부에 위치한 <code class=\"highlighter-rouge\">mysite</code>는 당신 프로젝트에 대한 실질적인 파이썬 패키지입니다. 따라서 이 디렉토리의 이름은 내부 요소를 호출하여 사용해야할 파이썬 패키지의 이름입니다.</li>\n  <li><code class=\"highlighter-rouge\">mysite/setting.py</code> : 장고 프로젝트의 환경설정하는 파일입니다.</li>\n  <li><code class=\"highlighter-rouge\">mysite/urls.py</code> : 이 장고 프로젝트에 대한 URL 선언을 다루는 파일입니다.</li>\n  <li><code class=\"highlighter-rouge\">mysite/wsgi.py</code> : 장고 프로젝트를 제공하는 웹 서버에 대한 진입 지점입니다.<br /></li>\n</ul>\n"
    } ,
  
    {
      "title"    : "[Try Hello World] Level1 삼각형 출력하기",
      "category" : "Solve Algorithm!tryhelloworld",
      "tags"     : "Alogorithm, Level1",
      "url"      : "/solve%20algorithm!/tryhelloworld/2017/06/01/tryhelloworld-level1-3-4.html",
      "date"     : "2017-06-01 00:00:00 +0900",
      "content"   : "<h2 id=\"삼각형-출력하기\">삼각형 출력하기</h2>\n<p>printTriangle 메소드는 양의 정수 num을 매개변수로 입력받습니다.<br />\n다음을 참고해 *(별)로 높이가 num인 삼각형을 문자열로 리턴하는 printTriangle 메소드를 완성하세요.<br />\nprintTriangle이 return하는 String은 개행문자(‘\\n’)로 끝나야 합니다.</p>\n\n<ul>\n  <li>내가 푼 것</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">printTriangle</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">):</span>\n\t<span class=\"n\">star_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\t<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">num</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">):</span>\n            <span class=\"n\">star_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s\">\"*\"</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n\n\t<span class=\"k\">return</span> <span class=\"s\">''</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">star_list</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span> <span class=\"n\">printTriangle</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<ul>\n  <li>다른 사람 풀이</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">printTriangle</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"s\">''</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">([</span><span class=\"s\">'*'</span><span class=\"o\">*</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"s\">'</span><span class=\"se\">\\n</span><span class=\"s\">'</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">num</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)])</span>\n</code></pre>\n</div>\n\n<h4 id=\"소감\"><em>소감</em></h4>\n<ul>\n  <li>내가 푸는 방식은 아무래도 파이써닉함에서 한참 벗어나는 것 같다. 알고리즘을 단계별로 차차 풀어나가고 다른 사람 풀이도 열심히 참고하여 문법을 익히는 게 우선인 듯 하다.</li>\n</ul>\n"
    } ,
  
    {
      "title"    : "[Try Hello World] Level1 서울에서 김서방 찾기",
      "category" : "Solve Algorithm!tryhelloworld",
      "tags"     : "Alogorithm, Level1",
      "url"      : "/solve%20algorithm!/tryhelloworld/2017/06/01/tryhelloworld-level1-3-3.html",
      "date"     : "2017-06-01 00:00:00 +0900",
      "content"   : "<h2 id=\"서울에서-김서방-찾기\">서울에서 김서방 찾기</h2>\n<p>findKim 함수는 String형 배열 seoul을 매개변수로 받습니다.</p>\n\n<p>seoul의 element중 “Kim”의 위치 x를 찾아, “김서방은 x에 있다”는 String을 반환하세요.</p>\n\n<p>seoul에 “Kim”은 오직 한 번만 나타나며 잘못된 값이 입력되는 경우는 없습니다.</p>\n\n<ul>\n  <li>내가 푼 것</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">findKim</span><span class=\"p\">(</span><span class=\"n\">seoul</span><span class=\"p\">):</span>\n    <span class=\"n\">kimIdx</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">seoul</span><span class=\"p\">)):</span>\n        <span class=\"k\">if</span> <span class=\"n\">seoul</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s\">\"Kim\"</span><span class=\"p\">:</span>\n            <span class=\"n\">kimIdx</span> <span class=\"o\">=</span> <span class=\"n\">i</span>\n\n    <span class=\"k\">return</span> <span class=\"s\">\"김서방은 {}에 있다\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">kimIdx</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">findKim</span><span class=\"p\">([</span><span class=\"s\">\"Queen\"</span><span class=\"p\">,</span> <span class=\"s\">\"Tod\"</span><span class=\"p\">,</span> <span class=\"s\">\"Kim\"</span><span class=\"p\">]))</span>\n\n</code></pre>\n</div>\n\n<ul>\n  <li>다른 사람 풀이</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">findKim</span><span class=\"p\">(</span><span class=\"n\">seoul</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"s\">\"김서방은 {}에 있다\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">seoul</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"s\">'Kim'</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n"
    } ,
  
    {
      "title"    : "Jekyll Blog Tags",
      "category" : "",
      "tags"     : "",
      "url"      : "/2017/05/31/jekyll-blog-tags.html",
      "date"     : "2017-05-31 00:00:00 +0900",
      "content"   : "<h3 id=\"1-블로그-루트-폴더에-tagsmd-넣기\">1. 블로그 루트 폴더에 tags.md 넣기</h3>\n<ul>\n  <li>이 tags.md 는 모든 태그들을 출력해준다.</li>\n</ul>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>bbungsang.github.io\n├─── _includes\n├─── _layouts\n├─── _posts\n├─── css\n├─── [tags.md]\n└─── ...\n</code></pre>\n</div>\n<div class=\"language-html highlighter-rouge\"><pre class=\"highlight\"><code>\n---\nlayout: page\npermalink: /tags/\ntitle: Tags\n---\n\n<span class=\"nt\">&lt;ul</span> <span class=\"na\">class=</span><span class=\"s\">\"tag-cloud\"</span><span class=\"nt\">&gt;</span>\n{% for tag in site.tags %}\n  <span class=\"nt\">&lt;span</span> <span class=\"na\">style=</span><span class=\"s\">\"font-size: {{ tag | last | size | times: 100 | divided_by: site.tags.size | plus: 70  }}%\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">\"#{{ tag | first | slugize }}\"</span><span class=\"nt\">&gt;</span>\n      {{ tag | first }}\n    <span class=\"nt\">&lt;/a&gt;</span> <span class=\"ni\">&amp;nbsp;&amp;nbsp;</span>\n  <span class=\"nt\">&lt;/span&gt;</span>\n{% endfor %}\n<span class=\"nt\">&lt;/ul&gt;</span>\n\n</code></pre>\n</div>\n\n<p><br /></p>\n<h3 id=\"2-_includestagshtml-추가해주기\">2. _includes/tags.html 추가해주기</h3>\n<ul>\n  <li>포스트 상단에 태그들을 출력해 주는 페이지다.</li>\n</ul>\n\n<div class=\"language-html highlighter-rouge\"><pre class=\"highlight\"><code>\n<span class=\"nt\">&lt;img</span> <span class=\"na\">src=</span><span class=\"s\">\"/images/tag-256.png\"</span> <span class=\"na\">alt=</span><span class=\"s\">\"Tags: \"</span> <span class=\"na\">class=</span><span class=\"s\">\"tag-img\"</span><span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"post-tags\"</span><span class=\"nt\">&gt;</span>\n  {% if post %}\n    {% assign tags = post.tags %}\n  {% else %}\n    {% assign tags = page.tags %}\n  {% endif %}\n  {% for tag in tags %}\n  <span class=\"nt\">&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">\"/tags/#{{tag|slugize}}\"</span><span class=\"nt\">&gt;</span>{{tag}}<span class=\"nt\">&lt;/a&gt;</span>{% unless forloop.last %},{% endunless %}\n  {% endfor %}\n<span class=\"nt\">&lt;/div&gt;</span>\n\n</code></pre>\n</div>\n\n<p><br /></p>\n<h3 id=\"3-_layoutsposthtml-에-include-해주기\">3. _layouts/post.html 에 include 해주기</h3>\n<ul>\n  <li>포스트에 태그가 나오도록 위의 tags.html 파일을 include 해준다.</li>\n</ul>\n\n<div class=\"language-html highlighter-rouge\"><pre class=\"highlight\"><code>\n---\nlayout: default\n---\n\n<span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"post\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;h1</span> <span class=\"na\">class=</span><span class=\"s\">\"post-title\"</span><span class=\"nt\">&gt;</span>{{ page.title }}<span class=\"nt\">&lt;/h1&gt;</span>\n  <span class=\"nt\">&lt;span</span> <span class=\"na\">class=</span><span class=\"s\">\"post-date\"</span><span class=\"nt\">&gt;</span>{{ page.date | date_to_string }}<span class=\"nt\">&lt;/span&gt;</span>\n  {% include post_tags.html %}\n  <span class=\"nt\">&lt;br/&gt;</span>\n  {{ content }}\n<span class=\"nt\">&lt;/div&gt;</span>\n\n</code></pre>\n</div>\n\n<p><br /></p>\n<h3 id=\"4-사용하기\">4. 사용하기</h3>\n<ul>\n  <li>아래와 같이 포스트에 태그를 붙일 수 있다.</li>\n</ul>\n"
    } ,
  
    {
      "title"    : "장고 URL과 뷰",
      "category" : "Do 장고걸스!djangogirls",
      "tags"     : "Django, URL, Views",
      "url"      : "/do%20%EC%9E%A5%EA%B3%A0%EA%B1%B8%EC%8A%A4!/djangogirls/2017/05/30/djangogirls-url&view.html",
      "date"     : "2017-05-30 00:00:00 +0900",
      "content"   : "<blockquote>\n  <p><a href=\"https://tutorial.djangogirls.org/ko/\">장고걸스 튜토리얼</a>을 토대로 작성한 것입니다. 이 장은 URL과 View에 대해 간략히 설명하고 내용을 작성합니다.</p>\n</blockquote>\n\n<h2 id=\"url\">URL</h2>\n<p>URL은 웹 주소다. 인터넷의 모든 페이지는 고유한 URL을 가지고 있어야하며, 어플리케이션은 URL에 따라서 다른 내용을 불러온다.</p>\n\n<p>장고의 경우, <code class=\"highlighter-rouge\">URL Configuration</code>을 사용하는데, 장고에서 URL과 일치하는 뷰를 찾기 위한 패턴의 집합을 일컫는다.</p>\n\n<p><strong>장고 프로젝트 구조</strong></p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>djangogirls\n    [...]\n    manage.py\n    blog\n        models.py\n        views.py\n        urls.py\n    mysite\n        settings.py\n        urls.py\n        wsgi.py\n        __init__.py\n</code></pre>\n</div>\n\n<p><strong>[blog/urls.py]</strong></p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.conf.urls</span> <span class=\"kn\">import</span> <span class=\"n\">url</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.</span> <span class=\"kn\">import</span> <span class=\"n\">views</span>\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"s\">r'^$'</span><span class=\"p\">,</span> <span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">post_list</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s\">'post_list'</span><span class=\"p\">),</span>\n<span class=\"p\">]</span>\n</code></pre>\n</div>\n\n<p><code class=\"highlighter-rouge\">name='post_list'</code>는 URL에 이름을 붙인 것으로 뷰를 식별한다.</p>\n\n<p><strong>[mysite/urls.py]</strong></p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"n\">url</span><span class=\"p\">(</span><span class=\"s\">r'^admin/'</span><span class=\"p\">,</span> <span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">site</span><span class=\"o\">.</span><span class=\"n\">urls</span><span class=\"p\">),</span>\n<span class=\"c\"># 장고가 admin/ 로 시작하는 모든 URL을 VIEW와 대조하여 찾아낸다. URL은 무수히 많으므로 정규표현식을 사용한다.</span>\n\n<span class=\"n\">url</span><span class=\"p\">(</span><span class=\"s\">r'blog/'</span><span class=\"p\">,</span> <span class=\"n\">include</span><span class=\"p\">(</span><span class=\"s\">'blog.urls'</span><span class=\"p\">)),</span>\n<span class=\"c\"># http://127.0.0.1:8000/ 로 들어오는 모든 접속 요청을 blog.urls 로 전송</span>\n<span class=\"c\"># blog.urls 에 정의되어 있는 부분을 mysite.urls에서도 사용할 수 있도록 가져오는 역할 : include</span>\n<span class=\"c\"># blog/urls.py 에서 blog/... 주소를 사용할 때, 일일이 'blog/' 부분을 기입해야하는데, mysite/urls.py 에서 선언하면 그러한 수고를 덜 수 있다.</span>\n<span class=\"c\"># 또한 blog/ 뒤에 $를 붙이지 않도록 주의한다. blog/urls.py 에서 특정 view 함수를 연결할 때에만 붙여준다.</span>\n</code></pre>\n</div>\n\n<p><strong>[사용된 정규표현식]</strong></p>\n\n<p class=\"quote\">\n  ^post/(\\d+)/$\n</p>\n\n<ul>\n  <li><strong>^post/</strong> : url이 <em>post/</em> 로 <strong>시작</strong></li>\n  <li><strong>(\\d+)</strong> : <em>숫자</em>가 한 개 이상</li>\n  <li><strong>/$</strong> : url 마지막이 <em>/</em> 로 <strong>끝남</strong></li>\n</ul>\n\n<h2 id=\"뷰view\">뷰(view)</h2>\n<p>어플리케이션의 ‘로직’을 넣는 곳으로, <code class=\"highlighter-rouge\">모델</code>에서 필요한 정보를 받아와 <code class=\"highlighter-rouge\">템플릿</code>에 전달하는 역할을 한다. URL을 통해 호출되며 함수 기반 뷰와 클래스 기반 뷰가 있다.</p>\n\n<h3 id=\"렌더\">렌더</h3>\n<p>장고에서 지원해주는 템플릿 기반 시스템, 복잡한 문자열을 보다 쉽게 작업할 수 있도록 도와준다.</p>\n\n<p><strong>[blog/view.py]</strong></p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.http</span> <span class=\"kn\">import</span> <span class=\"n\">HttpResponse</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.shortcuts</span> <span class=\"kn\">import</span> <span class=\"n\">render</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">post_list</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n  <span class=\"k\">return</span> <span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"s\">'blog/post_list.html'</span><span class=\"p\">)</span> <span class=\"c\"># Template Loader</span>\n</code></pre>\n</div>\n\n<p><code class=\"highlighter-rouge\">post_list</code>라는 <code class=\"highlighter-rouge\">함수(def)</code>를 만들어 요청을 넘겨받고, 응답 내용을 <code class=\"highlighter-rouge\">blog/post_list.html</code>에서 보여준다는 의미이다.</p>\n\n<p>파일을 저장하고, 브라우저에서 http://127.0.0.1:8000/ 로 접속하면,</p>\n\n<p><img src=\"http://localhost:4000/assets/template_error.png\" alt=\"\" class=\"center-image\" /></p>\n\n<p>아직 <code class=\"highlighter-rouge\">blog/template/blog/post_list.html</code> 을 아직 안 만들었기 때문에 템플릿 오류가 발생한다.</p>\n"
    } ,
  
    {
      "title"    : "장고 모델",
      "category" : "Do 장고걸스!djangogirls",
      "tags"     : "Django, Djangogirls, Models",
      "url"      : "/do%20%EC%9E%A5%EA%B3%A0%EA%B1%B8%EC%8A%A4!/djangogirls/2017/05/30/djangogirls-models.html",
      "date"     : "2017-05-30 00:00:00 +0900",
      "content"   : "<blockquote>\n  <p><a href=\"https://tutorial.djangogirls.org/ko/\">장고걸스 튜토리얼</a>을 토대로 작성한 것입니다. 이 장은 장고 어플리케이션을 생성하고 모델과 장고 어드민을 작성합니다.</p>\n</blockquote>\n\n<h2 id=\"장고-모델\">장고 모델</h2>\n\n<p><img src=\"http://localhost:4000/assets/django_model.png\" alt=\"\" class=\"center-image\" /></p>\n\n<ul>\n  <li>User가 데이터를 요청하면, Django가 입력받은 정보를 Database에 전달한다.</li>\n  <li>DataBase가 데이터를 꺼내어 응답하면, 그 응답을 다시 Django가 User에게 전달한다.</li>\n  <li>장고 프로젝트는 SQLite3 DB가 기본으로 설정되어 있다. (실서비스에서는 그다지 적합하지 않다.)</li>\n  <li>원래 DB Table을 만들고 조회/추가/수정/삭제 하기 위해서는 SQL을 써야만 한다. 하지만 장고가 지원해주는 Django Model을 쓰면, 직접 SQL을 작성하지 않고도 <a href=\"https://tutorial.djangogirls.org/ko/django_orm/\">ORM</a>을 통해 SQL을 작성할 수 있다.</li>\n  <li>장고 모델은 <code class=\"highlighter-rouge\">파이썬 클래스 문법 형태</code>로 정의한다.</li>\n</ul>\n\n<h3 id=\"블로그에-어떤-내용을-저장할-것인지-설계하기\">블로그에 어떤 내용을 저장할 것인지 설계하기</h3>\n<p>다음은 모델 클래스명, 사용할 필드, 필드 목적에 대하여 설계한 것이다.</p>\n\n<pre><code class=\"language-docker\">Post        # 저장 단위에 대한 이름(모델명)\n--- 속성 ---\ntitle       # 제목(필드명)\ntext        # 내용\nauthor      # 작성자\ncreated_at  # 생성 날짜\npub_at      # 발행 날짜\n\n</code></pre>\n\n<h3 id=\"어플리케이션-제작하기\">어플리케이션 제작하기</h3>\n\n<p class=\"quote\">\n  python manage.py startapp [생성할 앱의 이름]\n</p>\n\n<p>manage.py 명령어를 입력할 시, 항상 <code class=\"highlighter-rouge\">manage.py가 있는 디렉토리</code>에서 입력해야 한다.</p>\n\n<p><strong>[settings.py]</strong></p>\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n  <span class=\"s\">'django.contrib.admin'</span><span class=\"p\">,</span>\n  <span class=\"s\">'django.contrib.auth'</span><span class=\"p\">,</span> <span class=\"o\">...</span>\n  <span class=\"s\">'blog'</span><span class=\"p\">,</span> <span class=\"c\"># 반드시 ,(콤마)를 붙이자</span>\n<span class=\"p\">]</span>\n</code></pre>\n</div>\n\n<p>어플리케이션 생성후, <code class=\"highlighter-rouge\">settings</code>의 <code class=\"highlighter-rouge\">INSTALLED_APPS</code>에 명시함으로써 Django에게 해당 어플리케이션을 사용할 것임을 알려줘야 한다.</p>\n\n<p><strong>[models.py]</strong></p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils</span> <span class=\"kn\">import</span> <span class=\"n\">timezone</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Post</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">author</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"s\">'auth.User'</span><span class=\"p\">)</span>\n    <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_lenght</span><span class=\"o\">=</span><span class=\"mi\">200</span><span class=\"p\">)</span> <span class=\"c\"># 길이 제한 있는 문자열</span>\n    <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">TextField</span><span class=\"p\">()</span> <span class=\"c\"># 길이 제한 없는 문자열</span>\n    <span class=\"n\">created_date</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">DateTimeField</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">timezone</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">)</span> <span class=\"c\"># 포스트 생성시 현재 시간이 자동으로 기입된다.</span>\n    <span class=\"n\">published_date</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">DateTimeField</span><span class=\"p\">(</span><span class=\"n\">blank</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">,</span> <span class=\"n\">null</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">publish</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">published_date</span> <span class=\"o\">=</span> <span class=\"n\">timezone</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__str__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">title</span>\n</code></pre>\n</div>\n\n<p>코드를 작성했다고 해서 데이터베이스가 바로 생성되는 것은 아니다. 반드시 마이그레이션 작업을 해야 데이터베이스가 생성된다.</p>\n\n<h3 id=\"모델의-마이그레이션-파일-생성하기\">모델의 마이그레이션 파일 생성하기</h3>\n\n<p class=\"quote\">\n  python manage.py <b>makemigrations</b> blog\n</p>\n\n<p>blog 앱을 타겟으로 마이그레이션 맵을 만들겠다는 명령어이다.</p>\n\n<p class=\"quote\">\n  python manage.py <b>migrate</b> blog\n</p>\n\n<p>마이그레이션 파일을 테이블에 적용, 마이그레이션 생성에 전혀 이상이 없으면, 이를 그대로 데이터베이스에 반영하겠다는 뜻이다.</p>\n\n<h2 id=\"django-관리자\">Django 관리자</h2>\n\n<p><strong>[blog/admin.py]</strong></p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.contrib</span> <span class=\"kn\">import</span> <span class=\"n\">admin</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.models</span> <span class=\"kn\">import</span> <span class=\"n\">Post</span> <span class=\"c\"># 같은 경로의 models.py에서 Post 테이블을 불러옴.</span>\n\n<span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">site</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">Post</span><span class=\"p\">)</span> <span class=\"c\"># 이 등록만으로도 장고 Admin에서 Post 모델을 사용할 수 있다.</span>\n</code></pre>\n</div>\n\n<ul>\n  <li><code class=\"highlighter-rouge\">python manage.py runserver 0:9000</code> : 9000번 포트에서 열겠다는 표현.</li>\n  <li><code class=\"highlighter-rouge\">python manage.py createsuperuser</code> : 슈퍼 유저 생성</li>\n</ul>\n"
    } ,
  
    {
      "title"    : "[Try Hello World] Level1 수박수박수박수박수박수?",
      "category" : "Solve Algorithm!tryhelloworld",
      "tags"     : "Alogorithm, Level1",
      "url"      : "/solve%20algorithm!/tryhelloworld/2017/05/30/tryhelloworld-level1-3-2.html",
      "date"     : "2017-05-30 00:00:00 +0900",
      "content"   : "<h2 id=\"수박수박수박수박수박수\">수박수박수박수박수박수?</h2>\n<p>water_melon함수는 정수 n을 매개변수로 입력받습니다.</p>\n\n<p>길이가 n이고, 수박수박수…와 같은 패턴을 유지하는 문자열을 리턴하도록 함수를 완성하세요.</p>\n\n<p>예를들어 n이 4이면 ‘수박수박’을 리턴하고 3이라면 ‘수박수’를 리턴하면 됩니다.</p>\n\n<ul>\n  <li>내가 푼 것</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">water_melon</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"n\">bowl</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">su</span> <span class=\"o\">=</span> <span class=\"s\">\"수\"</span>\n    <span class=\"n\">bak</span> <span class=\"o\">=</span> <span class=\"s\">\"박\"</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"n\">bowl</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">bak</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">bowl</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">su</span><span class=\"p\">)</span>\n\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"s\">''</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">bowl</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">result</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"n이 3인 경우: \"</span> <span class=\"o\">+</span> <span class=\"n\">water_melon</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">));</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"n이 4인 경우: \"</span> <span class=\"o\">+</span> <span class=\"n\">water_melon</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">));</span>\n</code></pre>\n</div>\n\n<ul>\n  <li>다른 사람 풀이</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">water_melon</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"s\">\"수박\"</span> <span class=\"o\">*</span> <span class=\"n\">n</span>\n    <span class=\"k\">return</span> <span class=\"n\">s</span><span class=\"p\">[:</span><span class=\"n\">n</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n\n<h3 id=\"소감\"><em>소감</em></h3>\n<ul>\n  <li>허무하게도 저렇게 간단한 방법이 있었다니… 분발해야겠다.</li>\n</ul>\n"
    } ,
  
    {
      "title"    : "[Try Hello World] Level1 스트링을 숫자로 바꾸기",
      "category" : "Solve Algorithm!tryhelloworld",
      "tags"     : "Alogorithm, Level1",
      "url"      : "/solve%20algorithm!/tryhelloworld/2017/05/30/tryhelloworld-level1-3-1.html",
      "date"     : "2017-05-30 00:00:00 +0900",
      "content"   : "<h2 id=\"스트링을-숫자로-바꾸기\">스트링을 숫자로 바꾸기</h2>\n<p>strToInt 메소드는 String형 str을 매개변수로 받습니다.</p>\n\n<p>str을 숫자로 변환한 결과를 반환하도록 strToInt를 완성하세요.</p>\n\n<p>예를들어 str이 “1234”이면 1234를 반환하고, “-1234”이면 -1234를 반환하면 됩니다.</p>\n\n<p>str은 부호(+,-)와 숫자로만 구성되어 있고, 잘못된 값이 입력되는 경우는 없습니다.</p>\n\n<ul>\n  <li>내가 푼 것</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">strToInt</span><span class=\"p\">(</span><span class=\"n\">String</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n    \t<span class=\"k\">return</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">strToInt</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">25</span><span class=\"p\">));</span>\n</code></pre>\n</div>\n"
    } ,
  
    {
      "title"    : "[Try Hello World] Level1 정수제곱근 판별하기",
      "category" : "Solve Algorithm!tryhelloworld",
      "tags"     : "Alogorithm, Level1",
      "url"      : "/solve%20algorithm!/tryhelloworld/2017/05/29/tryhelloworld-level1-2-3.html",
      "date"     : "2017-05-29 00:00:00 +0900",
      "content"   : "<h2 id=\"정수제곱근-판별하기\">정수제곱근 판별하기</h2>\n<p>nextSqaure함수는 정수 n을 매개변수로 입력받습니다.</p>\n\n<p>n이 임의의 정수 x의 제곱이라면 x+1의 제곱을 리턴하고, n이 임의의 정수 x의 제곱이 아니라면 ‘no’을 리턴하는 함수를 완성하세요.</p>\n\n<p>예를들어 n이 121이라면 이는 정수 11의 제곱이므로 (11+1)의 제곱인 144를 리턴하고, 3이라면 ‘no’을 리턴하면 됩니다.</p>\n\n<ul>\n  <li>내가 푼 것</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">nextSqure</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"n\">sqrt</span> <span class=\"o\">=</span> <span class=\"n\">n</span> <span class=\"o\">**</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">sqrt</span> <span class=\"o\">%</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n    \t<span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">sqrt</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">**</span> <span class=\"mi\">2</span>\n    <span class=\"k\">return</span> <span class=\"s\">\"no\"</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"결과 : {}\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">nextSqure</span><span class=\"p\">(</span><span class=\"mi\">169</span><span class=\"p\">)));</span>\n</code></pre>\n</div>\n\n<ul>\n  <li>다른 사람 풀이</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">nextSqure</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"o\">**</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"n\">n</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">**</span> <span class=\"mi\">2</span>\n    <span class=\"k\">return</span> <span class=\"s\">\"no\"</span>\n</code></pre>\n</div>\n"
    } ,
  
    {
      "title"    : "[Try Hello World] Level1 제일 작은 수 제거하기",
      "category" : "Solve Algorithm!tryhelloworld",
      "tags"     : "Alogorithm, Level1",
      "url"      : "/solve%20algorithm!/tryhelloworld/2017/05/29/tryhelloworld-level1-2-2.html",
      "date"     : "2017-05-29 00:00:00 +0900",
      "content"   : "<h2 id=\"제일-작은-수-제거하기\">제일 작은 수 제거하기</h2>\n<p>rm_small함수는 list타입 변수 mylist을 매개변수로 입력받습니다.</p>\n\n<p>mylist 에서 가장 작은 수를 제거한 리스트를 리턴하고, mylist의 원소가 1개 이하인 경우는 []를 리턴하는 함수를 완성하세요.</p>\n\n<p>예를들어 mylist가 [4,3,2,1]인 경우는 [4,3,2]를 리턴 하고, [10, 8, 22]면 [10, 22]를 리턴 합니다.</p>\n\n<ul>\n  <li>내가 푼 것</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">rm_small</span><span class=\"p\">(</span><span class=\"n\">mylist</span><span class=\"p\">):</span>\n    <span class=\"nb\">min</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">mylist</span><span class=\"p\">)</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n    \t<span class=\"n\">mylist</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"nb\">min</span> <span class=\"o\">=</span> <span class=\"n\">mylist</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">mylist</span><span class=\"p\">)):</span>\n            <span class=\"k\">if</span> <span class=\"nb\">min</span> <span class=\"o\">&gt;</span> <span class=\"n\">mylist</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]:</span>\n                <span class=\"nb\">min</span> <span class=\"o\">=</span> <span class=\"n\">mylist</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n\n        <span class=\"n\">mylist</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"nb\">min</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">mylist</span>\n\n<span class=\"n\">my_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"결과 {} \"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">rm_small</span><span class=\"p\">(</span><span class=\"n\">my_list</span><span class=\"p\">)))</span>\n</code></pre>\n</div>\n\n<ul>\n  <li>다른 사람 풀이</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">rm_small</span><span class=\"p\">(</span><span class=\"n\">mylist</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">mylist</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"n\">mylist</span><span class=\"p\">)]</span>\n</code></pre>\n</div>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">rm_small</span><span class=\"p\">(</span><span class=\"n\">mylist</span><span class=\"p\">):</span>\n    <span class=\"k\">del</span><span class=\"p\">(</span><span class=\"n\">mylist</span><span class=\"p\">[</span><span class=\"n\">mylist</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"n\">mylist</span><span class=\"p\">))])</span>\n    <span class=\"k\">return</span> <span class=\"n\">mylist</span>\n</code></pre>\n</div>\n\n<h3 id=\"소감\"><em>소감</em></h3>\n<ul>\n  <li>for문 사용을 줄이고 파이써닉한 내장 함수를 잘 활용하도록 노력해야겠다.</li>\n</ul>\n"
    } ,
  
    {
      "title"    : "[Try Hello World] Level1 짝수와 홀수",
      "category" : "Solve Algorithm!tryhelloworld",
      "tags"     : "Alogorithm, Level1",
      "url"      : "/solve%20algorithm!/tryhelloworld/2017/05/29/tryhelloworld-level1-2-1.html",
      "date"     : "2017-05-29 00:00:00 +0900",
      "content"   : "<h2 id=\"짝수와-홀수\">짝수와 홀수</h2>\n<p>evenOrOdd 메소드는 int형 num을 매개변수로 받습니다. num이 짝수일 경우 “Even”을 반환하고 홀수인 경우 “Odd”를 반환하도록 evenOrOdd에 코드를 작성해 보세요.</p>\n\n<p>num은 0이상의 정수이며, num이 음수인 경우는 없습니다.</p>\n\n<ul>\n  <li>내가 푼 것</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">evenOrOdd</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">):</span>\n  <span class=\"k\">return</span> <span class=\"s\">\"Even\"</span> <span class=\"k\">if</span> <span class=\"n\">num</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"s\">\"Odd\"</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"결과 : \"</span> <span class=\"o\">+</span> <span class=\"n\">evenOrOdd</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"결과 : \"</span> <span class=\"o\">+</span> <span class=\"n\">evenOrOdd</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<ul>\n  <li>다른 사람 풀이</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">evenOrOdd</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">num</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"ow\">and</span> <span class=\"s\">\"Odd\"</span> <span class=\"ow\">or</span> <span class=\"s\">\"Even\"</span>\n</code></pre>\n</div>\n"
    } ,
  
    {
      "title"    : "첫 장고 프로젝트!",
      "category" : "Do 장고걸스!djangogirls",
      "tags"     : "Django, Djangogirls, Blog",
      "url"      : "/do%20%EC%9E%A5%EA%B3%A0%EA%B1%B8%EC%8A%A4!/djangogirls/2017/05/28/djangogirs-first-project.html",
      "date"     : "2017-05-28 00:00:00 +0900",
      "content"   : "<blockquote>\n  <p><a href=\"https://tutorial.djangogirls.org/ko/\">장고걸스 튜토리얼</a>을 토대로 작성한 것입니다. 이 장은 장고 프로젝트를 시작하고 장고가 유지해야 하는 특정 구조를 구성합니다.</p>\n</blockquote>\n\n<h2 id=\"장고-설치-후-기본-골격-만들어주는-스크립트-실행\">장고 설치 후, 기본 골격 만들어주는 스크립트 실행</h2>\n<p>먼저, 장고 프로젝트에 대한 작업은 <code class=\"highlighter-rouge\">가상환경(virtualenv) 안</code>에서 해야한다. <br />\n- <a href=\"https://tutorial.djangogirls.org/ko/django_installation/\">파이썬 가상환경 구성하기</a></p>\n\n<h3 id=\"mac-혹은-linux-에서-프로젝트-생성하기\"><strong>Mac 혹은 Linux</strong> 에서 프로젝트 생성하기</h3>\n\n<p class=\"quote\">\n  <b style=\"color: skyblue;\">[Tip]</b> 명령어 끝에 .(마침표) : 현재 디렉토리에 장고를 설치하라는 표시이다.\n</p>\n\n<p>아래 명령어를 통해 <code class=\"highlighter-rouge\">장고 Rule</code>에 따른 새로운 프로젝트 디렉토리와 파일들을 생성해준다.</p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>&gt;&gt;&gt; django-admin startproject &lt;프로젝트명&gt; .\n</code></pre>\n</div>\n\n<p>디렉토리와 파일명은 중요하기 때문에 <strong>마음대로 변경하거나 다른 곳으로 옮겨서는 안된다.</strong></p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>djangogirls\n├── [...]\n├── manage.py\n└── mysite\n        settings.py\n        urls.py\n        wsgi.py\n        __init__.py\n</code></pre>\n</div>\n\n<ul>\n  <li><strong>manage.py :</strong> 사이트 관리를 도와준다. 다른 설치 작업 없이 바로 웹 서버를 시작할 수 있다.</li>\n  <li><strong>settings.py :</strong> 웹 설정이 있다.</li>\n  <li><strong>urls.py :</strong> urlresolver가 사용하는 패턴 목록을 포함한다. 즉 어디로 자원을 전달해야 하는지 판단한다.</li>\n</ul>\n\n<h3 id=\"설정-변경\">설정 변경</h3>\n<p>현재 장고 프로젝트를 진행하기 위한 기본 설정이 담겨있는 코드이다. 다음과 같은 추가적인 설정이 필요하다.</p>\n\n<p><strong>[project-directory/mysite/settings.py]</strong></p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">from</span> <span class=\"nn\">os.path</span> <span class=\"kn\">import</span> <span class=\"n\">abspath</span><span class=\"p\">,</span> <span class=\"n\">dirname</span><span class=\"p\">,</span> <span class=\"n\">join</span>\n\n<span class=\"n\">BASE_DIR</span> <span class=\"o\">=</span> <span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">abspath</span><span class=\"p\">(</span><span class=\"n\">__file__</span><span class=\"p\">),</span> <span class=\"s\">'..'</span><span class=\"p\">,</span> <span class=\"s\">'..'</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<ul>\n  <li><strong>__file__</strong> : /home/bbungsang/projects/django/djangogirls/djangogirls/mysite/settings.py</li>\n  <li><strong>앞의 ‘..’</strong> : /home/bbungsang/projects/django/djangogirls/djangogirls/mysite</li>\n  <li><strong>뒤의 ‘..’</strong> : /home/bbungsang/projects/django/djangogirls/djangogirls</li>\n</ul>\n\n<p style=\"font-weight: bold; color: #8d8d8d; margin: 25px 0;\">정확한 시간 넣기</p>\n\n<p>django 내에서 날짜/시간을 보여주고 저장할 때 반영할 시간을 지정해준다.</p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>TIME_ZONE = 'Asia/Soeul'\n</code></pre>\n</div>\n\n<p style=\"font-weight: bold; color: #8d8d8d; margin: 25px 0;\">정적파일 경로 추가</p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>STATIC_URL = '/static' &lt;br&gt;\nSTATIC_ROOT = os.path.join(BASE_DIR, 'static')&lt;br&gt;\n</code></pre>\n</div>\n\n<p>위와 같이 이 경로는 <code class=\"highlighter-rouge\">/home/bbungsang/projects/django/djangogirls/djangogirls/static</code> 을 의미한다.</p>\n\n<h3 id=\"데이터베이스-설정\">데이터베이스 설정</h3>\n\n<p>(sqlite3 사용 전제)</p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"n\">DATABASES</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">'default'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s\">'ENGINE'</span><span class=\"p\">:</span> <span class=\"s\">'django.db.backends.sqlite3'</span><span class=\"p\">,</span>\n        <span class=\"s\">'NAME'</span><span class=\"p\">:</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">BASE_DIR</span><span class=\"p\">,</span> <span class=\"s\">'db.sqlite3'</span><span class=\"p\">),</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div>\n\n<h3 id=\"설정이-다-끝났다면-단-3step-만으로-웹어플리케이션을-실행할-수-있다\">설정이 다 끝났다면, 단 <em>3step</em> 만으로 웹어플리케이션을 실행할 수 있다.</h3>\n\n<blockquote>\n  <p><strong>Step1)</strong> 데이터베이스를 생성하기 위해 콘솔 창에서 <code class=\"highlighter-rouge\">python manage.py migrate</code> 를 실행해야하는데, 이 때, <code class=\"highlighter-rouge\">djangogirs</code>(project-directory) 안에 있는 <code class=\"highlighter-rouge\">manage.py</code> 파일이 필요하다. <br /><br />\n<strong>Step2)</strong> 콘솔창에 <code class=\"highlighter-rouge\">python manage.py runserver</code> 명령을 실행한다.  <br /><br />\n<strong>Step3)</strong> : 끝으로, 브라우저에 <code class=\"highlighter-rouge\">http://127.0.0.1:8000/</code>를 입력하면 개발 서버가 뜬다.</p>\n</blockquote>\n\n<p><img src=\"http://localhost:4000/assets/it_worked.png\" alt=\"it_worked\" class=\"center-image\" /></p>\n"
    } ,
  
    {
      "title"    : "[Try Hello World] Level1 자릿수 더하기",
      "category" : "Solve Algorithm!tryhelloworld",
      "tags"     : "Alogorithm, Level1",
      "url"      : "/solve%20algorithm!/tryhelloworld/2017/05/28/tryhelloworld-level1-1-4.html",
      "date"     : "2017-05-28 00:00:00 +0900",
      "content"   : "<h2 id=\"자릿수-더하기\">자릿수 더하기</h2>\n<p>sum_digit함수는 자연수를 전달 받아서 숫자의 각 자릿수의 합을 구해서 return합니다.\n예를들어 number = 123이면 1 + 2 + 3 = 6을 return하면 됩니다.\nsum_digit함수를 완성해보세요.</p>\n\n<ul>\n  <li>내가 푼 것</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">sum_digit</span><span class=\"p\">(</span><span class=\"n\">number</span><span class=\"p\">):</span>\n    <span class=\"n\">str_num</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">number</span><span class=\"p\">)</span>\n    <span class=\"c\"># bowl = \"\"</span>\n    <span class=\"nb\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">str_num</span><span class=\"p\">)):</span>\n        <span class=\"nb\">sum</span> <span class=\"o\">+=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">str_num</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n        <span class=\"c\"># if i == len(str_num) - 1:</span>\n        <span class=\"c\">#     bowl += str_num[i] + \"=\"</span>\n        <span class=\"c\"># else:</span>\n        <span class=\"c\">#     bowl += str_num[i] + \"+\"</span>\n\n    <span class=\"k\">return</span> <span class=\"nb\">sum</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"결과 : {}\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">sum_digit</span><span class=\"p\">(</span><span class=\"mi\">123</span><span class=\"p\">)));</span>\n</code></pre>\n</div>\n\n<ul>\n  <li>다른 사람 풀이</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">sum_digit</span><span class=\"p\">(</span><span class=\"n\">number</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">number</span> <span class=\"o\">&lt;</span> <span class=\"mi\">10</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">number</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">number</span> <span class=\"o\">%</span> <span class=\"mi\">10</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">sum_digit</span><span class=\"p\">(</span><span class=\"n\">number</span> <span class=\"o\">//</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">average</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">):</span>\n    <span class=\"n\">avg</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"nb\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">:</span>\n    \t<span class=\"nb\">sum</span> <span class=\"o\">+=</span> <span class=\"n\">i</span>\n\n    <span class=\"n\">avg</span> <span class=\"o\">=</span> <span class=\"nb\">sum</span> <span class=\"o\">/</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">avg</span>\n\n<span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"평균값 : {}\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">average</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">)));</span>\n</code></pre>\n</div>\n"
    } ,
  
    {
      "title"    : "[Try Hello World] Level1 평균 구하기",
      "category" : "Solve Algorithm!tryhelloworld",
      "tags"     : "Alogorithm, Level1",
      "url"      : "/solve%20algorithm!/tryhelloworld/2017/05/28/tryhelloworld-level1-1-3.html",
      "date"     : "2017-05-28 00:00:00 +0900",
      "content"   : "<h2 id=\"평균-구하기\">평균 구하기</h2>\n<p>함수를 완성해서 매개변수 list의 평균값을 return하도록 만들어 보세요.\n어떠한 크기의 list가 와도 평균값을 구할 수 있어야 합니다.</p>\n\n<ul>\n  <li>내 풀이</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">average</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">):</span>\n    <span class=\"n\">avg</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"nb\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">:</span>\n    \t<span class=\"nb\">sum</span> <span class=\"o\">+=</span> <span class=\"n\">i</span>\n\n    <span class=\"n\">avg</span> <span class=\"o\">=</span> <span class=\"nb\">sum</span> <span class=\"o\">/</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">avg</span>\n\n<span class=\"c\"># 아래는 테스트로 출력해 보기 위한 코드입니다.</span>\n<span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"평균값 : {}\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">average</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">)));</span>\n</code></pre>\n</div>\n\n<ul>\n  <li>다른 사람 풀이</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">average</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"mi\">0</span>\n\n    <span class=\"k\">return</span> <span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">)</span>\n\n<span class=\"c\"># 아래는 테스트로 출력해 보기 위한 코드입니다.</span>\n<span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"평균값 : {}\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">average</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">)));</span>\n</code></pre>\n</div>\n\n<h3 id=\"소감\"><em>소감</em></h3>\n<ul>\n  <li>sum() 메서드를 활용하면 더욱 간단하다는 것을 알게됐다.</li>\n</ul>\n"
    } ,
  
    {
      "title"    : "[Try Hello World] Level1 핸드폰 번호 가리기",
      "category" : "Solve Algorithm!tryhelloworld",
      "tags"     : "Alogorithm, Level1",
      "url"      : "/solve%20algorithm!/tryhelloworld/2017/05/28/tryhelloworld-level1-1-2.html",
      "date"     : "2017-05-28 00:00:00 +0900",
      "content"   : "<h2 id=\"핸드폰-번호-가리기\">핸드폰 번호 가리기</h2>\n\n<p>별이는 헬로월드텔레콤에서 고지서를 보내는 일을 하고 있습니다.</p>\n\n<p>개인정보 보호를 위해 고객들의 전화번호는 맨 뒷자리 4자리를 제외한 나머지를 ` * ` 으로 바꿔야 합니다.</p>\n\n<p>전화번호를 문자열 s로 입력받는 hide_numbers함수를 완성해 별이를 도와주세요.</p>\n\n<p>예를들어 s가 01033334444 면 *******4444 를 리턴하고, 027778888 인 경우는 *****8888 을 리턴하면 됩니다.</p>\n\n<ul>\n  <li>내가 푼 것</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">hide_numbers</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n    <span class=\"n\">hide</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">4</span>\n    <span class=\"n\">change</span> <span class=\"o\">=</span> <span class=\"s\">'*'</span> <span class=\"o\">*</span> <span class=\"n\">hide</span>\n    <span class=\"k\">return</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"n\">hide</span><span class=\"p\">],</span> <span class=\"n\">change</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"결과 : \"</span> <span class=\"o\">+</span> <span class=\"n\">hide_numbers</span><span class=\"p\">(</span><span class=\"s\">'01033334444'</span><span class=\"p\">));</span>\n</code></pre>\n</div>\n\n<ul>\n  <li>다른 사람 풀이</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">re</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">hide_numbers</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n    <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"nb\">compile</span><span class=\"p\">(</span><span class=\"s\">r'</span><span class=\"err\">\\</span><span class=\"s\">d(?=</span><span class=\"err\">\\</span><span class=\"s\">d{4})'</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">(</span><span class=\"s\">\"*\"</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"c\"># 아래는 테스트로 출력해 보기 위한 코드입니다.</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"결과 : \"</span> <span class=\"o\">+</span> <span class=\"n\">hide_numbers</span><span class=\"p\">(</span><span class=\"s\">'01033334444'</span><span class=\"p\">));</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"결과 : \"</span> <span class=\"o\">+</span> <span class=\"n\">hide_numbers</span><span class=\"p\">(</span><span class=\"s\">'027778888'</span><span class=\"p\">));</span>\n</code></pre>\n</div>\n\n<h3 id=\"소감\"><em>소감</em></h3>\n<ul>\n  <li>정규표현식을 활용한 풀이가 와닿았다. 다음에 정규표현식으로 문제에 접근해봐야지!</li>\n</ul>\n"
    } ,
  
    {
      "title"    : "[Try Hello World] Level1 x만큼 간격이 있는 n개의 숫자",
      "category" : "Solve Algorithm!tryhelloworld",
      "tags"     : "Alogorithm, Level1",
      "url"      : "/solve%20algorithm!/tryhelloworld/2017/05/28/tryhelloworld-level1-1-1.html",
      "date"     : "2017-05-28 00:00:00 +0900",
      "content"   : "<h2 id=\"x만큼-간격이-있는-n개의-숫자\">x만큼 간격이 있는 n개의 숫자</h2>\n<p>number_generator함수는 x와 n을 입력 받습니다.</p>\n\n<p>2와 5를 입력 받으면 2부터 시작해서 2씩 증가하는 숫자를 5개 가지는 리스트를 만들어서 리턴합니다.</p>\n\n<p>[2,4,6,8,10]</p>\n\n<p>4와 3을 입력 받으면 4부터 시작해서 4씩 증가하는 숫자를 3개 가지는 리스트를 만들어서 리턴합니다.</p>\n\n<p>[4,8,12]</p>\n\n<p>이를 일반화 하면 x부터 시작해서 x씩 증가하는 숫자를 n개 가지는 리스트를 리턴하도록 함수 number_generator를 완성하면 됩니다.</p>\n\n<ul>\n  <li>내가 푼 것</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">number_generator</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n        <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"nb\">list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"nb\">list</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">number_generator</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<ul>\n  <li>다른 사람 풀이</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">number_generator</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">*</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">x</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">number_generator</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<h3 id=\"소감\"><em>소감</em></h3>\n<ul>\n  <li>컴프리헨션 공부하자!</li>\n</ul>\n"
    } ,
  
    {
      "title"    : "파이썬 크롤링 라이브러리 - 뷰티풀수프",
      "category" : "파이썬 라이브러리library",
      "tags"     : "Python, BeautifulSoup, Crawling",
      "url"      : "/%ED%8C%8C%EC%9D%B4%EC%8D%AC%20%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC/library/2017/05/27/python-beautifulsoup1.html",
      "date"     : "2017-05-27 00:00:00 +0900",
      "content"   : "<h2 id=\"뷰티풀수프beautifulsoup\">뷰티풀수프(BeautifulSoup)</h2>\n<ul>\n  <li>뷰티풀수프는 HTML과 XML로부터 데이터를 뽑기위한 라이브러리이다.</li>\n  <li>문서를 뷰티풀수프에 넣으면 객체가 나오는데, 이 객체는 문서롤 내포한 데이터 구조로 나타낸다.<br /><br /></li>\n</ul>\n\n<h4 id=\"데이터-구조를-파싱하는-방법\">데이터 구조를 파싱하는 방법</h4>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"n\">soup</span><span class=\"o\">.</span><span class=\"n\">title</span>\n<span class=\"c\"># &lt;title&gt;The bbungsnag's story&lt;/title&gt;</span>\n\n<span class=\"n\">soup</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"o\">.</span><span class=\"n\">string</span>\n<span class=\"c\"># The bbugnsang's story</span>\n\n<span class=\"n\">soup</span><span class=\"o\">.</span><span class=\"n\">p</span><span class=\"p\">[</span><span class=\"s\">'class'</span><span class=\"p\">]</span>\n<span class=\"c\"># return class value</span>\n\n<span class=\"n\">soup</span><span class=\"o\">.</span><span class=\"n\">find_all</span><span class=\"p\">(</span><span class=\"s\">'a'</span><span class=\"p\">)</span>\n<span class=\"c\"># a 태그에 해당하는 모든 값을 리스트로 반환</span>\n\n<span class=\"n\">soup</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s\">'bbungsang'</span><span class=\"p\">)</span>\n<span class=\"c\"># id='bbungsang'에 해당하는 a 태그 값 파싱</span>\n\n<span class=\"k\">for</span> <span class=\"n\">link</span> <span class=\"ow\">in</span> <span class=\"n\">soup</span><span class=\"o\">.</span><span class=\"n\">find_all</span><span class=\"p\">(</span><span class=\"s\">'a'</span><span class=\"p\">):</span>\n  <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">link</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">'href'</span><span class=\"p\">))</span>\n<span class=\"c\"># a href 값 연속해서 파싱</span>\n\n<span class=\"n\">soup</span><span class=\"o\">.</span><span class=\"n\">get_text</span><span class=\"p\">()</span>\n<span class=\"c\"># 페이지 텍스트 모두 파싱</span>\n</code></pre>\n</div>\n\n<h2 id=\"해석기\">해석기</h2>\n<p>뷰티플수프는 파이썬 기본 라이브러리에 있는 HTML 해석기를 지원하지만, 또한 제 3의 해석기도 지원한다. 그 대표적인 해석기로 lxml 해석기가 있다.</p>\n\n<h4 id=\"각-해석기의-장단점\">각 해석기의 장단점</h4>\n<ul>\n  <li><strong>BeautifulSoup(markup, ‘html.parser’)</strong>\n    <ul>\n      <li>장점 : 적절한 속도</li>\n      <li>단점 : 특정 버전에서만 관대함</li>\n    </ul>\n  </li>\n  <li><strong>BeautifulSoup(markup, ‘lxml’)</strong>\n    <ul>\n      <li>장점 : 아주 빠름</li>\n      <li>단점 : 외부 C 라이브러리 의존</li>\n    </ul>\n  </li>\n  <li><strong>BeautifulSoup(‘lxml’, ‘lxml’)</strong>\n    <ul>\n      <li>아주 빠르고 유일하게 XML 해석기 지원</li>\n      <li>외부 C 라이브러리 의존</li>\n    </ul>\n  </li>\n</ul>\n\n<h2 id=\"객체의-종류\">객체의 종류</h2>\n<h3 id=\"태그\">태그</h3>\n\n<div class=\"language-html highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"c\">&lt;!-- 태그 객체 생성 --&gt;</span>\nsoup = BeautifulSoup('<span class=\"nt\">&lt;b</span> <span class=\"na\">class=</span><span class=\"s\">\"boldest\"</span><span class=\"nt\">&gt;</span>Bold<span class=\"nt\">&lt;/b&gt;</span>')\ntag = soup.b\n</code></pre>\n</div>\n\n<ul>\n  <li>\n    <p>태그마다 이름이 있고 <code class=\"highlighter-rouge\">&lt;태그객체&gt;.name</code>으로 접근한다.</p>\n  </li>\n  <li>\n    <p>태그는 속성을 여러개 가질 수 있다. <code class=\"highlighter-rouge\">&lt;태그객체&gt;['class']</code> 으로 접근하면 해당 값인 <code class=\"highlighter-rouge\">boldest</code>가 반환된다.</p>\n  </li>\n  <li>\n    <p><code class=\"highlighter-rouge\">&lt;태그객체&gt;.attrs</code>로 접근하면 <code class=\"highlighter-rouge\"><span class=\"p\">{</span><span class=\"err\">'class'</span><span class=\"w\"> </span><span class=\"err\">:</span><span class=\"w\"> </span><span class=\"err\">'boldest'</span><span class=\"w\"> </span><span class=\"p\">}</span></code> 딕셔너리 형태로 반환된다.</p>\n  </li>\n  <li>\n    <p><code class=\"highlighter-rouge\">&lt;태그객체&gt;.string.replace_with(NotBold)</code> 문자열을 다른 문자열로 바꾼다.\n<code class=\"highlighter-rouge\">&lt;b class='boldest'&gt;NotBold&lt;/b&gt;</code></p>\n  </li>\n</ul>\n"
    } ,
  
    {
      "title"    : "문자열, List, Tuple",
      "category" : "파이썬 문법basic",
      "tags"     : "Python, List, Tuple",
      "url"      : "/%ED%8C%8C%EC%9D%B4%EC%8D%AC%20%EB%AC%B8%EB%B2%95/basic/2017/05/27/python-basic-string-list-tuple.html",
      "date"     : "2017-05-27 00:00:00 +0900",
      "content"   : "<h2 id=\"문자열\">문자열</h2>\n\n<h3 id=\"split\">Split</h3>\n<p><code class=\"highlighter-rouge\">&lt;문자열 변수&gt;.split('구분자')</code></p>\n<ul>\n  <li>문자열을 리스트 타입으로 반환한다.</li>\n  <li>인자를 주지 않을 경우, 공백문자를 구분자로 사용한다.</li>\n</ul>\n\n<h3 id=\"join\">Join</h3>\n<p><code class=\"highlighter-rouge\">'구분자'.join(&lt;문자열 변수&gt;)</code></p>\n<ul>\n  <li>리스트를 하나의 문자열로 결합한다.</li>\n</ul>\n\n<h3 id=\"replace\">Replace</h3>\n<p><code class=\"highlighter-rouge\">&lt;문자열 변수&gt;.replace('변수에 속한 문자열', '대체할 문자열')</code></p>\n<ul>\n  <li>변수에 속한 문자열을 대체할 문자열로 바꿔준다.</li>\n</ul>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>&gt;&gt;&gt; test = 'Show Me The 머니'\n&gt;&gt;&gt; result = test.replace('머니', 'Money')\n&gt;&gt;&gt; result\n'Show Me The Money'\n</code></pre>\n</div>\n\n<h3 id=\"대소문자\">대소문자</h3>\n<p><code class=\"highlighter-rouge\">&lt;문자열 변수&gt;.upper()</code></p>\n<ul>\n  <li>대문자로 변환</li>\n</ul>\n\n<p><code class=\"highlighter-rouge\">&lt;문자열 변수&gt;.lower()</code></p>\n<ul>\n  <li>소문자로 변환</li>\n</ul>\n\n<h2 id=\"list\">List</h2>\n<ul>\n  <li>리스트는 순차적인 데이터를 나타내는 데 유용하며, 문자여로가 달리 원소를 변경할 수 있다.</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"c\"># 리스트의 생성</span>\n<span class=\"n\">empty_list1</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"n\">empty_list2</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">()</span>\n<span class=\"n\">sample_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">'a'</span><span class=\"p\">,</span> <span class=\"s\">'b'</span><span class=\"p\">,</span> <span class=\"s\">'c'</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n\n<ul>\n  <li>\n    <p><strong>슬라이스 :</strong> 리스트[start : end : step]</p>\n  </li>\n  <li>\n    <p><strong>append :</strong> 리스트에 원소 추가, 리스트로 할당된 변수에 또 다른 리스트로 할당된 변수를 ‘append’하면 리스트 안에 리스트가 중복 삽입된다.</p>\n  </li>\n</ul>\n\n<p><code class=\"highlighter-rouge\">&lt;리스트1&gt;.append(&lt;리스트2&gt;)</code></p>\n\n<ul>\n  <li><strong>extend :</strong> 마찬가지로 리스트에 원소 추가, 하지만 리스트에 리스트를 ‘extend’하면 병합되어 리스트 중복을 피할 수 있다.</li>\n</ul>\n\n<p><code class=\"highlighter-rouge\">&lt;리스트1&gt;.extend(&lt;리스트2&gt;)</code><br />\n<!-- 즉, 내용을 ` `하면 중복된 부분은 탈락된다. --></p>\n<ul>\n  <li><strong>remove :</strong> 값으로 리스트 항목 삭제, 중복되는 값이 하나의 리스트에 여러 개 존재하더라도 그 첫번째 값만 삭제한다.</li>\n</ul>\n\n<p><code class=\"highlighter-rouge\">&lt;list&gt;.remove('value')</code></p>\n\n<ul>\n  <li><strong>index :</strong> 값으로 리스트 오프셋 찾기, 마찬가지로 중복되는 값이 하나의 리스트에 여러 개 존재하더라도 그 첫번째 항목의 오프셋만 찾을 수 있다.</li>\n</ul>\n\n<p><code class=\"highlighter-rouge\">&lt;리스트&gt;.index('value')</code></p>\n\n<ul>\n  <li><strong>in :</strong> 존재여부 확인, 존재하면 True, 존재하지 않으면 False를 반환한다.</li>\n</ul>\n\n<p><code class=\"highlighter-rouge\">'value' in &lt;list&gt;</code></p>\n\n<ul>\n  <li><strong>count :</strong> 리스트 안의 값을 센다.</li>\n</ul>\n\n<h2 id=\"tuple\">Tuple</h2>\n<p>리스트와 비슷하나, 내부 항목의 삭제나 수정이 불가능하다.</p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"c\">#빈 튜플의 생성</span>\n<span class=\"n\">empty_tuple</span> <span class=\"o\">=</span> <span class=\"p\">()</span>\n<span class=\"c\"># 튜플이 하나의 항목만 가질 경우, 쉼표로서 튜플임을 명시한다.</span>\n<span class=\"n\">colors</span> <span class=\"o\">=</span> <span class=\"s\">'red'</span><span class=\"p\">,</span>\n<span class=\"n\">fruits</span> <span class=\"o\">=</span> <span class=\"s\">'apple'</span><span class=\"p\">,</span> <span class=\"s\">'banana'</span><span class=\"p\">,</span>\n</code></pre>\n</div>\n\n<ul>\n  <li>\n    <p><strong>튜플 언패킹 :</strong> 튜플 항목의 값을 각 변수에 할당한다. <code class=\"highlighter-rouge\">f1, f2 = fruits</code></p>\n  </li>\n  <li>\n    <p><strong>튜플을 사용하는 이유</strong></p>\n    <ul>\n      <li>리스트보다 적은 메모리 사용</li>\n      <li>정의 후에는 변하지 않는 내부 값</li>\n    </ul>\n  </li>\n</ul>\n\n<h3 id=\"실습\"><em>실습</em></h3>\n<p>1 . 문자열 ‘Fastcampus’를 리스트, 튜플 타이으로 형편환하여 새 변수에 할당한다.</p>\n\n<div class=\"language-python highlighter-rouge\"><pre class=\"highlight\"><code>  <span class=\"n\">fc_string</span> <span class=\"o\">=</span> <span class=\"s\">'Fastcampus'</span>\n  <span class=\"c\"># 출력 결과 : Fastcampus</span>\n\n  <span class=\"n\">fc_tuple</span> <span class=\"o\">=</span> <span class=\"nb\">tuple</span><span class=\"p\">(</span><span class=\"n\">fc_string</span><span class=\"p\">)</span> <span class=\"c\"># tuple('스트링형으로^^*')</span>\n  <span class=\"c\"># 출력 결과 : ('F', 'a', 's', 't', 'c', 'a', 'm', 'p', 'u', 's')</span>\n\n  <span class=\"n\">fc_list</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">fc_tuple</span><span class=\"p\">)</span>\n  <span class=\"c\"># 출력 결과 : ['F', 'a', 's', 't', 'c', 'a', 'm', 'p', 'u', 's']</span>\n</code></pre>\n</div>\n"
    } 
  
  ,
  
   {
     
   } ,
  
   {
     
   } ,
  
   {
     
   } ,
  
   {
     
   } ,
  
   {
     
   } ,
  
   {
     
   } ,
  
   {
     
   } ,
  
   {
     
   } ,
  
   {
     
   } ,
  
   {
     
   } ,
  
   {
     
   } ,
  
   {
     
   } ,
  
   {
     
        "title"    : "Tags",
        "category" : "",
        "tags"     : "",
        "url"      : "/tags/",
        "date"     : "",
        "content"  : "<div class=\"tags\">\n  <div class=\"tag-cloud\">\n    {% for tag in site.tags %}\n      <span style=\"font-size: {{ tag | last | size | times: 100 | divided_by: site.tags.size | plus: 70  }}%\">\n        <a href=\"#{{ tag | first | slugize }}\">\n          {{ tag | first }}\n        </a> &nbsp;&nbsp;\n      </span>\n    {% endfor %}\n  </div>\n</div>\n\n<div id=\"archives\">\n{% for tag in site.tags %}\n  <div class=\"archive-group\">\n    {% capture tag_name %}{{ tag | first }}{% endcapture %}\n    <h3 id=\"#{{ tag_name | slugize }}\">{{ tag_name }}</h3>\n    <a name=\"{{ tag_name | slugize }}\"></a>\n    {% for post in site.tags[tag_name] %}\n    <article class=\"archive-item\">\n      <h4><a href=\"{{ root_url }}{{ post.url }}\">{{post.title}}</a></h4>\n    </article>\n    {% endfor %}\n  </div>\n{% endfor %}\n</div>\n"
     
   } 
  
]
